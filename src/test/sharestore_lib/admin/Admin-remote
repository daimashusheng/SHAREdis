#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from admin import Admin
from admin.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  AddDBResponse addDB(AddDBRequest request)')
    print('  BackupDBResponse backupDB(BackupDBRequest request)')
    print('  RestoreDBResponse restoreDB(RestoreDBRequest request)')
    print('  BackupDBToObjectResponse backupDBToObject(BackupDBToObjectRequest request)')
    print('  RestoreDBFromObjectResponse restoreDBFromObject(RestoreDBFromObjectRequest request)')
    print('  CheckDBResponse checkDB(CheckDBRequest request)')
    print('  CloseDBResponse closeDB(CloseDBRequest request)')
    print('  ChangeDBRoleAndUpstreamResponse changeDBRoleAndUpStream(ChangeDBRoleAndUpstreamRequest request)')
    print('  GetSequenceNumberResponse getSequenceNumber(GetSequenceNumberRequest request)')
    print('  ClearDBResponse clearDB(ClearDBRequest request)')
    print('  AddS3SstFilesToDBResponse addS3SstFilesToDB(AddS3SstFilesToDBRequest request)')
    print('  DownloadS3SstFilesResponse downLoadS3SstFiles(DownloadS3SstFilesRequest request)')
    print('  IngestSstsToDBResponse ingestSstsToDB(IngestSstsToDBRequest request)')
    print('  StartMessageIngestionResponse startMessageIngestion(StartMessageIngestionRequest request)')
    print('  StopMessageIngestionResponse stopMessageIngestion(StopMessageIngestionRequest request)')
    print('  SetDBOptionsResponse setDBOptions(SetDBOptionsRequest request)')
    print('  CompactDBResponse compactDB(CompactDBRequest request)')
    print('  SetDbMetaDataResponse setDBMetaDb(SetDbMetaDataRequest request)')
    print('  GetDbMetaDataResponse getDBMetaDb(GetDbMetaDataRequest request)')
    print('  CheckLoadsstRouterResponse checkLoadsstRouter(CheckLoadsstRouterRequest request)')
    print('  MigrateSSTToObjectResponse migrateSSTToObject(MigrateSSTToObjectRequest request)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Admin.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'addDB':
    if len(args) != 1:
        print('addDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.addDB(eval(args[0]),))

elif cmd == 'backupDB':
    if len(args) != 1:
        print('backupDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.backupDB(eval(args[0]),))

elif cmd == 'restoreDB':
    if len(args) != 1:
        print('restoreDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.restoreDB(eval(args[0]),))

elif cmd == 'backupDBToObject':
    if len(args) != 1:
        print('backupDBToObject requires 1 args')
        sys.exit(1)
    pp.pprint(client.backupDBToObject(eval(args[0]),))

elif cmd == 'restoreDBFromObject':
    if len(args) != 1:
        print('restoreDBFromObject requires 1 args')
        sys.exit(1)
    pp.pprint(client.restoreDBFromObject(eval(args[0]),))

elif cmd == 'checkDB':
    if len(args) != 1:
        print('checkDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkDB(eval(args[0]),))

elif cmd == 'closeDB':
    if len(args) != 1:
        print('closeDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.closeDB(eval(args[0]),))

elif cmd == 'changeDBRoleAndUpStream':
    if len(args) != 1:
        print('changeDBRoleAndUpStream requires 1 args')
        sys.exit(1)
    pp.pprint(client.changeDBRoleAndUpStream(eval(args[0]),))

elif cmd == 'getSequenceNumber':
    if len(args) != 1:
        print('getSequenceNumber requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSequenceNumber(eval(args[0]),))

elif cmd == 'clearDB':
    if len(args) != 1:
        print('clearDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearDB(eval(args[0]),))

elif cmd == 'addS3SstFilesToDB':
    if len(args) != 1:
        print('addS3SstFilesToDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.addS3SstFilesToDB(eval(args[0]),))

elif cmd == 'downLoadS3SstFiles':
    if len(args) != 1:
        print('downLoadS3SstFiles requires 1 args')
        sys.exit(1)
    pp.pprint(client.downLoadS3SstFiles(eval(args[0]),))

elif cmd == 'ingestSstsToDB':
    if len(args) != 1:
        print('ingestSstsToDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.ingestSstsToDB(eval(args[0]),))

elif cmd == 'startMessageIngestion':
    if len(args) != 1:
        print('startMessageIngestion requires 1 args')
        sys.exit(1)
    pp.pprint(client.startMessageIngestion(eval(args[0]),))

elif cmd == 'stopMessageIngestion':
    if len(args) != 1:
        print('stopMessageIngestion requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopMessageIngestion(eval(args[0]),))

elif cmd == 'setDBOptions':
    if len(args) != 1:
        print('setDBOptions requires 1 args')
        sys.exit(1)
    pp.pprint(client.setDBOptions(eval(args[0]),))

elif cmd == 'compactDB':
    if len(args) != 1:
        print('compactDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.compactDB(eval(args[0]),))

elif cmd == 'setDBMetaDb':
    if len(args) != 1:
        print('setDBMetaDb requires 1 args')
        sys.exit(1)
    pp.pprint(client.setDBMetaDb(eval(args[0]),))

elif cmd == 'getDBMetaDb':
    if len(args) != 1:
        print('getDBMetaDb requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDBMetaDb(eval(args[0]),))

elif cmd == 'checkLoadsstRouter':
    if len(args) != 1:
        print('checkLoadsstRouter requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkLoadsstRouter(eval(args[0]),))

elif cmd == 'migrateSSTToObject':
    if len(args) != 1:
        print('migrateSSTToObject requires 1 args')
        sys.exit(1)
    pp.pprint(client.migrateSSTToObject(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
