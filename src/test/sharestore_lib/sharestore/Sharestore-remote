#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from sharestore import Sharestore
from sharestore.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  GetResponse getValue(GetRequest request)')
    print('  TtlResponse ttl(TtlRequest request)')
    print('  SetResponse setValue(SetRequest request)')
    print('  DelResponse delValue(DelRequest request)')
    print('  MultiGetResponse multiGetValue(MultiGetRequest mrequest)')
    print('  MultiSetResponse multiSetValue(MultiSetRequest msequest)')
    print('  IncrCounterResponse incrCounter(IncrCounterRequest request)')
    print('  IncrCounterResponse incrCounterTtl(IncrCounterTtlRequest request)')
    print('  MultiIncrCounterResponse multiIncrCounter(MultiIncrCounterRequest request)')
    print('  MultiIncrCounterResponse multiIncrCounterTtl(MultiIncrCounterTtlRequest request)')
    print('  SetCounterResponse setCounter(SetCounterRequest request)')
    print('  SetCounterResponse setCounterTtl(SetCounterTtlRequest request)')
    print('  MultiSetCounterResponse multiSetCounter(MultiSetCounterRequest request)')
    print('  MultiSetCounterResponse multiSetCounterTtl(MultiSetCounterTtlRequest request)')
    print('  GetCounterResponse getCounter(GetCounterRequest request)')
    print('  MultiGetCounterResponse multiGetCounter(MultiGetCounterRequest mrequest)')
    print('  DSSetResponse dsSetValue(DSSetRequest request)')
    print('  DSRemResponse dsRemValue(DSRemRequest request)')
    print('  DSGetResponse dsGetValue(DSGetRequest request)')
    print('  DSCountResponse dsCountValue(DSCountRequest request)')
    print('  DSDelResponse dsDelValue(DSDelRequest request)')
    print('  DSIsMemberResponse dsIsMember(DSIsMemberRequest request)')
    print('  HashSetResponse hashSetValue(HashSetRequest request)')
    print('  MultiHashSetResponse multiHashSetValue(MultiHashSetRequest request)')
    print('  HashRemResponse hashRemValue(HashRemRequest request)')
    print('  MultiHashRemResponse multiHashRemValue(MultiHashRemRequest request)')
    print('  HashGetResponse hashGetValue(HashGetRequest request)')
    print('  MultiHashGetResponse multiHashGetValue(MultiHashGetRequest request)')
    print('  HashIncrResponse hashIncrValue(HashIncrRequest request)')
    print('  HashCountResponse hashCountValue(HashCountRequest request)')
    print('  HashExSetResponse hashExSetValue(HashExSetRequest request)')
    print('  HashExRemResponse hashExRemValue(HashExRemRequest request)')
    print('  HashExGetResponse hashExGetValue(HashExGetRequest request)')
    print('  HashExIncrResponse hashExIncrValue(HashExIncrRequest request)')
    print('  HashExCountResponse hashExCountValue(HashExCountRequest request)')
    print('  ZSetAddResponse zsetAddValue(ZSetAddRequest request)')
    print('  ZSetRemResponse zsetRemValue(ZSetRemRequest request)')
    print('  ZSetGetResponse zsetGetValue(ZSetGetRequest request)')
    print('  ZSetGetRangeResponse zsetGetRangeValue(ZSetGetRangeRequest request)')
    print('  ZSetRemRangeResponse zsetRemRangeValue(ZSetRemRangeRequest request)')
    print('  ZSetCountResponse zsetCountValue(ZSetCountRequest request)')
    print('  ZSetScanResponse zsetScanValue(ZSetScanRequest request)')
    print('  void ping()')
    print('  AddDBResponse addDB(AddDBRequest request)')
    print('  BackupDBResponse backupDB(BackupDBRequest request)')
    print('  RestoreDBResponse restoreDB(RestoreDBRequest request)')
    print('  BackupDBToObjectResponse backupDBToObject(BackupDBToObjectRequest request)')
    print('  RestoreDBFromObjectResponse restoreDBFromObject(RestoreDBFromObjectRequest request)')
    print('  CheckDBResponse checkDB(CheckDBRequest request)')
    print('  CloseDBResponse closeDB(CloseDBRequest request)')
    print('  ChangeDBRoleAndUpstreamResponse changeDBRoleAndUpStream(ChangeDBRoleAndUpstreamRequest request)')
    print('  GetSequenceNumberResponse getSequenceNumber(GetSequenceNumberRequest request)')
    print('  ClearDBResponse clearDB(ClearDBRequest request)')
    print('  AddS3SstFilesToDBResponse addS3SstFilesToDB(AddS3SstFilesToDBRequest request)')
    print('  DownloadS3SstFilesResponse downLoadS3SstFiles(DownloadS3SstFilesRequest request)')
    print('  IngestSstsToDBResponse ingestSstsToDB(IngestSstsToDBRequest request)')
    print('  StartMessageIngestionResponse startMessageIngestion(StartMessageIngestionRequest request)')
    print('  StopMessageIngestionResponse stopMessageIngestion(StopMessageIngestionRequest request)')
    print('  SetDBOptionsResponse setDBOptions(SetDBOptionsRequest request)')
    print('  CompactDBResponse compactDB(CompactDBRequest request)')
    print('  SetDbMetaDataResponse setDBMetaDb(SetDbMetaDataRequest request)')
    print('  GetDbMetaDataResponse getDBMetaDb(GetDbMetaDataRequest request)')
    print('  CheckLoadsstRouterResponse checkLoadsstRouter(CheckLoadsstRouterRequest request)')
    print('  MigrateSSTToObjectResponse migrateSSTToObject(MigrateSSTToObjectRequest request)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Sharestore.Client(protocol)
transport.open()

if cmd == 'getValue':
    if len(args) != 1:
        print('getValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.getValue(eval(args[0]),))

elif cmd == 'ttl':
    if len(args) != 1:
        print('ttl requires 1 args')
        sys.exit(1)
    pp.pprint(client.ttl(eval(args[0]),))

elif cmd == 'setValue':
    if len(args) != 1:
        print('setValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.setValue(eval(args[0]),))

elif cmd == 'delValue':
    if len(args) != 1:
        print('delValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.delValue(eval(args[0]),))

elif cmd == 'multiGetValue':
    if len(args) != 1:
        print('multiGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiGetValue(eval(args[0]),))

elif cmd == 'multiSetValue':
    if len(args) != 1:
        print('multiSetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiSetValue(eval(args[0]),))

elif cmd == 'incrCounter':
    if len(args) != 1:
        print('incrCounter requires 1 args')
        sys.exit(1)
    pp.pprint(client.incrCounter(eval(args[0]),))

elif cmd == 'incrCounterTtl':
    if len(args) != 1:
        print('incrCounterTtl requires 1 args')
        sys.exit(1)
    pp.pprint(client.incrCounterTtl(eval(args[0]),))

elif cmd == 'multiIncrCounter':
    if len(args) != 1:
        print('multiIncrCounter requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiIncrCounter(eval(args[0]),))

elif cmd == 'multiIncrCounterTtl':
    if len(args) != 1:
        print('multiIncrCounterTtl requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiIncrCounterTtl(eval(args[0]),))

elif cmd == 'setCounter':
    if len(args) != 1:
        print('setCounter requires 1 args')
        sys.exit(1)
    pp.pprint(client.setCounter(eval(args[0]),))

elif cmd == 'setCounterTtl':
    if len(args) != 1:
        print('setCounterTtl requires 1 args')
        sys.exit(1)
    pp.pprint(client.setCounterTtl(eval(args[0]),))

elif cmd == 'multiSetCounter':
    if len(args) != 1:
        print('multiSetCounter requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiSetCounter(eval(args[0]),))

elif cmd == 'multiSetCounterTtl':
    if len(args) != 1:
        print('multiSetCounterTtl requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiSetCounterTtl(eval(args[0]),))

elif cmd == 'getCounter':
    if len(args) != 1:
        print('getCounter requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCounter(eval(args[0]),))

elif cmd == 'multiGetCounter':
    if len(args) != 1:
        print('multiGetCounter requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiGetCounter(eval(args[0]),))

elif cmd == 'dsSetValue':
    if len(args) != 1:
        print('dsSetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.dsSetValue(eval(args[0]),))

elif cmd == 'dsRemValue':
    if len(args) != 1:
        print('dsRemValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.dsRemValue(eval(args[0]),))

elif cmd == 'dsGetValue':
    if len(args) != 1:
        print('dsGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.dsGetValue(eval(args[0]),))

elif cmd == 'dsCountValue':
    if len(args) != 1:
        print('dsCountValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.dsCountValue(eval(args[0]),))

elif cmd == 'dsDelValue':
    if len(args) != 1:
        print('dsDelValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.dsDelValue(eval(args[0]),))

elif cmd == 'dsIsMember':
    if len(args) != 1:
        print('dsIsMember requires 1 args')
        sys.exit(1)
    pp.pprint(client.dsIsMember(eval(args[0]),))

elif cmd == 'hashSetValue':
    if len(args) != 1:
        print('hashSetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashSetValue(eval(args[0]),))

elif cmd == 'multiHashSetValue':
    if len(args) != 1:
        print('multiHashSetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiHashSetValue(eval(args[0]),))

elif cmd == 'hashRemValue':
    if len(args) != 1:
        print('hashRemValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashRemValue(eval(args[0]),))

elif cmd == 'multiHashRemValue':
    if len(args) != 1:
        print('multiHashRemValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiHashRemValue(eval(args[0]),))

elif cmd == 'hashGetValue':
    if len(args) != 1:
        print('hashGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashGetValue(eval(args[0]),))

elif cmd == 'multiHashGetValue':
    if len(args) != 1:
        print('multiHashGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.multiHashGetValue(eval(args[0]),))

elif cmd == 'hashIncrValue':
    if len(args) != 1:
        print('hashIncrValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashIncrValue(eval(args[0]),))

elif cmd == 'hashCountValue':
    if len(args) != 1:
        print('hashCountValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashCountValue(eval(args[0]),))

elif cmd == 'hashExSetValue':
    if len(args) != 1:
        print('hashExSetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashExSetValue(eval(args[0]),))

elif cmd == 'hashExRemValue':
    if len(args) != 1:
        print('hashExRemValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashExRemValue(eval(args[0]),))

elif cmd == 'hashExGetValue':
    if len(args) != 1:
        print('hashExGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashExGetValue(eval(args[0]),))

elif cmd == 'hashExIncrValue':
    if len(args) != 1:
        print('hashExIncrValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashExIncrValue(eval(args[0]),))

elif cmd == 'hashExCountValue':
    if len(args) != 1:
        print('hashExCountValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.hashExCountValue(eval(args[0]),))

elif cmd == 'zsetAddValue':
    if len(args) != 1:
        print('zsetAddValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.zsetAddValue(eval(args[0]),))

elif cmd == 'zsetRemValue':
    if len(args) != 1:
        print('zsetRemValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.zsetRemValue(eval(args[0]),))

elif cmd == 'zsetGetValue':
    if len(args) != 1:
        print('zsetGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.zsetGetValue(eval(args[0]),))

elif cmd == 'zsetGetRangeValue':
    if len(args) != 1:
        print('zsetGetRangeValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.zsetGetRangeValue(eval(args[0]),))

elif cmd == 'zsetRemRangeValue':
    if len(args) != 1:
        print('zsetRemRangeValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.zsetRemRangeValue(eval(args[0]),))

elif cmd == 'zsetCountValue':
    if len(args) != 1:
        print('zsetCountValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.zsetCountValue(eval(args[0]),))

elif cmd == 'zsetScanValue':
    if len(args) != 1:
        print('zsetScanValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.zsetScanValue(eval(args[0]),))

elif cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'addDB':
    if len(args) != 1:
        print('addDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.addDB(eval(args[0]),))

elif cmd == 'backupDB':
    if len(args) != 1:
        print('backupDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.backupDB(eval(args[0]),))

elif cmd == 'restoreDB':
    if len(args) != 1:
        print('restoreDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.restoreDB(eval(args[0]),))

elif cmd == 'backupDBToObject':
    if len(args) != 1:
        print('backupDBToObject requires 1 args')
        sys.exit(1)
    pp.pprint(client.backupDBToObject(eval(args[0]),))

elif cmd == 'restoreDBFromObject':
    if len(args) != 1:
        print('restoreDBFromObject requires 1 args')
        sys.exit(1)
    pp.pprint(client.restoreDBFromObject(eval(args[0]),))

elif cmd == 'checkDB':
    if len(args) != 1:
        print('checkDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkDB(eval(args[0]),))

elif cmd == 'closeDB':
    if len(args) != 1:
        print('closeDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.closeDB(eval(args[0]),))

elif cmd == 'changeDBRoleAndUpStream':
    if len(args) != 1:
        print('changeDBRoleAndUpStream requires 1 args')
        sys.exit(1)
    pp.pprint(client.changeDBRoleAndUpStream(eval(args[0]),))

elif cmd == 'getSequenceNumber':
    if len(args) != 1:
        print('getSequenceNumber requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSequenceNumber(eval(args[0]),))

elif cmd == 'clearDB':
    if len(args) != 1:
        print('clearDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearDB(eval(args[0]),))

elif cmd == 'addS3SstFilesToDB':
    if len(args) != 1:
        print('addS3SstFilesToDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.addS3SstFilesToDB(eval(args[0]),))

elif cmd == 'downLoadS3SstFiles':
    if len(args) != 1:
        print('downLoadS3SstFiles requires 1 args')
        sys.exit(1)
    pp.pprint(client.downLoadS3SstFiles(eval(args[0]),))

elif cmd == 'ingestSstsToDB':
    if len(args) != 1:
        print('ingestSstsToDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.ingestSstsToDB(eval(args[0]),))

elif cmd == 'startMessageIngestion':
    if len(args) != 1:
        print('startMessageIngestion requires 1 args')
        sys.exit(1)
    pp.pprint(client.startMessageIngestion(eval(args[0]),))

elif cmd == 'stopMessageIngestion':
    if len(args) != 1:
        print('stopMessageIngestion requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopMessageIngestion(eval(args[0]),))

elif cmd == 'setDBOptions':
    if len(args) != 1:
        print('setDBOptions requires 1 args')
        sys.exit(1)
    pp.pprint(client.setDBOptions(eval(args[0]),))

elif cmd == 'compactDB':
    if len(args) != 1:
        print('compactDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.compactDB(eval(args[0]),))

elif cmd == 'setDBMetaDb':
    if len(args) != 1:
        print('setDBMetaDb requires 1 args')
        sys.exit(1)
    pp.pprint(client.setDBMetaDb(eval(args[0]),))

elif cmd == 'getDBMetaDb':
    if len(args) != 1:
        print('getDBMetaDb requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDBMetaDb(eval(args[0]),))

elif cmd == 'checkLoadsstRouter':
    if len(args) != 1:
        print('checkLoadsstRouter requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkLoadsstRouter(eval(args[0]),))

elif cmd == 'migrateSSTToObject':
    if len(args) != 1:
        print('migrateSSTToObject requires 1 args')
        sys.exit(1)
    pp.pprint(client.migrateSSTToObject(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
