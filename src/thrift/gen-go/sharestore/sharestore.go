// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package sharestore

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type ErrorCode int64
const (
  ErrorCode_OTHER ErrorCode = 0
  ErrorCode_DB_NOT_FOUND ErrorCode = 1
  ErrorCode_ROCKSDB_ERROR ErrorCode = 2
  ErrorCode_SEGMENT_NOT_FOUND ErrorCode = 3
  ErrorCode_KEY_NOT_FOUND ErrorCode = 4
  ErrorCode_ROUTING_ERROR ErrorCode = 5
  ErrorCode_WRITE_TO_SLAVE ErrorCode = 6
  ErrorCode_NUM_OVERFLOW ErrorCode = 7
  ErrorCode_REQUEST_INVALID ErrorCode = 8
  ErrorCode_THROTTLED ErrorCode = 9
  ErrorCode_VERSION_EXPIRE ErrorCode = 10
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_OTHER: return "OTHER"
  case ErrorCode_DB_NOT_FOUND: return "DB_NOT_FOUND"
  case ErrorCode_ROCKSDB_ERROR: return "ROCKSDB_ERROR"
  case ErrorCode_SEGMENT_NOT_FOUND: return "SEGMENT_NOT_FOUND"
  case ErrorCode_KEY_NOT_FOUND: return "KEY_NOT_FOUND"
  case ErrorCode_ROUTING_ERROR: return "ROUTING_ERROR"
  case ErrorCode_WRITE_TO_SLAVE: return "WRITE_TO_SLAVE"
  case ErrorCode_NUM_OVERFLOW: return "NUM_OVERFLOW"
  case ErrorCode_REQUEST_INVALID: return "REQUEST_INVALID"
  case ErrorCode_THROTTLED: return "THROTTLED"
  case ErrorCode_VERSION_EXPIRE: return "VERSION_EXPIRE"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "OTHER": return ErrorCode_OTHER, nil 
  case "DB_NOT_FOUND": return ErrorCode_DB_NOT_FOUND, nil 
  case "ROCKSDB_ERROR": return ErrorCode_ROCKSDB_ERROR, nil 
  case "SEGMENT_NOT_FOUND": return ErrorCode_SEGMENT_NOT_FOUND, nil 
  case "KEY_NOT_FOUND": return ErrorCode_KEY_NOT_FOUND, nil 
  case "ROUTING_ERROR": return ErrorCode_ROUTING_ERROR, nil 
  case "WRITE_TO_SLAVE": return ErrorCode_WRITE_TO_SLAVE, nil 
  case "NUM_OVERFLOW": return ErrorCode_NUM_OVERFLOW, nil 
  case "REQUEST_INVALID": return ErrorCode_REQUEST_INVALID, nil 
  case "THROTTLED": return ErrorCode_THROTTLED, nil 
  case "VERSION_EXPIRE": return ErrorCode_VERSION_EXPIRE, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type StoreType int64
const (
  StoreType_KV StoreType = 0
  StoreType_COUNTER StoreType = 1
  StoreType_DEDUP_SET StoreType = 2
  StoreType_SET StoreType = 3
  StoreType_HASH StoreType = 4
  StoreType_ZSET StoreType = 5
  StoreType_ZSET_IDX StoreType = 6
  StoreType_HASHEX StoreType = 7
  StoreType_OTHER StoreType = 8
)

func (p StoreType) String() string {
  switch p {
  case StoreType_KV: return "KV"
  case StoreType_COUNTER: return "COUNTER"
  case StoreType_DEDUP_SET: return "DEDUP_SET"
  case StoreType_SET: return "SET"
  case StoreType_HASH: return "HASH"
  case StoreType_ZSET: return "ZSET"
  case StoreType_ZSET_IDX: return "ZSET_IDX"
  case StoreType_HASHEX: return "HASHEX"
  case StoreType_OTHER: return "OTHER"
  }
  return "<UNSET>"
}

func StoreTypeFromString(s string) (StoreType, error) {
  switch s {
  case "KV": return StoreType_KV, nil 
  case "COUNTER": return StoreType_COUNTER, nil 
  case "DEDUP_SET": return StoreType_DEDUP_SET, nil 
  case "SET": return StoreType_SET, nil 
  case "HASH": return StoreType_HASH, nil 
  case "ZSET": return StoreType_ZSET, nil 
  case "ZSET_IDX": return StoreType_ZSET_IDX, nil 
  case "HASHEX": return StoreType_HASHEX, nil 
  case "OTHER": return StoreType_OTHER, nil 
  }
  return StoreType(0), fmt.Errorf("not a valid StoreType string")
}


func StoreTypePtr(v StoreType) *StoreType { return &v }

func (p StoreType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StoreType) UnmarshalText(text []byte) error {
q, err := StoreTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StoreType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StoreType(v)
return nil
}

func (p * StoreType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type HashType int64
const (
  HashType_STR HashType = 0
  HashType_INT HashType = 1
  HashType_BUF HashType = 2
)

func (p HashType) String() string {
  switch p {
  case HashType_STR: return "STR"
  case HashType_INT: return "INT"
  case HashType_BUF: return "BUF"
  }
  return "<UNSET>"
}

func HashTypeFromString(s string) (HashType, error) {
  switch s {
  case "STR": return HashType_STR, nil 
  case "INT": return HashType_INT, nil 
  case "BUF": return HashType_BUF, nil 
  }
  return HashType(0), fmt.Errorf("not a valid HashType string")
}


func HashTypePtr(v HashType) *HashType { return &v }

func (p HashType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *HashType) UnmarshalText(text []byte) error {
q, err := HashTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *HashType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = HashType(v)
return nil
}

func (p * HashType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type IOBufPtr []byte

func IOBufPtrPtr(v IOBufPtr) *IOBufPtr { return &v }

// Attributes:
//  - Message
//  - Code
type SharestoreException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
  Code ErrorCode `thrift:"code,2,required" db:"code" json:"code"`
}

func NewSharestoreException() *SharestoreException {
  return &SharestoreException{}
}


func (p *SharestoreException) GetMessage() string {
  return p.Message
}

func (p *SharestoreException) GetCode() ErrorCode {
  return p.Code
}
func (p *SharestoreException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;
  var issetCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  return nil
}

func (p *SharestoreException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *SharestoreException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *SharestoreException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SharestoreException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *SharestoreException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *SharestoreException) Equals(other *SharestoreException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  if p.Code != other.Code { return false }
  return true
}

func (p *SharestoreException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreException(%+v)", *p)
}

func (p *SharestoreException) Error() string {
  return p.String()
}

func (SharestoreException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*SharestoreException)(nil)

// Attributes:
//  - Segment
//  - Key
//  - NeedRouting
type GetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  NeedRouting bool `thrift:"need_routing,3" db:"need_routing" json:"need_routing"`
}

func NewGetRequest() *GetRequest {
  return &GetRequest{
Segment: "default",

NeedRouting: true,
}
}

var GetRequest_Segment_DEFAULT string = "default"

func (p *GetRequest) GetSegment() string {
  return p.Segment
}

func (p *GetRequest) GetKey() string {
  return p.Key
}
var GetRequest_NeedRouting_DEFAULT bool = true

func (p *GetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *GetRequest) IsSetSegment() bool {
  return p.Segment != GetRequest_Segment_DEFAULT
}

func (p *GetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != GetRequest_NeedRouting_DEFAULT
}

func (p *GetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *GetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *GetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *GetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *GetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *GetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *GetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:need_routing: ", p), err) }
  }
  return err
}

func (p *GetRequest) Equals(other *GetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *GetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRequest(%+v)", *p)
}

// Attributes:
//  - Value
//  - Error
type GetResponse struct {
  Value IOBufPtr `thrift:"value,1,required" db:"value" json:"value"`
  Error *SharestoreException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewGetResponse() *GetResponse {
  return &GetResponse{}
}


func (p *GetResponse) GetValue() IOBufPtr {
  return p.Value
}
var GetResponse_Error_DEFAULT *SharestoreException
func (p *GetResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return GetResponse_Error_DEFAULT
  }
return p.Error
}
func (p *GetResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *GetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *GetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := IOBufPtr(v)
  p.Value = temp
}
  return nil
}

func (p *GetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *GetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *GetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *GetResponse) Equals(other *GetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Value, other.Value) != 0 { return false }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *GetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Index
//  - NeedRouting
type MultiGetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Index []int32 `thrift:"index,3" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
}

func NewMultiGetRequest() *MultiGetRequest {
  return &MultiGetRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiGetRequest_Segment_DEFAULT string = "default"

func (p *MultiGetRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiGetRequest) GetKeys() []string {
  return p.Keys
}
var MultiGetRequest_Index_DEFAULT []int32

func (p *MultiGetRequest) GetIndex() []int32 {
  return p.Index
}
var MultiGetRequest_NeedRouting_DEFAULT bool = true

func (p *MultiGetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiGetRequest) IsSetSegment() bool {
  return p.Segment != MultiGetRequest_Segment_DEFAULT
}

func (p *MultiGetRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiGetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiGetRequest_NeedRouting_DEFAULT
}

func (p *MultiGetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  return nil
}

func (p *MultiGetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiGetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Keys = append(p.Keys, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Index = append(p.Index, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiGetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiGetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiGetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index: ", p), err) }
  }
  return err
}

func (p *MultiGetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiGetRequest) Equals(other *MultiGetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src2 := other.Keys[i]
    if _tgt != _src2 { return false }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src3 := other.Index[i]
    if _tgt != _src3 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetRequest(%+v)", *p)
}

// Attributes:
//  - Responses
//  - SubRequestIndices
type MultiGetResponse struct {
  Responses []*GetResponse `thrift:"responses,1,required" db:"responses" json:"responses"`
  SubRequestIndices []int32 `thrift:"sub_request_indices,2" db:"sub_request_indices" json:"sub_request_indices,omitempty"`
}

func NewMultiGetResponse() *MultiGetResponse {
  return &MultiGetResponse{}
}


func (p *MultiGetResponse) GetResponses() []*GetResponse {
  return p.Responses
}
var MultiGetResponse_SubRequestIndices_DEFAULT []int32

func (p *MultiGetResponse) GetSubRequestIndices() []int32 {
  return p.SubRequestIndices
}
func (p *MultiGetResponse) IsSetSubRequestIndices() bool {
  return p.SubRequestIndices != nil
}

func (p *MultiGetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResponses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Responses is not set"));
  }
  return nil
}

func (p *MultiGetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*GetResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &GetResponse{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Responses = append(p.Responses, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SubRequestIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.SubRequestIndices = append(p.SubRequestIndices, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiGetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *MultiGetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSubRequestIndices() {
    if err := oprot.WriteFieldBegin(ctx, "sub_request_indices", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_request_indices: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SubRequestIndices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SubRequestIndices {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_request_indices: ", p), err) }
  }
  return err
}

func (p *MultiGetResponse) Equals(other *MultiGetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Responses) != len(other.Responses) { return false }
  for i, _tgt := range p.Responses {
    _src6 := other.Responses[i]
    if !_tgt.Equals(_src6) { return false }
  }
  if len(p.SubRequestIndices) != len(other.SubRequestIndices) { return false }
  for i, _tgt := range p.SubRequestIndices {
    _src7 := other.SubRequestIndices[i]
    if _tgt != _src7 { return false }
  }
  return true
}

func (p *MultiGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - NeedRouting
type TtlRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  NeedRouting bool `thrift:"need_routing,3" db:"need_routing" json:"need_routing"`
}

func NewTtlRequest() *TtlRequest {
  return &TtlRequest{
Segment: "default",

NeedRouting: true,
}
}

var TtlRequest_Segment_DEFAULT string = "default"

func (p *TtlRequest) GetSegment() string {
  return p.Segment
}

func (p *TtlRequest) GetKey() string {
  return p.Key
}
var TtlRequest_NeedRouting_DEFAULT bool = true

func (p *TtlRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *TtlRequest) IsSetSegment() bool {
  return p.Segment != TtlRequest_Segment_DEFAULT
}

func (p *TtlRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != TtlRequest_NeedRouting_DEFAULT
}

func (p *TtlRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *TtlRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *TtlRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TtlRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *TtlRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TtlRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TtlRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *TtlRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *TtlRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:need_routing: ", p), err) }
  }
  return err
}

func (p *TtlRequest) Equals(other *TtlRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *TtlRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TtlRequest(%+v)", *p)
}

// Attributes:
//  - TTLSec
//  - Error
type TtlResponse struct {
  TTLSec int32 `thrift:"ttl_sec,1,required" db:"ttl_sec" json:"ttl_sec"`
  Error *SharestoreException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewTtlResponse() *TtlResponse {
  return &TtlResponse{}
}


func (p *TtlResponse) GetTTLSec() int32 {
  return p.TTLSec
}
var TtlResponse_Error_DEFAULT *SharestoreException
func (p *TtlResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return TtlResponse_Error_DEFAULT
  }
return p.Error
}
func (p *TtlResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *TtlResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTTLSec bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTTLSec = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTTLSec{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTLSec is not set"));
  }
  return nil
}

func (p *TtlResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TTLSec = v
}
  return nil
}

func (p *TtlResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *TtlResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TtlResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TtlResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ttl_sec", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ttl_sec: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TTLSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttl_sec (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ttl_sec: ", p), err) }
  return err
}

func (p *TtlResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *TtlResponse) Equals(other *TtlResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TTLSec != other.TTLSec { return false }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *TtlResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TtlResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Value
//  - TTLSec
//  - NeedRouting
type SetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Value IOBufPtr `thrift:"value,3,required" db:"value" json:"value"`
  TTLSec int32 `thrift:"ttl_sec,4" db:"ttl_sec" json:"ttl_sec"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
}

func NewSetRequest() *SetRequest {
  return &SetRequest{
Segment: "default",

NeedRouting: true,
}
}

var SetRequest_Segment_DEFAULT string = "default"

func (p *SetRequest) GetSegment() string {
  return p.Segment
}

func (p *SetRequest) GetKey() string {
  return p.Key
}

func (p *SetRequest) GetValue() IOBufPtr {
  return p.Value
}
var SetRequest_TTLSec_DEFAULT int32 = 0

func (p *SetRequest) GetTTLSec() int32 {
  return p.TTLSec
}
var SetRequest_NeedRouting_DEFAULT bool = true

func (p *SetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *SetRequest) IsSetSegment() bool {
  return p.Segment != SetRequest_Segment_DEFAULT
}

func (p *SetRequest) IsSetTTLSec() bool {
  return p.TTLSec != SetRequest_TTLSec_DEFAULT
}

func (p *SetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != SetRequest_NeedRouting_DEFAULT
}

func (p *SetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *SetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *SetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *SetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := IOBufPtr(v)
  p.Value = temp
}
  return nil
}

func (p *SetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TTLSec = v
}
  return nil
}

func (p *SetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *SetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *SetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *SetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *SetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTTLSec() {
    if err := oprot.WriteFieldBegin(ctx, "ttl_sec", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttl_sec: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.TTLSec)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_sec (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttl_sec: ", p), err) }
  }
  return err
}

func (p *SetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *SetRequest) Equals(other *SetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if bytes.Compare(p.Value, other.Value) != 0 { return false }
  if p.TTLSec != other.TTLSec { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *SetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetRequest(%+v)", *p)
}

// Attributes:
//  - Error
type SetResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewSetResponse() *SetResponse {
  return &SetResponse{}
}

var SetResponse_Error_DEFAULT *SharestoreException
func (p *SetResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return SetResponse_Error_DEFAULT
  }
return p.Error
}
func (p *SetResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *SetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *SetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *SetResponse) Equals(other *SetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *SetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Values
//  - TTLSecs
//  - Index
//  - NeedRouting
type MultiSetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Values []IOBufPtr `thrift:"values,3,required" db:"values" json:"values"`
  TTLSecs []int32 `thrift:"ttl_secs,4" db:"ttl_secs" json:"ttl_secs,omitempty"`
  Index []int32 `thrift:"index,5" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,6" db:"need_routing" json:"need_routing"`
}

func NewMultiSetRequest() *MultiSetRequest {
  return &MultiSetRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiSetRequest_Segment_DEFAULT string = "default"

func (p *MultiSetRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiSetRequest) GetKeys() []string {
  return p.Keys
}

func (p *MultiSetRequest) GetValues() []IOBufPtr {
  return p.Values
}
var MultiSetRequest_TTLSecs_DEFAULT []int32

func (p *MultiSetRequest) GetTTLSecs() []int32 {
  return p.TTLSecs
}
var MultiSetRequest_Index_DEFAULT []int32

func (p *MultiSetRequest) GetIndex() []int32 {
  return p.Index
}
var MultiSetRequest_NeedRouting_DEFAULT bool = true

func (p *MultiSetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiSetRequest) IsSetSegment() bool {
  return p.Segment != MultiSetRequest_Segment_DEFAULT
}

func (p *MultiSetRequest) IsSetTTLSecs() bool {
  return p.TTLSecs != nil
}

func (p *MultiSetRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiSetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiSetRequest_NeedRouting_DEFAULT
}

func (p *MultiSetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;
  var issetValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  return nil
}

func (p *MultiSetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiSetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.Keys = append(p.Keys, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]IOBufPtr, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 IOBufPtr
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := IOBufPtr(v)
    _elem9 = temp
}
    p.Values = append(p.Values, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TTLSecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.TTLSecs = append(p.TTLSecs, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.Index = append(p.Index, _elem11)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiSetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiSetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiSetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiSetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiSetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *MultiSetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTTLSecs() {
    if err := oprot.WriteFieldBegin(ctx, "ttl_secs", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttl_secs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TTLSecs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TTLSecs {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttl_secs: ", p), err) }
  }
  return err
}

func (p *MultiSetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:index: ", p), err) }
  }
  return err
}

func (p *MultiSetRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiSetRequest) Equals(other *MultiSetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src12 := other.Keys[i]
    if _tgt != _src12 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src13 := other.Values[i]
    if bytes.Compare(_tgt, _src13) != 0 { return false }
  }
  if len(p.TTLSecs) != len(other.TTLSecs) { return false }
  for i, _tgt := range p.TTLSecs {
    _src14 := other.TTLSecs[i]
    if _tgt != _src14 { return false }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src15 := other.Index[i]
    if _tgt != _src15 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiSetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiSetRequest(%+v)", *p)
}

// Attributes:
//  - Responses
//  - SubRequestIndices
type MultiSetResponse struct {
  Responses []*SetResponse `thrift:"responses,1,required" db:"responses" json:"responses"`
  SubRequestIndices []int32 `thrift:"sub_request_indices,2" db:"sub_request_indices" json:"sub_request_indices,omitempty"`
}

func NewMultiSetResponse() *MultiSetResponse {
  return &MultiSetResponse{}
}


func (p *MultiSetResponse) GetResponses() []*SetResponse {
  return p.Responses
}
var MultiSetResponse_SubRequestIndices_DEFAULT []int32

func (p *MultiSetResponse) GetSubRequestIndices() []int32 {
  return p.SubRequestIndices
}
func (p *MultiSetResponse) IsSetSubRequestIndices() bool {
  return p.SubRequestIndices != nil
}

func (p *MultiSetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResponses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Responses is not set"));
  }
  return nil
}

func (p *MultiSetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SetResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &SetResponse{}
    if err := _elem16.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.Responses = append(p.Responses, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SubRequestIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.SubRequestIndices = append(p.SubRequestIndices, _elem17)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiSetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiSetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *MultiSetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSubRequestIndices() {
    if err := oprot.WriteFieldBegin(ctx, "sub_request_indices", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_request_indices: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SubRequestIndices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SubRequestIndices {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_request_indices: ", p), err) }
  }
  return err
}

func (p *MultiSetResponse) Equals(other *MultiSetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Responses) != len(other.Responses) { return false }
  for i, _tgt := range p.Responses {
    _src18 := other.Responses[i]
    if !_tgt.Equals(_src18) { return false }
  }
  if len(p.SubRequestIndices) != len(other.SubRequestIndices) { return false }
  for i, _tgt := range p.SubRequestIndices {
    _src19 := other.SubRequestIndices[i]
    if _tgt != _src19 { return false }
  }
  return true
}

func (p *MultiSetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiSetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - NeedRouting
type DelRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  NeedRouting bool `thrift:"need_routing,3" db:"need_routing" json:"need_routing"`
}

func NewDelRequest() *DelRequest {
  return &DelRequest{
Segment: "default",

NeedRouting: true,
}
}

var DelRequest_Segment_DEFAULT string = "default"

func (p *DelRequest) GetSegment() string {
  return p.Segment
}

func (p *DelRequest) GetKey() string {
  return p.Key
}
var DelRequest_NeedRouting_DEFAULT bool = true

func (p *DelRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *DelRequest) IsSetSegment() bool {
  return p.Segment != DelRequest_Segment_DEFAULT
}

func (p *DelRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != DelRequest_NeedRouting_DEFAULT
}

func (p *DelRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *DelRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *DelRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *DelRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *DelRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DelRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *DelRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *DelRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:need_routing: ", p), err) }
  }
  return err
}

func (p *DelRequest) Equals(other *DelRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *DelRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelRequest(%+v)", *p)
}

// Attributes:
//  - Error
type DelResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewDelResponse() *DelResponse {
  return &DelResponse{}
}

var DelResponse_Error_DEFAULT *SharestoreException
func (p *DelResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return DelResponse_Error_DEFAULT
  }
return p.Error
}
func (p *DelResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *DelResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *DelResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DelResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *DelResponse) Equals(other *DelResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *DelResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Members
//  - TTLSecs
//  - NeedRouting
type DSSetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Members []string `thrift:"members,3,required" db:"members" json:"members"`
  TTLSecs []int32 `thrift:"ttl_secs,4,required" db:"ttl_secs" json:"ttl_secs"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
}

func NewDSSetRequest() *DSSetRequest {
  return &DSSetRequest{
Segment: "default",

NeedRouting: true,
}
}

var DSSetRequest_Segment_DEFAULT string = "default"

func (p *DSSetRequest) GetSegment() string {
  return p.Segment
}

func (p *DSSetRequest) GetKey() string {
  return p.Key
}

func (p *DSSetRequest) GetMembers() []string {
  return p.Members
}

func (p *DSSetRequest) GetTTLSecs() []int32 {
  return p.TTLSecs
}
var DSSetRequest_NeedRouting_DEFAULT bool = true

func (p *DSSetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *DSSetRequest) IsSetSegment() bool {
  return p.Segment != DSSetRequest_Segment_DEFAULT
}

func (p *DSSetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != DSSetRequest_NeedRouting_DEFAULT
}

func (p *DSSetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetMembers bool = false;
  var issetTTLSecs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTTLSecs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  if !issetTTLSecs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTLSecs is not set"));
  }
  return nil
}

func (p *DSSetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *DSSetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *DSSetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.Members = append(p.Members, _elem20)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DSSetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TTLSecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem21 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem21 = v
}
    p.TTLSecs = append(p.TTLSecs, _elem21)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DSSetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *DSSetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSSetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSSetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *DSSetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *DSSetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:members: ", p), err) }
  return err
}

func (p *DSSetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ttl_secs", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttl_secs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TTLSecs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TTLSecs {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttl_secs: ", p), err) }
  return err
}

func (p *DSSetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *DSSetRequest) Equals(other *DSSetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src22 := other.Members[i]
    if _tgt != _src22 { return false }
  }
  if len(p.TTLSecs) != len(other.TTLSecs) { return false }
  for i, _tgt := range p.TTLSecs {
    _src23 := other.TTLSecs[i]
    if _tgt != _src23 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *DSSetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSSetRequest(%+v)", *p)
}

// Attributes:
//  - Error
type DSSetResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewDSSetResponse() *DSSetResponse {
  return &DSSetResponse{}
}

var DSSetResponse_Error_DEFAULT *SharestoreException
func (p *DSSetResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return DSSetResponse_Error_DEFAULT
  }
return p.Error
}
func (p *DSSetResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *DSSetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DSSetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *DSSetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSSetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSSetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *DSSetResponse) Equals(other *DSSetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *DSSetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSSetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Members
//  - NeedRouting
type DSRemRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Members []string `thrift:"members,3,required" db:"members" json:"members"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
}

func NewDSRemRequest() *DSRemRequest {
  return &DSRemRequest{
Segment: "default",

NeedRouting: true,
}
}

var DSRemRequest_Segment_DEFAULT string = "default"

func (p *DSRemRequest) GetSegment() string {
  return p.Segment
}

func (p *DSRemRequest) GetKey() string {
  return p.Key
}

func (p *DSRemRequest) GetMembers() []string {
  return p.Members
}
var DSRemRequest_NeedRouting_DEFAULT bool = true

func (p *DSRemRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *DSRemRequest) IsSetSegment() bool {
  return p.Segment != DSRemRequest_Segment_DEFAULT
}

func (p *DSRemRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != DSRemRequest_NeedRouting_DEFAULT
}

func (p *DSRemRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetMembers bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  return nil
}

func (p *DSRemRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *DSRemRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *DSRemRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem24 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem24 = v
}
    p.Members = append(p.Members, _elem24)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DSRemRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *DSRemRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSRemRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSRemRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *DSRemRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *DSRemRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:members: ", p), err) }
  return err
}

func (p *DSRemRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *DSRemRequest) Equals(other *DSRemRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src25 := other.Members[i]
    if _tgt != _src25 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *DSRemRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSRemRequest(%+v)", *p)
}

// Attributes:
//  - Error
type DSRemResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewDSRemResponse() *DSRemResponse {
  return &DSRemResponse{}
}

var DSRemResponse_Error_DEFAULT *SharestoreException
func (p *DSRemResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return DSRemResponse_Error_DEFAULT
  }
return p.Error
}
func (p *DSRemResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *DSRemResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DSRemResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *DSRemResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSRemResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSRemResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *DSRemResponse) Equals(other *DSRemResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *DSRemResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSRemResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - WithTtls
//  - NeedRouting
//  - MaxNums
type DSGetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  WithTtls bool `thrift:"with_ttls,3" db:"with_ttls" json:"with_ttls"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
  MaxNums int32 `thrift:"max_nums,5" db:"max_nums" json:"max_nums"`
}

func NewDSGetRequest() *DSGetRequest {
  return &DSGetRequest{
Segment: "default",

NeedRouting: true,

MaxNums: 5000,
}
}

var DSGetRequest_Segment_DEFAULT string = "default"

func (p *DSGetRequest) GetSegment() string {
  return p.Segment
}

func (p *DSGetRequest) GetKey() string {
  return p.Key
}
var DSGetRequest_WithTtls_DEFAULT bool = false

func (p *DSGetRequest) GetWithTtls() bool {
  return p.WithTtls
}
var DSGetRequest_NeedRouting_DEFAULT bool = true

func (p *DSGetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
var DSGetRequest_MaxNums_DEFAULT int32 = 5000

func (p *DSGetRequest) GetMaxNums() int32 {
  return p.MaxNums
}
func (p *DSGetRequest) IsSetSegment() bool {
  return p.Segment != DSGetRequest_Segment_DEFAULT
}

func (p *DSGetRequest) IsSetWithTtls() bool {
  return p.WithTtls != DSGetRequest_WithTtls_DEFAULT
}

func (p *DSGetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != DSGetRequest_NeedRouting_DEFAULT
}

func (p *DSGetRequest) IsSetMaxNums() bool {
  return p.MaxNums != DSGetRequest_MaxNums_DEFAULT
}

func (p *DSGetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *DSGetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *DSGetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *DSGetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WithTtls = v
}
  return nil
}

func (p *DSGetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *DSGetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *DSGetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSGetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSGetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *DSGetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *DSGetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetWithTtls() {
    if err := oprot.WriteFieldBegin(ctx, "with_ttls", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:with_ttls: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.WithTtls)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.with_ttls (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:with_ttls: ", p), err) }
  }
  return err
}

func (p *DSGetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *DSGetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_nums: ", p), err) }
  }
  return err
}

func (p *DSGetRequest) Equals(other *DSGetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.WithTtls != other.WithTtls { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  if p.MaxNums != other.MaxNums { return false }
  return true
}

func (p *DSGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSGetRequest(%+v)", *p)
}

// Attributes:
//  - Members
//  - TTLSecs
//  - Error
type DSGetResponse struct {
  Members []string `thrift:"members,1,required" db:"members" json:"members"`
  TTLSecs []int32 `thrift:"ttl_secs,2" db:"ttl_secs" json:"ttl_secs,omitempty"`
  Error *SharestoreException `thrift:"error,3" db:"error" json:"error,omitempty"`
}

func NewDSGetResponse() *DSGetResponse {
  return &DSGetResponse{}
}


func (p *DSGetResponse) GetMembers() []string {
  return p.Members
}
var DSGetResponse_TTLSecs_DEFAULT []int32

func (p *DSGetResponse) GetTTLSecs() []int32 {
  return p.TTLSecs
}
var DSGetResponse_Error_DEFAULT *SharestoreException
func (p *DSGetResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return DSGetResponse_Error_DEFAULT
  }
return p.Error
}
func (p *DSGetResponse) IsSetTTLSecs() bool {
  return p.TTLSecs != nil
}

func (p *DSGetResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *DSGetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMembers bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  return nil
}

func (p *DSGetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem26 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem26 = v
}
    p.Members = append(p.Members, _elem26)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DSGetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TTLSecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem27 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem27 = v
}
    p.TTLSecs = append(p.TTLSecs, _elem27)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DSGetResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *DSGetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSGetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSGetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:members: ", p), err) }
  return err
}

func (p *DSGetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTTLSecs() {
    if err := oprot.WriteFieldBegin(ctx, "ttl_secs", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_secs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TTLSecs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TTLSecs {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_secs: ", p), err) }
  }
  return err
}

func (p *DSGetResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error: ", p), err) }
  }
  return err
}

func (p *DSGetResponse) Equals(other *DSGetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src28 := other.Members[i]
    if _tgt != _src28 { return false }
  }
  if len(p.TTLSecs) != len(other.TTLSecs) { return false }
  for i, _tgt := range p.TTLSecs {
    _src29 := other.TTLSecs[i]
    if _tgt != _src29 { return false }
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *DSGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSGetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - NeedRouting
//  - MaxNums
type DSCountRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  NeedRouting bool `thrift:"need_routing,3" db:"need_routing" json:"need_routing"`
  MaxNums int32 `thrift:"max_nums,4" db:"max_nums" json:"max_nums"`
}

func NewDSCountRequest() *DSCountRequest {
  return &DSCountRequest{
Segment: "default",

NeedRouting: true,

MaxNums: 5000,
}
}

var DSCountRequest_Segment_DEFAULT string = "default"

func (p *DSCountRequest) GetSegment() string {
  return p.Segment
}

func (p *DSCountRequest) GetKey() string {
  return p.Key
}
var DSCountRequest_NeedRouting_DEFAULT bool = true

func (p *DSCountRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
var DSCountRequest_MaxNums_DEFAULT int32 = 5000

func (p *DSCountRequest) GetMaxNums() int32 {
  return p.MaxNums
}
func (p *DSCountRequest) IsSetSegment() bool {
  return p.Segment != DSCountRequest_Segment_DEFAULT
}

func (p *DSCountRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != DSCountRequest_NeedRouting_DEFAULT
}

func (p *DSCountRequest) IsSetMaxNums() bool {
  return p.MaxNums != DSCountRequest_MaxNums_DEFAULT
}

func (p *DSCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *DSCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *DSCountRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *DSCountRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *DSCountRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *DSCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSCountRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *DSCountRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *DSCountRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:need_routing: ", p), err) }
  }
  return err
}

func (p *DSCountRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_nums: ", p), err) }
  }
  return err
}

func (p *DSCountRequest) Equals(other *DSCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  if p.MaxNums != other.MaxNums { return false }
  return true
}

func (p *DSCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSCountRequest(%+v)", *p)
}

// Attributes:
//  - Count
//  - Error
type DSCountResponse struct {
  Count int32 `thrift:"count,1,required" db:"count" json:"count"`
  Error *SharestoreException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewDSCountResponse() *DSCountResponse {
  return &DSCountResponse{}
}


func (p *DSCountResponse) GetCount() int32 {
  return p.Count
}
var DSCountResponse_Error_DEFAULT *SharestoreException
func (p *DSCountResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return DSCountResponse_Error_DEFAULT
  }
return p.Error
}
func (p *DSCountResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *DSCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCount = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Count is not set"));
  }
  return nil
}

func (p *DSCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *DSCountResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *DSCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSCountResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err) }
  return err
}

func (p *DSCountResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *DSCountResponse) Equals(other *DSCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Count != other.Count { return false }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *DSCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSCountResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - NeedRouting
type DSDelRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  NeedRouting bool `thrift:"need_routing,3" db:"need_routing" json:"need_routing"`
}

func NewDSDelRequest() *DSDelRequest {
  return &DSDelRequest{
Segment: "default",

NeedRouting: true,
}
}

var DSDelRequest_Segment_DEFAULT string = "default"

func (p *DSDelRequest) GetSegment() string {
  return p.Segment
}

func (p *DSDelRequest) GetKey() string {
  return p.Key
}
var DSDelRequest_NeedRouting_DEFAULT bool = true

func (p *DSDelRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *DSDelRequest) IsSetSegment() bool {
  return p.Segment != DSDelRequest_Segment_DEFAULT
}

func (p *DSDelRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != DSDelRequest_NeedRouting_DEFAULT
}

func (p *DSDelRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *DSDelRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *DSDelRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *DSDelRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *DSDelRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSDelRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSDelRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *DSDelRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *DSDelRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:need_routing: ", p), err) }
  }
  return err
}

func (p *DSDelRequest) Equals(other *DSDelRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *DSDelRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSDelRequest(%+v)", *p)
}

// Attributes:
//  - Error
type DSDelResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewDSDelResponse() *DSDelResponse {
  return &DSDelResponse{}
}

var DSDelResponse_Error_DEFAULT *SharestoreException
func (p *DSDelResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return DSDelResponse_Error_DEFAULT
  }
return p.Error
}
func (p *DSDelResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *DSDelResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DSDelResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *DSDelResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSDelResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSDelResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *DSDelResponse) Equals(other *DSDelResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *DSDelResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSDelResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Member
//  - NeedRouting
type DSIsMemberRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Member string `thrift:"member,3,required" db:"member" json:"member"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
}

func NewDSIsMemberRequest() *DSIsMemberRequest {
  return &DSIsMemberRequest{
Segment: "default",

NeedRouting: true,
}
}

var DSIsMemberRequest_Segment_DEFAULT string = "default"

func (p *DSIsMemberRequest) GetSegment() string {
  return p.Segment
}

func (p *DSIsMemberRequest) GetKey() string {
  return p.Key
}

func (p *DSIsMemberRequest) GetMember() string {
  return p.Member
}
var DSIsMemberRequest_NeedRouting_DEFAULT bool = true

func (p *DSIsMemberRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *DSIsMemberRequest) IsSetSegment() bool {
  return p.Segment != DSIsMemberRequest_Segment_DEFAULT
}

func (p *DSIsMemberRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != DSIsMemberRequest_NeedRouting_DEFAULT
}

func (p *DSIsMemberRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetMember bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetMember = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetMember{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Member is not set"));
  }
  return nil
}

func (p *DSIsMemberRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *DSIsMemberRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *DSIsMemberRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Member = v
}
  return nil
}

func (p *DSIsMemberRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *DSIsMemberRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSIsMemberRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSIsMemberRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *DSIsMemberRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *DSIsMemberRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "member", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:member: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Member)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.member (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:member: ", p), err) }
  return err
}

func (p *DSIsMemberRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *DSIsMemberRequest) Equals(other *DSIsMemberRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.Member != other.Member { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *DSIsMemberRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSIsMemberRequest(%+v)", *p)
}

// Attributes:
//  - Yes
//  - Error
type DSIsMemberResponse struct {
  Yes bool `thrift:"yes,1,required" db:"yes" json:"yes"`
  Error *SharestoreException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewDSIsMemberResponse() *DSIsMemberResponse {
  return &DSIsMemberResponse{}
}


func (p *DSIsMemberResponse) GetYes() bool {
  return p.Yes
}
var DSIsMemberResponse_Error_DEFAULT *SharestoreException
func (p *DSIsMemberResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return DSIsMemberResponse_Error_DEFAULT
  }
return p.Error
}
func (p *DSIsMemberResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *DSIsMemberResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetYes bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetYes = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetYes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Yes is not set"));
  }
  return nil
}

func (p *DSIsMemberResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Yes = v
}
  return nil
}

func (p *DSIsMemberResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *DSIsMemberResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DSIsMemberResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DSIsMemberResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "yes", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:yes: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Yes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:yes: ", p), err) }
  return err
}

func (p *DSIsMemberResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *DSIsMemberResponse) Equals(other *DSIsMemberResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Yes != other.Yes { return false }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *DSIsMemberResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DSIsMemberResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Value
//  - NeedRouting
type IncrCounterRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Value int64 `thrift:"value,3,required" db:"value" json:"value"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
}

func NewIncrCounterRequest() *IncrCounterRequest {
  return &IncrCounterRequest{
Segment: "default",

Value: 1,

NeedRouting: true,
}
}

var IncrCounterRequest_Segment_DEFAULT string = "default"

func (p *IncrCounterRequest) GetSegment() string {
  return p.Segment
}

func (p *IncrCounterRequest) GetKey() string {
  return p.Key
}

func (p *IncrCounterRequest) GetValue() int64 {
  return p.Value
}
var IncrCounterRequest_NeedRouting_DEFAULT bool = true

func (p *IncrCounterRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *IncrCounterRequest) IsSetSegment() bool {
  return p.Segment != IncrCounterRequest_Segment_DEFAULT
}

func (p *IncrCounterRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != IncrCounterRequest_NeedRouting_DEFAULT
}

func (p *IncrCounterRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *IncrCounterRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *IncrCounterRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *IncrCounterRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IncrCounterRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *IncrCounterRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IncrCounterRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncrCounterRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *IncrCounterRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *IncrCounterRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IncrCounterRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *IncrCounterRequest) Equals(other *IncrCounterRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.Value != other.Value { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *IncrCounterRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IncrCounterRequest(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Value
//  - TTLSec
//  - NeedRouting
type IncrCounterTtlRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Value int64 `thrift:"value,3,required" db:"value" json:"value"`
  TTLSec int32 `thrift:"ttl_sec,4,required" db:"ttl_sec" json:"ttl_sec"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
}

func NewIncrCounterTtlRequest() *IncrCounterTtlRequest {
  return &IncrCounterTtlRequest{
Segment: "default",

Value: 1,

NeedRouting: true,
}
}

var IncrCounterTtlRequest_Segment_DEFAULT string = "default"

func (p *IncrCounterTtlRequest) GetSegment() string {
  return p.Segment
}

func (p *IncrCounterTtlRequest) GetKey() string {
  return p.Key
}

func (p *IncrCounterTtlRequest) GetValue() int64 {
  return p.Value
}

func (p *IncrCounterTtlRequest) GetTTLSec() int32 {
  return p.TTLSec
}
var IncrCounterTtlRequest_NeedRouting_DEFAULT bool = true

func (p *IncrCounterTtlRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *IncrCounterTtlRequest) IsSetSegment() bool {
  return p.Segment != IncrCounterTtlRequest_Segment_DEFAULT
}

func (p *IncrCounterTtlRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != IncrCounterTtlRequest_NeedRouting_DEFAULT
}

func (p *IncrCounterTtlRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;
  var issetTTLSec bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTTLSec = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  if !issetTTLSec{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTLSec is not set"));
  }
  return nil
}

func (p *IncrCounterTtlRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *IncrCounterTtlRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *IncrCounterTtlRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IncrCounterTtlRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TTLSec = v
}
  return nil
}

func (p *IncrCounterTtlRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *IncrCounterTtlRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IncrCounterTtlRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncrCounterTtlRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *IncrCounterTtlRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *IncrCounterTtlRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IncrCounterTtlRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ttl_sec", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttl_sec: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TTLSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttl_sec (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttl_sec: ", p), err) }
  return err
}

func (p *IncrCounterTtlRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *IncrCounterTtlRequest) Equals(other *IncrCounterTtlRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.Value != other.Value { return false }
  if p.TTLSec != other.TTLSec { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *IncrCounterTtlRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IncrCounterTtlRequest(%+v)", *p)
}

// Attributes:
//  - Error
type IncrCounterResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewIncrCounterResponse() *IncrCounterResponse {
  return &IncrCounterResponse{}
}

var IncrCounterResponse_Error_DEFAULT *SharestoreException
func (p *IncrCounterResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return IncrCounterResponse_Error_DEFAULT
  }
return p.Error
}
func (p *IncrCounterResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *IncrCounterResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IncrCounterResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *IncrCounterResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IncrCounterResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncrCounterResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *IncrCounterResponse) Equals(other *IncrCounterResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *IncrCounterResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IncrCounterResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Values
//  - Index
//  - NeedRouting
type MultiIncrCounterRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Values []int64 `thrift:"values,3,required" db:"values" json:"values"`
  Index []int32 `thrift:"index,4" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
}

func NewMultiIncrCounterRequest() *MultiIncrCounterRequest {
  return &MultiIncrCounterRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiIncrCounterRequest_Segment_DEFAULT string = "default"

func (p *MultiIncrCounterRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiIncrCounterRequest) GetKeys() []string {
  return p.Keys
}

func (p *MultiIncrCounterRequest) GetValues() []int64 {
  return p.Values
}
var MultiIncrCounterRequest_Index_DEFAULT []int32

func (p *MultiIncrCounterRequest) GetIndex() []int32 {
  return p.Index
}
var MultiIncrCounterRequest_NeedRouting_DEFAULT bool = true

func (p *MultiIncrCounterRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiIncrCounterRequest) IsSetSegment() bool {
  return p.Segment != MultiIncrCounterRequest_Segment_DEFAULT
}

func (p *MultiIncrCounterRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiIncrCounterRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiIncrCounterRequest_NeedRouting_DEFAULT
}

func (p *MultiIncrCounterRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;
  var issetValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  return nil
}

func (p *MultiIncrCounterRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiIncrCounterRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem30 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem30 = v
}
    p.Keys = append(p.Keys, _elem30)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem31 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem31 = v
}
    p.Values = append(p.Values, _elem31)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem32 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem32 = v
}
    p.Index = append(p.Index, _elem32)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiIncrCounterRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiIncrCounterRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiIncrCounterRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiIncrCounterRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiIncrCounterRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *MultiIncrCounterRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:index: ", p), err) }
  }
  return err
}

func (p *MultiIncrCounterRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiIncrCounterRequest) Equals(other *MultiIncrCounterRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src33 := other.Keys[i]
    if _tgt != _src33 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src34 := other.Values[i]
    if _tgt != _src34 { return false }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src35 := other.Index[i]
    if _tgt != _src35 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiIncrCounterRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiIncrCounterRequest(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Values
//  - TTLSecs
//  - Index
//  - NeedRouting
type MultiIncrCounterTtlRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Values []int64 `thrift:"values,3,required" db:"values" json:"values"`
  TTLSecs []int32 `thrift:"ttl_secs,4,required" db:"ttl_secs" json:"ttl_secs"`
  Index []int32 `thrift:"index,5" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,6" db:"need_routing" json:"need_routing"`
}

func NewMultiIncrCounterTtlRequest() *MultiIncrCounterTtlRequest {
  return &MultiIncrCounterTtlRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiIncrCounterTtlRequest_Segment_DEFAULT string = "default"

func (p *MultiIncrCounterTtlRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiIncrCounterTtlRequest) GetKeys() []string {
  return p.Keys
}

func (p *MultiIncrCounterTtlRequest) GetValues() []int64 {
  return p.Values
}

func (p *MultiIncrCounterTtlRequest) GetTTLSecs() []int32 {
  return p.TTLSecs
}
var MultiIncrCounterTtlRequest_Index_DEFAULT []int32

func (p *MultiIncrCounterTtlRequest) GetIndex() []int32 {
  return p.Index
}
var MultiIncrCounterTtlRequest_NeedRouting_DEFAULT bool = true

func (p *MultiIncrCounterTtlRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiIncrCounterTtlRequest) IsSetSegment() bool {
  return p.Segment != MultiIncrCounterTtlRequest_Segment_DEFAULT
}

func (p *MultiIncrCounterTtlRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiIncrCounterTtlRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiIncrCounterTtlRequest_NeedRouting_DEFAULT
}

func (p *MultiIncrCounterTtlRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;
  var issetValues bool = false;
  var issetTTLSecs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTTLSecs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  if !issetTTLSecs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTLSecs is not set"));
  }
  return nil
}

func (p *MultiIncrCounterTtlRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiIncrCounterTtlRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem36 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem36 = v
}
    p.Keys = append(p.Keys, _elem36)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterTtlRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem37 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem37 = v
}
    p.Values = append(p.Values, _elem37)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterTtlRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TTLSecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem38 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem38 = v
}
    p.TTLSecs = append(p.TTLSecs, _elem38)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterTtlRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem39 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem39 = v
}
    p.Index = append(p.Index, _elem39)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterTtlRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiIncrCounterTtlRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiIncrCounterTtlRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiIncrCounterTtlRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiIncrCounterTtlRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiIncrCounterTtlRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *MultiIncrCounterTtlRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ttl_secs", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttl_secs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TTLSecs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TTLSecs {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttl_secs: ", p), err) }
  return err
}

func (p *MultiIncrCounterTtlRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:index: ", p), err) }
  }
  return err
}

func (p *MultiIncrCounterTtlRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiIncrCounterTtlRequest) Equals(other *MultiIncrCounterTtlRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src40 := other.Keys[i]
    if _tgt != _src40 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src41 := other.Values[i]
    if _tgt != _src41 { return false }
  }
  if len(p.TTLSecs) != len(other.TTLSecs) { return false }
  for i, _tgt := range p.TTLSecs {
    _src42 := other.TTLSecs[i]
    if _tgt != _src42 { return false }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src43 := other.Index[i]
    if _tgt != _src43 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiIncrCounterTtlRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiIncrCounterTtlRequest(%+v)", *p)
}

// Attributes:
//  - Responses
//  - SubRequestIndices
type MultiIncrCounterResponse struct {
  Responses []*IncrCounterResponse `thrift:"responses,1,required" db:"responses" json:"responses"`
  SubRequestIndices []int32 `thrift:"sub_request_indices,2" db:"sub_request_indices" json:"sub_request_indices,omitempty"`
}

func NewMultiIncrCounterResponse() *MultiIncrCounterResponse {
  return &MultiIncrCounterResponse{}
}


func (p *MultiIncrCounterResponse) GetResponses() []*IncrCounterResponse {
  return p.Responses
}
var MultiIncrCounterResponse_SubRequestIndices_DEFAULT []int32

func (p *MultiIncrCounterResponse) GetSubRequestIndices() []int32 {
  return p.SubRequestIndices
}
func (p *MultiIncrCounterResponse) IsSetSubRequestIndices() bool {
  return p.SubRequestIndices != nil
}

func (p *MultiIncrCounterResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResponses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Responses is not set"));
  }
  return nil
}

func (p *MultiIncrCounterResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IncrCounterResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem44 := &IncrCounterResponse{}
    if err := _elem44.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
    }
    p.Responses = append(p.Responses, _elem44)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SubRequestIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem45 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem45 = v
}
    p.SubRequestIndices = append(p.SubRequestIndices, _elem45)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiIncrCounterResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiIncrCounterResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiIncrCounterResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *MultiIncrCounterResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSubRequestIndices() {
    if err := oprot.WriteFieldBegin(ctx, "sub_request_indices", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_request_indices: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SubRequestIndices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SubRequestIndices {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_request_indices: ", p), err) }
  }
  return err
}

func (p *MultiIncrCounterResponse) Equals(other *MultiIncrCounterResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Responses) != len(other.Responses) { return false }
  for i, _tgt := range p.Responses {
    _src46 := other.Responses[i]
    if !_tgt.Equals(_src46) { return false }
  }
  if len(p.SubRequestIndices) != len(other.SubRequestIndices) { return false }
  for i, _tgt := range p.SubRequestIndices {
    _src47 := other.SubRequestIndices[i]
    if _tgt != _src47 { return false }
  }
  return true
}

func (p *MultiIncrCounterResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiIncrCounterResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - NeedRouting
type GetCounterRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  NeedRouting bool `thrift:"need_routing,3" db:"need_routing" json:"need_routing"`
}

func NewGetCounterRequest() *GetCounterRequest {
  return &GetCounterRequest{
Segment: "default",

NeedRouting: true,
}
}

var GetCounterRequest_Segment_DEFAULT string = "default"

func (p *GetCounterRequest) GetSegment() string {
  return p.Segment
}

func (p *GetCounterRequest) GetKey() string {
  return p.Key
}
var GetCounterRequest_NeedRouting_DEFAULT bool = true

func (p *GetCounterRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *GetCounterRequest) IsSetSegment() bool {
  return p.Segment != GetCounterRequest_Segment_DEFAULT
}

func (p *GetCounterRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != GetCounterRequest_NeedRouting_DEFAULT
}

func (p *GetCounterRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *GetCounterRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *GetCounterRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *GetCounterRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *GetCounterRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetCounterRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetCounterRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *GetCounterRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *GetCounterRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:need_routing: ", p), err) }
  }
  return err
}

func (p *GetCounterRequest) Equals(other *GetCounterRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *GetCounterRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCounterRequest(%+v)", *p)
}

// Attributes:
//  - Value
//  - Error
type GetCounterResponse struct {
  Value int64 `thrift:"value,1,required" db:"value" json:"value"`
  Error *SharestoreException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewGetCounterResponse() *GetCounterResponse {
  return &GetCounterResponse{}
}


func (p *GetCounterResponse) GetValue() int64 {
  return p.Value
}
var GetCounterResponse_Error_DEFAULT *SharestoreException
func (p *GetCounterResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return GetCounterResponse_Error_DEFAULT
  }
return p.Error
}
func (p *GetCounterResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *GetCounterResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *GetCounterResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *GetCounterResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *GetCounterResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetCounterResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetCounterResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *GetCounterResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *GetCounterResponse) Equals(other *GetCounterResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Value != other.Value { return false }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *GetCounterResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCounterResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Value
//  - NeedRouting
type SetCounterRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Value int64 `thrift:"value,3,required" db:"value" json:"value"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
}

func NewSetCounterRequest() *SetCounterRequest {
  return &SetCounterRequest{
Segment: "default",

NeedRouting: true,
}
}

var SetCounterRequest_Segment_DEFAULT string = "default"

func (p *SetCounterRequest) GetSegment() string {
  return p.Segment
}

func (p *SetCounterRequest) GetKey() string {
  return p.Key
}

func (p *SetCounterRequest) GetValue() int64 {
  return p.Value
}
var SetCounterRequest_NeedRouting_DEFAULT bool = true

func (p *SetCounterRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *SetCounterRequest) IsSetSegment() bool {
  return p.Segment != SetCounterRequest_Segment_DEFAULT
}

func (p *SetCounterRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != SetCounterRequest_NeedRouting_DEFAULT
}

func (p *SetCounterRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *SetCounterRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *SetCounterRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *SetCounterRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *SetCounterRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *SetCounterRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetCounterRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetCounterRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *SetCounterRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *SetCounterRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *SetCounterRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *SetCounterRequest) Equals(other *SetCounterRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.Value != other.Value { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *SetCounterRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetCounterRequest(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Value
//  - TTLSec
//  - NeedRouting
type SetCounterTtlRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Value int64 `thrift:"value,3,required" db:"value" json:"value"`
  TTLSec int32 `thrift:"ttl_sec,4,required" db:"ttl_sec" json:"ttl_sec"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
}

func NewSetCounterTtlRequest() *SetCounterTtlRequest {
  return &SetCounterTtlRequest{
Segment: "default",

NeedRouting: true,
}
}

var SetCounterTtlRequest_Segment_DEFAULT string = "default"

func (p *SetCounterTtlRequest) GetSegment() string {
  return p.Segment
}

func (p *SetCounterTtlRequest) GetKey() string {
  return p.Key
}

func (p *SetCounterTtlRequest) GetValue() int64 {
  return p.Value
}

func (p *SetCounterTtlRequest) GetTTLSec() int32 {
  return p.TTLSec
}
var SetCounterTtlRequest_NeedRouting_DEFAULT bool = true

func (p *SetCounterTtlRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *SetCounterTtlRequest) IsSetSegment() bool {
  return p.Segment != SetCounterTtlRequest_Segment_DEFAULT
}

func (p *SetCounterTtlRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != SetCounterTtlRequest_NeedRouting_DEFAULT
}

func (p *SetCounterTtlRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;
  var issetTTLSec bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTTLSec = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  if !issetTTLSec{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTLSec is not set"));
  }
  return nil
}

func (p *SetCounterTtlRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *SetCounterTtlRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *SetCounterTtlRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *SetCounterTtlRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TTLSec = v
}
  return nil
}

func (p *SetCounterTtlRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *SetCounterTtlRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetCounterTtlRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetCounterTtlRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *SetCounterTtlRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *SetCounterTtlRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *SetCounterTtlRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ttl_sec", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttl_sec: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TTLSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttl_sec (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttl_sec: ", p), err) }
  return err
}

func (p *SetCounterTtlRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *SetCounterTtlRequest) Equals(other *SetCounterTtlRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.Value != other.Value { return false }
  if p.TTLSec != other.TTLSec { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *SetCounterTtlRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetCounterTtlRequest(%+v)", *p)
}

// Attributes:
//  - Error
type SetCounterResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewSetCounterResponse() *SetCounterResponse {
  return &SetCounterResponse{}
}

var SetCounterResponse_Error_DEFAULT *SharestoreException
func (p *SetCounterResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return SetCounterResponse_Error_DEFAULT
  }
return p.Error
}
func (p *SetCounterResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *SetCounterResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetCounterResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *SetCounterResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetCounterResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetCounterResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *SetCounterResponse) Equals(other *SetCounterResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *SetCounterResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetCounterResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Values
//  - Index
//  - NeedRouting
type MultiSetCounterRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Values []int64 `thrift:"values,3,required" db:"values" json:"values"`
  Index []int32 `thrift:"index,4" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
}

func NewMultiSetCounterRequest() *MultiSetCounterRequest {
  return &MultiSetCounterRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiSetCounterRequest_Segment_DEFAULT string = "default"

func (p *MultiSetCounterRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiSetCounterRequest) GetKeys() []string {
  return p.Keys
}

func (p *MultiSetCounterRequest) GetValues() []int64 {
  return p.Values
}
var MultiSetCounterRequest_Index_DEFAULT []int32

func (p *MultiSetCounterRequest) GetIndex() []int32 {
  return p.Index
}
var MultiSetCounterRequest_NeedRouting_DEFAULT bool = true

func (p *MultiSetCounterRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiSetCounterRequest) IsSetSegment() bool {
  return p.Segment != MultiSetCounterRequest_Segment_DEFAULT
}

func (p *MultiSetCounterRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiSetCounterRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiSetCounterRequest_NeedRouting_DEFAULT
}

func (p *MultiSetCounterRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;
  var issetValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  return nil
}

func (p *MultiSetCounterRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiSetCounterRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem48 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem48 = v
}
    p.Keys = append(p.Keys, _elem48)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem49 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem49 = v
}
    p.Values = append(p.Values, _elem49)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem50 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem50 = v
}
    p.Index = append(p.Index, _elem50)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiSetCounterRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiSetCounterRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiSetCounterRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiSetCounterRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiSetCounterRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *MultiSetCounterRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:index: ", p), err) }
  }
  return err
}

func (p *MultiSetCounterRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiSetCounterRequest) Equals(other *MultiSetCounterRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src51 := other.Keys[i]
    if _tgt != _src51 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src52 := other.Values[i]
    if _tgt != _src52 { return false }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src53 := other.Index[i]
    if _tgt != _src53 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiSetCounterRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiSetCounterRequest(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Values
//  - TTLSecs
//  - Index
//  - NeedRouting
type MultiSetCounterTtlRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Values []int64 `thrift:"values,3,required" db:"values" json:"values"`
  TTLSecs []int32 `thrift:"ttl_secs,4,required" db:"ttl_secs" json:"ttl_secs"`
  Index []int32 `thrift:"index,5" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,6" db:"need_routing" json:"need_routing"`
}

func NewMultiSetCounterTtlRequest() *MultiSetCounterTtlRequest {
  return &MultiSetCounterTtlRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiSetCounterTtlRequest_Segment_DEFAULT string = "default"

func (p *MultiSetCounterTtlRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiSetCounterTtlRequest) GetKeys() []string {
  return p.Keys
}

func (p *MultiSetCounterTtlRequest) GetValues() []int64 {
  return p.Values
}

func (p *MultiSetCounterTtlRequest) GetTTLSecs() []int32 {
  return p.TTLSecs
}
var MultiSetCounterTtlRequest_Index_DEFAULT []int32

func (p *MultiSetCounterTtlRequest) GetIndex() []int32 {
  return p.Index
}
var MultiSetCounterTtlRequest_NeedRouting_DEFAULT bool = true

func (p *MultiSetCounterTtlRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiSetCounterTtlRequest) IsSetSegment() bool {
  return p.Segment != MultiSetCounterTtlRequest_Segment_DEFAULT
}

func (p *MultiSetCounterTtlRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiSetCounterTtlRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiSetCounterTtlRequest_NeedRouting_DEFAULT
}

func (p *MultiSetCounterTtlRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;
  var issetValues bool = false;
  var issetTTLSecs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTTLSecs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  if !issetTTLSecs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTLSecs is not set"));
  }
  return nil
}

func (p *MultiSetCounterTtlRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiSetCounterTtlRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem54 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem54 = v
}
    p.Keys = append(p.Keys, _elem54)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterTtlRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem55 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem55 = v
}
    p.Values = append(p.Values, _elem55)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterTtlRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TTLSecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem56 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem56 = v
}
    p.TTLSecs = append(p.TTLSecs, _elem56)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterTtlRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem57 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem57 = v
}
    p.Index = append(p.Index, _elem57)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterTtlRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiSetCounterTtlRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiSetCounterTtlRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiSetCounterTtlRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiSetCounterTtlRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiSetCounterTtlRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *MultiSetCounterTtlRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ttl_secs", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttl_secs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TTLSecs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TTLSecs {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttl_secs: ", p), err) }
  return err
}

func (p *MultiSetCounterTtlRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:index: ", p), err) }
  }
  return err
}

func (p *MultiSetCounterTtlRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiSetCounterTtlRequest) Equals(other *MultiSetCounterTtlRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src58 := other.Keys[i]
    if _tgt != _src58 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src59 := other.Values[i]
    if _tgt != _src59 { return false }
  }
  if len(p.TTLSecs) != len(other.TTLSecs) { return false }
  for i, _tgt := range p.TTLSecs {
    _src60 := other.TTLSecs[i]
    if _tgt != _src60 { return false }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src61 := other.Index[i]
    if _tgt != _src61 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiSetCounterTtlRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiSetCounterTtlRequest(%+v)", *p)
}

// Attributes:
//  - Responses
//  - SubRequestIndices
type MultiSetCounterResponse struct {
  Responses []*SetCounterResponse `thrift:"responses,1,required" db:"responses" json:"responses"`
  SubRequestIndices []int32 `thrift:"sub_request_indices,2" db:"sub_request_indices" json:"sub_request_indices,omitempty"`
}

func NewMultiSetCounterResponse() *MultiSetCounterResponse {
  return &MultiSetCounterResponse{}
}


func (p *MultiSetCounterResponse) GetResponses() []*SetCounterResponse {
  return p.Responses
}
var MultiSetCounterResponse_SubRequestIndices_DEFAULT []int32

func (p *MultiSetCounterResponse) GetSubRequestIndices() []int32 {
  return p.SubRequestIndices
}
func (p *MultiSetCounterResponse) IsSetSubRequestIndices() bool {
  return p.SubRequestIndices != nil
}

func (p *MultiSetCounterResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResponses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Responses is not set"));
  }
  return nil
}

func (p *MultiSetCounterResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SetCounterResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem62 := &SetCounterResponse{}
    if err := _elem62.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem62), err)
    }
    p.Responses = append(p.Responses, _elem62)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SubRequestIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem63 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem63 = v
}
    p.SubRequestIndices = append(p.SubRequestIndices, _elem63)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiSetCounterResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiSetCounterResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiSetCounterResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *MultiSetCounterResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSubRequestIndices() {
    if err := oprot.WriteFieldBegin(ctx, "sub_request_indices", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_request_indices: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SubRequestIndices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SubRequestIndices {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_request_indices: ", p), err) }
  }
  return err
}

func (p *MultiSetCounterResponse) Equals(other *MultiSetCounterResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Responses) != len(other.Responses) { return false }
  for i, _tgt := range p.Responses {
    _src64 := other.Responses[i]
    if !_tgt.Equals(_src64) { return false }
  }
  if len(p.SubRequestIndices) != len(other.SubRequestIndices) { return false }
  for i, _tgt := range p.SubRequestIndices {
    _src65 := other.SubRequestIndices[i]
    if _tgt != _src65 { return false }
  }
  return true
}

func (p *MultiSetCounterResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiSetCounterResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Index
//  - NeedRouting
type MultiGetCounterRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Index []int32 `thrift:"index,3" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
}

func NewMultiGetCounterRequest() *MultiGetCounterRequest {
  return &MultiGetCounterRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiGetCounterRequest_Segment_DEFAULT string = "default"

func (p *MultiGetCounterRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiGetCounterRequest) GetKeys() []string {
  return p.Keys
}
var MultiGetCounterRequest_Index_DEFAULT []int32

func (p *MultiGetCounterRequest) GetIndex() []int32 {
  return p.Index
}
var MultiGetCounterRequest_NeedRouting_DEFAULT bool = true

func (p *MultiGetCounterRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiGetCounterRequest) IsSetSegment() bool {
  return p.Segment != MultiGetCounterRequest_Segment_DEFAULT
}

func (p *MultiGetCounterRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiGetCounterRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiGetCounterRequest_NeedRouting_DEFAULT
}

func (p *MultiGetCounterRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  return nil
}

func (p *MultiGetCounterRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiGetCounterRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem66 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem66 = v
}
    p.Keys = append(p.Keys, _elem66)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetCounterRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem67 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem67 = v
}
    p.Index = append(p.Index, _elem67)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetCounterRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiGetCounterRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiGetCounterRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetCounterRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiGetCounterRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiGetCounterRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index: ", p), err) }
  }
  return err
}

func (p *MultiGetCounterRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiGetCounterRequest) Equals(other *MultiGetCounterRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src68 := other.Keys[i]
    if _tgt != _src68 { return false }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src69 := other.Index[i]
    if _tgt != _src69 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiGetCounterRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetCounterRequest(%+v)", *p)
}

// Attributes:
//  - Responses
//  - SubRequestIndices
type MultiGetCounterResponse struct {
  Responses []*GetCounterResponse `thrift:"responses,1,required" db:"responses" json:"responses"`
  SubRequestIndices []int32 `thrift:"sub_request_indices,2" db:"sub_request_indices" json:"sub_request_indices,omitempty"`
}

func NewMultiGetCounterResponse() *MultiGetCounterResponse {
  return &MultiGetCounterResponse{}
}


func (p *MultiGetCounterResponse) GetResponses() []*GetCounterResponse {
  return p.Responses
}
var MultiGetCounterResponse_SubRequestIndices_DEFAULT []int32

func (p *MultiGetCounterResponse) GetSubRequestIndices() []int32 {
  return p.SubRequestIndices
}
func (p *MultiGetCounterResponse) IsSetSubRequestIndices() bool {
  return p.SubRequestIndices != nil
}

func (p *MultiGetCounterResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResponses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Responses is not set"));
  }
  return nil
}

func (p *MultiGetCounterResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*GetCounterResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem70 := &GetCounterResponse{}
    if err := _elem70.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem70), err)
    }
    p.Responses = append(p.Responses, _elem70)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetCounterResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SubRequestIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem71 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem71 = v
}
    p.SubRequestIndices = append(p.SubRequestIndices, _elem71)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetCounterResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiGetCounterResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetCounterResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *MultiGetCounterResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSubRequestIndices() {
    if err := oprot.WriteFieldBegin(ctx, "sub_request_indices", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_request_indices: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SubRequestIndices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SubRequestIndices {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_request_indices: ", p), err) }
  }
  return err
}

func (p *MultiGetCounterResponse) Equals(other *MultiGetCounterResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Responses) != len(other.Responses) { return false }
  for i, _tgt := range p.Responses {
    _src72 := other.Responses[i]
    if !_tgt.Equals(_src72) { return false }
  }
  if len(p.SubRequestIndices) != len(other.SubRequestIndices) { return false }
  for i, _tgt := range p.SubRequestIndices {
    _src73 := other.SubRequestIndices[i]
    if _tgt != _src73 { return false }
  }
  return true
}

func (p *MultiGetCounterResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetCounterResponse(%+v)", *p)
}

// Attributes:
//  - StrVal
//  - IntVal
//  - BufVal
type HashValue struct {
  StrVal *string `thrift:"str_val,1" db:"str_val" json:"str_val,omitempty"`
  IntVal *int64 `thrift:"int_val,2" db:"int_val" json:"int_val,omitempty"`
  BufVal []byte `thrift:"buf_val,3" db:"buf_val" json:"buf_val,omitempty"`
}

func NewHashValue() *HashValue {
  return &HashValue{}
}

var HashValue_StrVal_DEFAULT string
func (p *HashValue) GetStrVal() string {
  if !p.IsSetStrVal() {
    return HashValue_StrVal_DEFAULT
  }
return *p.StrVal
}
var HashValue_IntVal_DEFAULT int64
func (p *HashValue) GetIntVal() int64 {
  if !p.IsSetIntVal() {
    return HashValue_IntVal_DEFAULT
  }
return *p.IntVal
}
var HashValue_BufVal_DEFAULT []byte

func (p *HashValue) GetBufVal() []byte {
  return p.BufVal
}
func (p *HashValue) CountSetFieldsHashValue() int {
  count := 0
  if (p.IsSetStrVal()) {
    count++
  }
  if (p.IsSetIntVal()) {
    count++
  }
  if (p.IsSetBufVal()) {
    count++
  }
  return count

}

func (p *HashValue) IsSetStrVal() bool {
  return p.StrVal != nil
}

func (p *HashValue) IsSetIntVal() bool {
  return p.IntVal != nil
}

func (p *HashValue) IsSetBufVal() bool {
  return p.BufVal != nil
}

func (p *HashValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HashValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StrVal = &v
}
  return nil
}

func (p *HashValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IntVal = &v
}
  return nil
}

func (p *HashValue)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BufVal = v
}
  return nil
}

func (p *HashValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsHashValue(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "HashValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStrVal() {
    if err := oprot.WriteFieldBegin(ctx, "str_val", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:str_val: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StrVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.str_val (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:str_val: ", p), err) }
  }
  return err
}

func (p *HashValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIntVal() {
    if err := oprot.WriteFieldBegin(ctx, "int_val", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:int_val: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.IntVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.int_val (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:int_val: ", p), err) }
  }
  return err
}

func (p *HashValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBufVal() {
    if err := oprot.WriteFieldBegin(ctx, "buf_val", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:buf_val: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BufVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.buf_val (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:buf_val: ", p), err) }
  }
  return err
}

func (p *HashValue) Equals(other *HashValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StrVal != other.StrVal {
    if p.StrVal == nil || other.StrVal == nil {
      return false
    }
    if (*p.StrVal) != (*other.StrVal) { return false }
  }
  if p.IntVal != other.IntVal {
    if p.IntVal == nil || other.IntVal == nil {
      return false
    }
    if (*p.IntVal) != (*other.IntVal) { return false }
  }
  if bytes.Compare(p.BufVal, other.BufVal) != 0 { return false }
  return true
}

func (p *HashValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashValue(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Members
//  - Values
//  - TTLSecs
//  - NeedRouting
type HashSetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Members []string `thrift:"members,3,required" db:"members" json:"members"`
  Values []*HashValue `thrift:"values,4,required" db:"values" json:"values"`
  TTLSecs []int32 `thrift:"ttl_secs,5" db:"ttl_secs" json:"ttl_secs,omitempty"`
  NeedRouting bool `thrift:"need_routing,6" db:"need_routing" json:"need_routing"`
}

func NewHashSetRequest() *HashSetRequest {
  return &HashSetRequest{
Segment: "default",

NeedRouting: true,
}
}

var HashSetRequest_Segment_DEFAULT string = "default"

func (p *HashSetRequest) GetSegment() string {
  return p.Segment
}

func (p *HashSetRequest) GetKey() string {
  return p.Key
}

func (p *HashSetRequest) GetMembers() []string {
  return p.Members
}

func (p *HashSetRequest) GetValues() []*HashValue {
  return p.Values
}
var HashSetRequest_TTLSecs_DEFAULT []int32

func (p *HashSetRequest) GetTTLSecs() []int32 {
  return p.TTLSecs
}
var HashSetRequest_NeedRouting_DEFAULT bool = true

func (p *HashSetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *HashSetRequest) IsSetSegment() bool {
  return p.Segment != HashSetRequest_Segment_DEFAULT
}

func (p *HashSetRequest) IsSetTTLSecs() bool {
  return p.TTLSecs != nil
}

func (p *HashSetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != HashSetRequest_NeedRouting_DEFAULT
}

func (p *HashSetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetMembers bool = false;
  var issetValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  return nil
}

func (p *HashSetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *HashSetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *HashSetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem74 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem74 = v
}
    p.Members = append(p.Members, _elem74)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HashSetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HashValue, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
    _elem75 := &HashValue{}
    if err := _elem75.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem75), err)
    }
    p.Values = append(p.Values, _elem75)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HashSetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TTLSecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem76 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem76 = v
}
    p.TTLSecs = append(p.TTLSecs, _elem76)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HashSetRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *HashSetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HashSetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashSetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *HashSetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *HashSetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:members: ", p), err) }
  return err
}

func (p *HashSetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err) }
  return err
}

func (p *HashSetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTTLSecs() {
    if err := oprot.WriteFieldBegin(ctx, "ttl_secs", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ttl_secs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TTLSecs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TTLSecs {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ttl_secs: ", p), err) }
  }
  return err
}

func (p *HashSetRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:need_routing: ", p), err) }
  }
  return err
}

func (p *HashSetRequest) Equals(other *HashSetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src77 := other.Members[i]
    if _tgt != _src77 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src78 := other.Values[i]
    if !_tgt.Equals(_src78) { return false }
  }
  if len(p.TTLSecs) != len(other.TTLSecs) { return false }
  for i, _tgt := range p.TTLSecs {
    _src79 := other.TTLSecs[i]
    if _tgt != _src79 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *HashSetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashSetRequest(%+v)", *p)
}

// Attributes:
//  - Error
type HashSetResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewHashSetResponse() *HashSetResponse {
  return &HashSetResponse{}
}

var HashSetResponse_Error_DEFAULT *SharestoreException
func (p *HashSetResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return HashSetResponse_Error_DEFAULT
  }
return p.Error
}
func (p *HashSetResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *HashSetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HashSetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *HashSetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HashSetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashSetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *HashSetResponse) Equals(other *HashSetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *HashSetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashSetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Members
//  - Values
//  - TTLSecs
//  - Index
//  - NeedRouting
type MultiHashSetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Members [][]string `thrift:"members,3,required" db:"members" json:"members"`
  Values [][]*HashValue `thrift:"values,4,required" db:"values" json:"values"`
  TTLSecs [][]int32 `thrift:"ttl_secs,5" db:"ttl_secs" json:"ttl_secs,omitempty"`
  Index []int32 `thrift:"index,6" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,7" db:"need_routing" json:"need_routing"`
}

func NewMultiHashSetRequest() *MultiHashSetRequest {
  return &MultiHashSetRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiHashSetRequest_Segment_DEFAULT string = "default"

func (p *MultiHashSetRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiHashSetRequest) GetKeys() []string {
  return p.Keys
}

func (p *MultiHashSetRequest) GetMembers() [][]string {
  return p.Members
}

func (p *MultiHashSetRequest) GetValues() [][]*HashValue {
  return p.Values
}
var MultiHashSetRequest_TTLSecs_DEFAULT [][]int32

func (p *MultiHashSetRequest) GetTTLSecs() [][]int32 {
  return p.TTLSecs
}
var MultiHashSetRequest_Index_DEFAULT []int32

func (p *MultiHashSetRequest) GetIndex() []int32 {
  return p.Index
}
var MultiHashSetRequest_NeedRouting_DEFAULT bool = true

func (p *MultiHashSetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiHashSetRequest) IsSetSegment() bool {
  return p.Segment != MultiHashSetRequest_Segment_DEFAULT
}

func (p *MultiHashSetRequest) IsSetTTLSecs() bool {
  return p.TTLSecs != nil
}

func (p *MultiHashSetRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiHashSetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiHashSetRequest_NeedRouting_DEFAULT
}

func (p *MultiHashSetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;
  var issetMembers bool = false;
  var issetValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  return nil
}

func (p *MultiHashSetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiHashSetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem80 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem80 = v
}
    p.Keys = append(p.Keys, _elem80)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashSetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _elem81 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem82 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem82 = v
}
      _elem81 = append(_elem81, _elem82)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Members = append(p.Members, _elem81)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashSetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]*HashValue, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*HashValue, 0, size)
    _elem83 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem84 := &HashValue{}
      if err := _elem84.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem84), err)
      }
      _elem83 = append(_elem83, _elem84)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Values = append(p.Values, _elem83)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashSetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]int32, 0, size)
  p.TTLSecs =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]int32, 0, size)
    _elem85 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem86 int32
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem86 = v
}
      _elem85 = append(_elem85, _elem86)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.TTLSecs = append(p.TTLSecs, _elem85)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashSetRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem87 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem87 = v
}
    p.Index = append(p.Index, _elem87)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashSetRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiHashSetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiHashSetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiHashSetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiHashSetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiHashSetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.LIST, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:members: ", p), err) }
  return err
}

func (p *MultiHashSetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.LIST, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err) }
  return err
}

func (p *MultiHashSetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTTLSecs() {
    if err := oprot.WriteFieldBegin(ctx, "ttl_secs", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ttl_secs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.LIST, len(p.TTLSecs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TTLSecs {
      if err := oprot.WriteListBegin(ctx, thrift.I32, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := oprot.WriteI32(ctx, int32(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteListEnd(ctx); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ttl_secs: ", p), err) }
  }
  return err
}

func (p *MultiHashSetRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:index: ", p), err) }
  }
  return err
}

func (p *MultiHashSetRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiHashSetRequest) Equals(other *MultiHashSetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src88 := other.Keys[i]
    if _tgt != _src88 { return false }
  }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src89 := other.Members[i]
    if len(_tgt) != len(_src89) { return false }
    for i, _tgt := range _tgt {
      _src90 := _src89[i]
      if _tgt != _src90 { return false }
    }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src91 := other.Values[i]
    if len(_tgt) != len(_src91) { return false }
    for i, _tgt := range _tgt {
      _src92 := _src91[i]
      if !_tgt.Equals(_src92) { return false }
    }
  }
  if len(p.TTLSecs) != len(other.TTLSecs) { return false }
  for i, _tgt := range p.TTLSecs {
    _src93 := other.TTLSecs[i]
    if len(_tgt) != len(_src93) { return false }
    for i, _tgt := range _tgt {
      _src94 := _src93[i]
      if _tgt != _src94 { return false }
    }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src95 := other.Index[i]
    if _tgt != _src95 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiHashSetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiHashSetRequest(%+v)", *p)
}

// Attributes:
//  - Responses
//  - SubRequestIndices
type MultiHashSetResponse struct {
  Responses []*HashSetResponse `thrift:"responses,1,required" db:"responses" json:"responses"`
  SubRequestIndices []int32 `thrift:"sub_request_indices,2" db:"sub_request_indices" json:"sub_request_indices,omitempty"`
}

func NewMultiHashSetResponse() *MultiHashSetResponse {
  return &MultiHashSetResponse{}
}


func (p *MultiHashSetResponse) GetResponses() []*HashSetResponse {
  return p.Responses
}
var MultiHashSetResponse_SubRequestIndices_DEFAULT []int32

func (p *MultiHashSetResponse) GetSubRequestIndices() []int32 {
  return p.SubRequestIndices
}
func (p *MultiHashSetResponse) IsSetSubRequestIndices() bool {
  return p.SubRequestIndices != nil
}

func (p *MultiHashSetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResponses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Responses is not set"));
  }
  return nil
}

func (p *MultiHashSetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HashSetResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem96 := &HashSetResponse{}
    if err := _elem96.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem96), err)
    }
    p.Responses = append(p.Responses, _elem96)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashSetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SubRequestIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem97 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem97 = v
}
    p.SubRequestIndices = append(p.SubRequestIndices, _elem97)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashSetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiHashSetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiHashSetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *MultiHashSetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSubRequestIndices() {
    if err := oprot.WriteFieldBegin(ctx, "sub_request_indices", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_request_indices: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SubRequestIndices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SubRequestIndices {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_request_indices: ", p), err) }
  }
  return err
}

func (p *MultiHashSetResponse) Equals(other *MultiHashSetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Responses) != len(other.Responses) { return false }
  for i, _tgt := range p.Responses {
    _src98 := other.Responses[i]
    if !_tgt.Equals(_src98) { return false }
  }
  if len(p.SubRequestIndices) != len(other.SubRequestIndices) { return false }
  for i, _tgt := range p.SubRequestIndices {
    _src99 := other.SubRequestIndices[i]
    if _tgt != _src99 { return false }
  }
  return true
}

func (p *MultiHashSetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiHashSetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Type
//  - Members
//  - NeedRouting
type HashRemRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Type HashType `thrift:"type,3,required" db:"type" json:"type"`
  Members []string `thrift:"members,4" db:"members" json:"members,omitempty"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
}

func NewHashRemRequest() *HashRemRequest {
  return &HashRemRequest{
Segment: "default",

Type: 0,

NeedRouting: true,
}
}

var HashRemRequest_Segment_DEFAULT string = "default"

func (p *HashRemRequest) GetSegment() string {
  return p.Segment
}

func (p *HashRemRequest) GetKey() string {
  return p.Key
}

func (p *HashRemRequest) GetType() HashType {
  return p.Type
}
var HashRemRequest_Members_DEFAULT []string

func (p *HashRemRequest) GetMembers() []string {
  return p.Members
}
var HashRemRequest_NeedRouting_DEFAULT bool = true

func (p *HashRemRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *HashRemRequest) IsSetSegment() bool {
  return p.Segment != HashRemRequest_Segment_DEFAULT
}

func (p *HashRemRequest) IsSetMembers() bool {
  return p.Members != nil
}

func (p *HashRemRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != HashRemRequest_NeedRouting_DEFAULT
}

func (p *HashRemRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *HashRemRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *HashRemRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *HashRemRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := HashType(v)
  p.Type = temp
}
  return nil
}

func (p *HashRemRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem100 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem100 = v
}
    p.Members = append(p.Members, _elem100)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HashRemRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *HashRemRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HashRemRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashRemRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *HashRemRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *HashRemRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *HashRemRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMembers() {
    if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Members {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  }
  return err
}

func (p *HashRemRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *HashRemRequest) Equals(other *HashRemRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.Type != other.Type { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src101 := other.Members[i]
    if _tgt != _src101 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *HashRemRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashRemRequest(%+v)", *p)
}

// Attributes:
//  - Error
type HashRemResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewHashRemResponse() *HashRemResponse {
  return &HashRemResponse{}
}

var HashRemResponse_Error_DEFAULT *SharestoreException
func (p *HashRemResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return HashRemResponse_Error_DEFAULT
  }
return p.Error
}
func (p *HashRemResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *HashRemResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HashRemResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *HashRemResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HashRemResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashRemResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *HashRemResponse) Equals(other *HashRemResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *HashRemResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashRemResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Types
//  - Members
//  - Index
//  - NeedRouting
type MultiHashRemRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Types *[]HashType `thrift:"types,3" db:"types" json:"types"`
  Members [][]string `thrift:"members,4" db:"members" json:"members,omitempty"`
  Index []int32 `thrift:"index,5" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,6" db:"need_routing" json:"need_routing"`
}

func NewMultiHashRemRequest() *MultiHashRemRequest {
  return &MultiHashRemRequest{
Segment: "default",

NeedRouting: true,
}
}

var MultiHashRemRequest_Segment_DEFAULT string = "default"

func (p *MultiHashRemRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiHashRemRequest) GetKeys() []string {
  return p.Keys
}
var MultiHashRemRequest_Types_DEFAULT []HashType = []HashType{
}
func (p *MultiHashRemRequest) GetTypes() []HashType {
  if !p.IsSetTypes() {
    return MultiHashRemRequest_Types_DEFAULT
  }
return *p.Types
}
var MultiHashRemRequest_Members_DEFAULT [][]string

func (p *MultiHashRemRequest) GetMembers() [][]string {
  return p.Members
}
var MultiHashRemRequest_Index_DEFAULT []int32

func (p *MultiHashRemRequest) GetIndex() []int32 {
  return p.Index
}
var MultiHashRemRequest_NeedRouting_DEFAULT bool = true

func (p *MultiHashRemRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiHashRemRequest) IsSetSegment() bool {
  return p.Segment != MultiHashRemRequest_Segment_DEFAULT
}

func (p *MultiHashRemRequest) IsSetTypes() bool {
  return p.Types != nil
}

func (p *MultiHashRemRequest) IsSetMembers() bool {
  return p.Members != nil
}

func (p *MultiHashRemRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiHashRemRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiHashRemRequest_NeedRouting_DEFAULT
}

func (p *MultiHashRemRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  return nil
}

func (p *MultiHashRemRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiHashRemRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem102 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem102 = v
}
    p.Keys = append(p.Keys, _elem102)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashRemRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]HashType, 0, size)
  p.Types =  &tSlice
  for i := 0; i < size; i ++ {
var _elem103 HashType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := HashType(v)
    _elem103 = temp
}
    (*p.Types) = append((*p.Types), _elem103)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashRemRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _elem104 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem105 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem105 = v
}
      _elem104 = append(_elem104, _elem105)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Members = append(p.Members, _elem104)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashRemRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem106 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem106 = v
}
    p.Index = append(p.Index, _elem106)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashRemRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiHashRemRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiHashRemRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiHashRemRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiHashRemRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiHashRemRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTypes() {
    if err := oprot.WriteFieldBegin(ctx, "types", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:types: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(*p.Types)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range *p.Types {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:types: ", p), err) }
  }
  return err
}

func (p *MultiHashRemRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMembers() {
    if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.LIST, len(p.Members)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Members {
      if err := oprot.WriteListBegin(ctx, thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := oprot.WriteString(ctx, string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteListEnd(ctx); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  }
  return err
}

func (p *MultiHashRemRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:index: ", p), err) }
  }
  return err
}

func (p *MultiHashRemRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiHashRemRequest) Equals(other *MultiHashRemRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src107 := other.Keys[i]
    if _tgt != _src107 { return false }
  }
  if p.Types != other.Types {
    if p.Types == nil || other.Types == nil {
      return false
    }
    if len((*p.Types)) != len((*other.Types)) { return false }
    for i, _tgt := range (*p.Types) {
      _src108 := (*other.Types)[i]
      if _tgt != _src108 { return false }
    }
  }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src109 := other.Members[i]
    if len(_tgt) != len(_src109) { return false }
    for i, _tgt := range _tgt {
      _src110 := _src109[i]
      if _tgt != _src110 { return false }
    }
  }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src111 := other.Index[i]
    if _tgt != _src111 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiHashRemRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiHashRemRequest(%+v)", *p)
}

// Attributes:
//  - Responses
//  - SubRequestIndices
type MultiHashRemResponse struct {
  Responses []*HashRemResponse `thrift:"responses,1,required" db:"responses" json:"responses"`
  SubRequestIndices []int32 `thrift:"sub_request_indices,2" db:"sub_request_indices" json:"sub_request_indices,omitempty"`
}

func NewMultiHashRemResponse() *MultiHashRemResponse {
  return &MultiHashRemResponse{}
}


func (p *MultiHashRemResponse) GetResponses() []*HashRemResponse {
  return p.Responses
}
var MultiHashRemResponse_SubRequestIndices_DEFAULT []int32

func (p *MultiHashRemResponse) GetSubRequestIndices() []int32 {
  return p.SubRequestIndices
}
func (p *MultiHashRemResponse) IsSetSubRequestIndices() bool {
  return p.SubRequestIndices != nil
}

func (p *MultiHashRemResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResponses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Responses is not set"));
  }
  return nil
}

func (p *MultiHashRemResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HashRemResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem112 := &HashRemResponse{}
    if err := _elem112.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem112), err)
    }
    p.Responses = append(p.Responses, _elem112)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashRemResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SubRequestIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem113 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem113 = v
}
    p.SubRequestIndices = append(p.SubRequestIndices, _elem113)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashRemResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiHashRemResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiHashRemResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *MultiHashRemResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSubRequestIndices() {
    if err := oprot.WriteFieldBegin(ctx, "sub_request_indices", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_request_indices: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SubRequestIndices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SubRequestIndices {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_request_indices: ", p), err) }
  }
  return err
}

func (p *MultiHashRemResponse) Equals(other *MultiHashRemResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Responses) != len(other.Responses) { return false }
  for i, _tgt := range p.Responses {
    _src114 := other.Responses[i]
    if !_tgt.Equals(_src114) { return false }
  }
  if len(p.SubRequestIndices) != len(other.SubRequestIndices) { return false }
  for i, _tgt := range p.SubRequestIndices {
    _src115 := other.SubRequestIndices[i]
    if _tgt != _src115 { return false }
  }
  return true
}

func (p *MultiHashRemResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiHashRemResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Type
//  - Members
//  - NeedRouting
//  - MaxNums
type HashGetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Type HashType `thrift:"type,3,required" db:"type" json:"type"`
  Members []string `thrift:"members,4" db:"members" json:"members,omitempty"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
  MaxNums int32 `thrift:"max_nums,6" db:"max_nums" json:"max_nums"`
}

func NewHashGetRequest() *HashGetRequest {
  return &HashGetRequest{
Segment: "default",

Type: 0,

NeedRouting: true,

MaxNums: 5000,
}
}

var HashGetRequest_Segment_DEFAULT string = "default"

func (p *HashGetRequest) GetSegment() string {
  return p.Segment
}

func (p *HashGetRequest) GetKey() string {
  return p.Key
}

func (p *HashGetRequest) GetType() HashType {
  return p.Type
}
var HashGetRequest_Members_DEFAULT []string

func (p *HashGetRequest) GetMembers() []string {
  return p.Members
}
var HashGetRequest_NeedRouting_DEFAULT bool = true

func (p *HashGetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
var HashGetRequest_MaxNums_DEFAULT int32 = 5000

func (p *HashGetRequest) GetMaxNums() int32 {
  return p.MaxNums
}
func (p *HashGetRequest) IsSetSegment() bool {
  return p.Segment != HashGetRequest_Segment_DEFAULT
}

func (p *HashGetRequest) IsSetMembers() bool {
  return p.Members != nil
}

func (p *HashGetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != HashGetRequest_NeedRouting_DEFAULT
}

func (p *HashGetRequest) IsSetMaxNums() bool {
  return p.MaxNums != HashGetRequest_MaxNums_DEFAULT
}

func (p *HashGetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *HashGetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *HashGetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *HashGetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := HashType(v)
  p.Type = temp
}
  return nil
}

func (p *HashGetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem116 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem116 = v
}
    p.Members = append(p.Members, _elem116)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HashGetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *HashGetRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *HashGetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HashGetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashGetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *HashGetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *HashGetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *HashGetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMembers() {
    if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Members {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  }
  return err
}

func (p *HashGetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *HashGetRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_nums: ", p), err) }
  }
  return err
}

func (p *HashGetRequest) Equals(other *HashGetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.Type != other.Type { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src117 := other.Members[i]
    if _tgt != _src117 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  if p.MaxNums != other.MaxNums { return false }
  return true
}

func (p *HashGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashGetRequest(%+v)", *p)
}

// Attributes:
//  - Members
//  - Values
//  - Error
type HashGetResponse struct {
  Members []string `thrift:"members,1,required" db:"members" json:"members"`
  Values []*HashValue `thrift:"values,2,required" db:"values" json:"values"`
  Error *SharestoreException `thrift:"error,3" db:"error" json:"error,omitempty"`
}

func NewHashGetResponse() *HashGetResponse {
  return &HashGetResponse{}
}


func (p *HashGetResponse) GetMembers() []string {
  return p.Members
}

func (p *HashGetResponse) GetValues() []*HashValue {
  return p.Values
}
var HashGetResponse_Error_DEFAULT *SharestoreException
func (p *HashGetResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return HashGetResponse_Error_DEFAULT
  }
return p.Error
}
func (p *HashGetResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *HashGetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMembers bool = false;
  var issetValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  return nil
}

func (p *HashGetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem118 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem118 = v
}
    p.Members = append(p.Members, _elem118)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HashGetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HashValue, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
    _elem119 := &HashValue{}
    if err := _elem119.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem119), err)
    }
    p.Values = append(p.Values, _elem119)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HashGetResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *HashGetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HashGetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashGetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:members: ", p), err) }
  return err
}

func (p *HashGetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:values: ", p), err) }
  return err
}

func (p *HashGetResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error: ", p), err) }
  }
  return err
}

func (p *HashGetResponse) Equals(other *HashGetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src120 := other.Members[i]
    if _tgt != _src120 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src121 := other.Values[i]
    if !_tgt.Equals(_src121) { return false }
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *HashGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashGetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
//  - Types
//  - Members
//  - MaxNums
//  - Index
//  - NeedRouting
type MultiHashGetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Keys []string `thrift:"keys,2,required" db:"keys" json:"keys"`
  Types []HashType `thrift:"types,3,required" db:"types" json:"types"`
  Members [][]string `thrift:"members,4" db:"members" json:"members,omitempty"`
  MaxNums int32 `thrift:"max_nums,5" db:"max_nums" json:"max_nums"`
  Index []int32 `thrift:"index,6" db:"index" json:"index,omitempty"`
  NeedRouting bool `thrift:"need_routing,7" db:"need_routing" json:"need_routing"`
}

func NewMultiHashGetRequest() *MultiHashGetRequest {
  return &MultiHashGetRequest{
Segment: "default",

Types: []HashType{
},

MaxNums: 5000,

NeedRouting: true,
}
}

var MultiHashGetRequest_Segment_DEFAULT string = "default"

func (p *MultiHashGetRequest) GetSegment() string {
  return p.Segment
}

func (p *MultiHashGetRequest) GetKeys() []string {
  return p.Keys
}

func (p *MultiHashGetRequest) GetTypes() []HashType {
  return p.Types
}
var MultiHashGetRequest_Members_DEFAULT [][]string

func (p *MultiHashGetRequest) GetMembers() [][]string {
  return p.Members
}
var MultiHashGetRequest_MaxNums_DEFAULT int32 = 5000

func (p *MultiHashGetRequest) GetMaxNums() int32 {
  return p.MaxNums
}
var MultiHashGetRequest_Index_DEFAULT []int32

func (p *MultiHashGetRequest) GetIndex() []int32 {
  return p.Index
}
var MultiHashGetRequest_NeedRouting_DEFAULT bool = true

func (p *MultiHashGetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *MultiHashGetRequest) IsSetSegment() bool {
  return p.Segment != MultiHashGetRequest_Segment_DEFAULT
}

func (p *MultiHashGetRequest) IsSetMembers() bool {
  return p.Members != nil
}

func (p *MultiHashGetRequest) IsSetMaxNums() bool {
  return p.MaxNums != MultiHashGetRequest_MaxNums_DEFAULT
}

func (p *MultiHashGetRequest) IsSetIndex() bool {
  return p.Index != nil
}

func (p *MultiHashGetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != MultiHashGetRequest_NeedRouting_DEFAULT
}

func (p *MultiHashGetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKeys bool = false;
  var issetTypes bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTypes = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"));
  }
  if !issetTypes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Types is not set"));
  }
  return nil
}

func (p *MultiHashGetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiHashGetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem122 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem122 = v
}
    p.Keys = append(p.Keys, _elem122)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashGetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]HashType, 0, size)
  p.Types =  tSlice
  for i := 0; i < size; i ++ {
var _elem123 HashType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := HashType(v)
    _elem123 = temp
}
    p.Types = append(p.Types, _elem123)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashGetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _elem124 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem125 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem125 = v
}
      _elem124 = append(_elem124, _elem125)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Members = append(p.Members, _elem124)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashGetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *MultiHashGetRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Index =  tSlice
  for i := 0; i < size; i ++ {
var _elem126 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem126 = v
}
    p.Index = append(p.Index, _elem126)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashGetRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *MultiHashGetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiHashGetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiHashGetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *MultiHashGetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiHashGetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "types", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:types: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Types)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Types {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:types: ", p), err) }
  return err
}

func (p *MultiHashGetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMembers() {
    if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.LIST, len(p.Members)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Members {
      if err := oprot.WriteListBegin(ctx, thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := oprot.WriteString(ctx, string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteListEnd(ctx); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  }
  return err
}

func (p *MultiHashGetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_nums: ", p), err) }
  }
  return err
}

func (p *MultiHashGetRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:index: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Index)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Index {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:index: ", p), err) }
  }
  return err
}

func (p *MultiHashGetRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:need_routing: ", p), err) }
  }
  return err
}

func (p *MultiHashGetRequest) Equals(other *MultiHashGetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src127 := other.Keys[i]
    if _tgt != _src127 { return false }
  }
  if len(p.Types) != len(other.Types) { return false }
  for i, _tgt := range p.Types {
    _src128 := other.Types[i]
    if _tgt != _src128 { return false }
  }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src129 := other.Members[i]
    if len(_tgt) != len(_src129) { return false }
    for i, _tgt := range _tgt {
      _src130 := _src129[i]
      if _tgt != _src130 { return false }
    }
  }
  if p.MaxNums != other.MaxNums { return false }
  if len(p.Index) != len(other.Index) { return false }
  for i, _tgt := range p.Index {
    _src131 := other.Index[i]
    if _tgt != _src131 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *MultiHashGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiHashGetRequest(%+v)", *p)
}

// Attributes:
//  - Responses
//  - SubRequestIndices
type MultiHashGetResponse struct {
  Responses []*HashGetResponse `thrift:"responses,1,required" db:"responses" json:"responses"`
  SubRequestIndices []int32 `thrift:"sub_request_indices,2" db:"sub_request_indices" json:"sub_request_indices,omitempty"`
}

func NewMultiHashGetResponse() *MultiHashGetResponse {
  return &MultiHashGetResponse{}
}


func (p *MultiHashGetResponse) GetResponses() []*HashGetResponse {
  return p.Responses
}
var MultiHashGetResponse_SubRequestIndices_DEFAULT []int32

func (p *MultiHashGetResponse) GetSubRequestIndices() []int32 {
  return p.SubRequestIndices
}
func (p *MultiHashGetResponse) IsSetSubRequestIndices() bool {
  return p.SubRequestIndices != nil
}

func (p *MultiHashGetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResponses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Responses is not set"));
  }
  return nil
}

func (p *MultiHashGetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HashGetResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem132 := &HashGetResponse{}
    if err := _elem132.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem132), err)
    }
    p.Responses = append(p.Responses, _elem132)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashGetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SubRequestIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem133 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem133 = v
}
    p.SubRequestIndices = append(p.SubRequestIndices, _elem133)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiHashGetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultiHashGetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiHashGetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *MultiHashGetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSubRequestIndices() {
    if err := oprot.WriteFieldBegin(ctx, "sub_request_indices", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_request_indices: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SubRequestIndices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SubRequestIndices {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_request_indices: ", p), err) }
  }
  return err
}

func (p *MultiHashGetResponse) Equals(other *MultiHashGetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Responses) != len(other.Responses) { return false }
  for i, _tgt := range p.Responses {
    _src134 := other.Responses[i]
    if !_tgt.Equals(_src134) { return false }
  }
  if len(p.SubRequestIndices) != len(other.SubRequestIndices) { return false }
  for i, _tgt := range p.SubRequestIndices {
    _src135 := other.SubRequestIndices[i]
    if _tgt != _src135 { return false }
  }
  return true
}

func (p *MultiHashGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiHashGetResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Type
//  - NeedRouting
//  - MaxNums
type HashCountRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Type HashType `thrift:"type,3,required" db:"type" json:"type"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
  MaxNums int32 `thrift:"max_nums,5" db:"max_nums" json:"max_nums"`
}

func NewHashCountRequest() *HashCountRequest {
  return &HashCountRequest{
Segment: "default",

Type: 0,

NeedRouting: true,

MaxNums: 5000,
}
}

var HashCountRequest_Segment_DEFAULT string = "default"

func (p *HashCountRequest) GetSegment() string {
  return p.Segment
}

func (p *HashCountRequest) GetKey() string {
  return p.Key
}

func (p *HashCountRequest) GetType() HashType {
  return p.Type
}
var HashCountRequest_NeedRouting_DEFAULT bool = true

func (p *HashCountRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
var HashCountRequest_MaxNums_DEFAULT int32 = 5000

func (p *HashCountRequest) GetMaxNums() int32 {
  return p.MaxNums
}
func (p *HashCountRequest) IsSetSegment() bool {
  return p.Segment != HashCountRequest_Segment_DEFAULT
}

func (p *HashCountRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != HashCountRequest_NeedRouting_DEFAULT
}

func (p *HashCountRequest) IsSetMaxNums() bool {
  return p.MaxNums != HashCountRequest_MaxNums_DEFAULT
}

func (p *HashCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *HashCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *HashCountRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *HashCountRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := HashType(v)
  p.Type = temp
}
  return nil
}

func (p *HashCountRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *HashCountRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *HashCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HashCountRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *HashCountRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *HashCountRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *HashCountRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *HashCountRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_nums: ", p), err) }
  }
  return err
}

func (p *HashCountRequest) Equals(other *HashCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.Type != other.Type { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  if p.MaxNums != other.MaxNums { return false }
  return true
}

func (p *HashCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashCountRequest(%+v)", *p)
}

// Attributes:
//  - Count
//  - Error
type HashCountResponse struct {
  Count int32 `thrift:"count,1,required" db:"count" json:"count"`
  Error *SharestoreException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewHashCountResponse() *HashCountResponse {
  return &HashCountResponse{}
}


func (p *HashCountResponse) GetCount() int32 {
  return p.Count
}
var HashCountResponse_Error_DEFAULT *SharestoreException
func (p *HashCountResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return HashCountResponse_Error_DEFAULT
  }
return p.Error
}
func (p *HashCountResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *HashCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCount = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Count is not set"));
  }
  return nil
}

func (p *HashCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *HashCountResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *HashCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HashCountResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err) }
  return err
}

func (p *HashCountResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *HashCountResponse) Equals(other *HashCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Count != other.Count { return false }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *HashCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashCountResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Members
//  - Scores
//  - TTLSecs
//  - NeedRouting
type ZSetAddRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Members []string `thrift:"members,3,required" db:"members" json:"members"`
  Scores []int64 `thrift:"scores,4,required" db:"scores" json:"scores"`
  TTLSecs []int32 `thrift:"ttl_secs,5" db:"ttl_secs" json:"ttl_secs,omitempty"`
  NeedRouting bool `thrift:"need_routing,6" db:"need_routing" json:"need_routing"`
}

func NewZSetAddRequest() *ZSetAddRequest {
  return &ZSetAddRequest{
Segment: "default",

NeedRouting: true,
}
}

var ZSetAddRequest_Segment_DEFAULT string = "default"

func (p *ZSetAddRequest) GetSegment() string {
  return p.Segment
}

func (p *ZSetAddRequest) GetKey() string {
  return p.Key
}

func (p *ZSetAddRequest) GetMembers() []string {
  return p.Members
}

func (p *ZSetAddRequest) GetScores() []int64 {
  return p.Scores
}
var ZSetAddRequest_TTLSecs_DEFAULT []int32

func (p *ZSetAddRequest) GetTTLSecs() []int32 {
  return p.TTLSecs
}
var ZSetAddRequest_NeedRouting_DEFAULT bool = true

func (p *ZSetAddRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *ZSetAddRequest) IsSetSegment() bool {
  return p.Segment != ZSetAddRequest_Segment_DEFAULT
}

func (p *ZSetAddRequest) IsSetTTLSecs() bool {
  return p.TTLSecs != nil
}

func (p *ZSetAddRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != ZSetAddRequest_NeedRouting_DEFAULT
}

func (p *ZSetAddRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetMembers bool = false;
  var issetScores bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetScores = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  if !issetScores{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Scores is not set"));
  }
  return nil
}

func (p *ZSetAddRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ZSetAddRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ZSetAddRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem136 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem136 = v
}
    p.Members = append(p.Members, _elem136)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetAddRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Scores =  tSlice
  for i := 0; i < size; i ++ {
var _elem137 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem137 = v
}
    p.Scores = append(p.Scores, _elem137)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetAddRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TTLSecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem138 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem138 = v
}
    p.TTLSecs = append(p.TTLSecs, _elem138)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetAddRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *ZSetAddRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetAddRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetAddRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *ZSetAddRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ZSetAddRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:members: ", p), err) }
  return err
}

func (p *ZSetAddRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "scores", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:scores: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Scores)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Scores {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:scores: ", p), err) }
  return err
}

func (p *ZSetAddRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTTLSecs() {
    if err := oprot.WriteFieldBegin(ctx, "ttl_secs", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ttl_secs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TTLSecs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TTLSecs {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ttl_secs: ", p), err) }
  }
  return err
}

func (p *ZSetAddRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:need_routing: ", p), err) }
  }
  return err
}

func (p *ZSetAddRequest) Equals(other *ZSetAddRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src139 := other.Members[i]
    if _tgt != _src139 { return false }
  }
  if len(p.Scores) != len(other.Scores) { return false }
  for i, _tgt := range p.Scores {
    _src140 := other.Scores[i]
    if _tgt != _src140 { return false }
  }
  if len(p.TTLSecs) != len(other.TTLSecs) { return false }
  for i, _tgt := range p.TTLSecs {
    _src141 := other.TTLSecs[i]
    if _tgt != _src141 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *ZSetAddRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetAddRequest(%+v)", *p)
}

// Attributes:
//  - Error
type ZSetAddResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewZSetAddResponse() *ZSetAddResponse {
  return &ZSetAddResponse{}
}

var ZSetAddResponse_Error_DEFAULT *SharestoreException
func (p *ZSetAddResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return ZSetAddResponse_Error_DEFAULT
  }
return p.Error
}
func (p *ZSetAddResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *ZSetAddResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ZSetAddResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ZSetAddResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetAddResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetAddResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *ZSetAddResponse) Equals(other *ZSetAddResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *ZSetAddResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetAddResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Members
//  - NeedRouting
type ZSetRemRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Members []string `thrift:"members,3" db:"members" json:"members,omitempty"`
  NeedRouting bool `thrift:"need_routing,4" db:"need_routing" json:"need_routing"`
}

func NewZSetRemRequest() *ZSetRemRequest {
  return &ZSetRemRequest{
Segment: "default",

NeedRouting: true,
}
}

var ZSetRemRequest_Segment_DEFAULT string = "default"

func (p *ZSetRemRequest) GetSegment() string {
  return p.Segment
}

func (p *ZSetRemRequest) GetKey() string {
  return p.Key
}
var ZSetRemRequest_Members_DEFAULT []string

func (p *ZSetRemRequest) GetMembers() []string {
  return p.Members
}
var ZSetRemRequest_NeedRouting_DEFAULT bool = true

func (p *ZSetRemRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *ZSetRemRequest) IsSetSegment() bool {
  return p.Segment != ZSetRemRequest_Segment_DEFAULT
}

func (p *ZSetRemRequest) IsSetMembers() bool {
  return p.Members != nil
}

func (p *ZSetRemRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != ZSetRemRequest_NeedRouting_DEFAULT
}

func (p *ZSetRemRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *ZSetRemRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ZSetRemRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ZSetRemRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem142 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem142 = v
}
    p.Members = append(p.Members, _elem142)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetRemRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *ZSetRemRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetRemRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetRemRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *ZSetRemRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ZSetRemRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMembers() {
    if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:members: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Members {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:members: ", p), err) }
  }
  return err
}

func (p *ZSetRemRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:need_routing: ", p), err) }
  }
  return err
}

func (p *ZSetRemRequest) Equals(other *ZSetRemRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src143 := other.Members[i]
    if _tgt != _src143 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *ZSetRemRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetRemRequest(%+v)", *p)
}

// Attributes:
//  - Error
type ZSetRemResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewZSetRemResponse() *ZSetRemResponse {
  return &ZSetRemResponse{}
}

var ZSetRemResponse_Error_DEFAULT *SharestoreException
func (p *ZSetRemResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return ZSetRemResponse_Error_DEFAULT
  }
return p.Error
}
func (p *ZSetRemResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *ZSetRemResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ZSetRemResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ZSetRemResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetRemResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetRemResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *ZSetRemResponse) Equals(other *ZSetRemResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *ZSetRemResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetRemResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - WithScores
//  - Members
//  - NeedRouting
//  - MaxNums
type ZSetGetRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  WithScores bool `thrift:"with_scores,3,required" db:"with_scores" json:"with_scores"`
  Members []string `thrift:"members,4" db:"members" json:"members,omitempty"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
  MaxNums int32 `thrift:"max_nums,6" db:"max_nums" json:"max_nums"`
}

func NewZSetGetRequest() *ZSetGetRequest {
  return &ZSetGetRequest{
Segment: "default",

WithScores: true,

NeedRouting: true,

MaxNums: 5000,
}
}

var ZSetGetRequest_Segment_DEFAULT string = "default"

func (p *ZSetGetRequest) GetSegment() string {
  return p.Segment
}

func (p *ZSetGetRequest) GetKey() string {
  return p.Key
}

func (p *ZSetGetRequest) GetWithScores() bool {
  return p.WithScores
}
var ZSetGetRequest_Members_DEFAULT []string

func (p *ZSetGetRequest) GetMembers() []string {
  return p.Members
}
var ZSetGetRequest_NeedRouting_DEFAULT bool = true

func (p *ZSetGetRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
var ZSetGetRequest_MaxNums_DEFAULT int32 = 5000

func (p *ZSetGetRequest) GetMaxNums() int32 {
  return p.MaxNums
}
func (p *ZSetGetRequest) IsSetSegment() bool {
  return p.Segment != ZSetGetRequest_Segment_DEFAULT
}

func (p *ZSetGetRequest) IsSetMembers() bool {
  return p.Members != nil
}

func (p *ZSetGetRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != ZSetGetRequest_NeedRouting_DEFAULT
}

func (p *ZSetGetRequest) IsSetMaxNums() bool {
  return p.MaxNums != ZSetGetRequest_MaxNums_DEFAULT
}

func (p *ZSetGetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetWithScores bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetWithScores = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetWithScores{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WithScores is not set"));
  }
  return nil
}

func (p *ZSetGetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ZSetGetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ZSetGetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WithScores = v
}
  return nil
}

func (p *ZSetGetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem144 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem144 = v
}
    p.Members = append(p.Members, _elem144)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetGetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *ZSetGetRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *ZSetGetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetGetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetGetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *ZSetGetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ZSetGetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "with_scores", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:with_scores: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithScores)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.with_scores (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:with_scores: ", p), err) }
  return err
}

func (p *ZSetGetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMembers() {
    if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Members {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  }
  return err
}

func (p *ZSetGetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *ZSetGetRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_nums: ", p), err) }
  }
  return err
}

func (p *ZSetGetRequest) Equals(other *ZSetGetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.WithScores != other.WithScores { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src145 := other.Members[i]
    if _tgt != _src145 { return false }
  }
  if p.NeedRouting != other.NeedRouting { return false }
  if p.MaxNums != other.MaxNums { return false }
  return true
}

func (p *ZSetGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetGetRequest(%+v)", *p)
}

// Attributes:
//  - Members
//  - Scores
//  - Error
type ZSetGetResponse struct {
  Members []string `thrift:"members,1,required" db:"members" json:"members"`
  Scores []int64 `thrift:"scores,2" db:"scores" json:"scores,omitempty"`
  Error *SharestoreException `thrift:"error,3" db:"error" json:"error,omitempty"`
}

func NewZSetGetResponse() *ZSetGetResponse {
  return &ZSetGetResponse{}
}


func (p *ZSetGetResponse) GetMembers() []string {
  return p.Members
}
var ZSetGetResponse_Scores_DEFAULT []int64

func (p *ZSetGetResponse) GetScores() []int64 {
  return p.Scores
}
var ZSetGetResponse_Error_DEFAULT *SharestoreException
func (p *ZSetGetResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return ZSetGetResponse_Error_DEFAULT
  }
return p.Error
}
func (p *ZSetGetResponse) IsSetScores() bool {
  return p.Scores != nil
}

func (p *ZSetGetResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *ZSetGetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMembers bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  return nil
}

func (p *ZSetGetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem146 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem146 = v
}
    p.Members = append(p.Members, _elem146)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetGetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Scores =  tSlice
  for i := 0; i < size; i ++ {
var _elem147 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem147 = v
}
    p.Scores = append(p.Scores, _elem147)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetGetResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ZSetGetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetGetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetGetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:members: ", p), err) }
  return err
}

func (p *ZSetGetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetScores() {
    if err := oprot.WriteFieldBegin(ctx, "scores", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scores: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Scores)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Scores {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scores: ", p), err) }
  }
  return err
}

func (p *ZSetGetResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error: ", p), err) }
  }
  return err
}

func (p *ZSetGetResponse) Equals(other *ZSetGetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src148 := other.Members[i]
    if _tgt != _src148 { return false }
  }
  if len(p.Scores) != len(other.Scores) { return false }
  for i, _tgt := range p.Scores {
    _src149 := other.Scores[i]
    if _tgt != _src149 { return false }
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *ZSetGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetGetResponse(%+v)", *p)
}

// Attributes:
//  - Start
//  - Stop
type IndexRange struct {
  Start int32 `thrift:"start,1,required" db:"start" json:"start"`
  Stop int32 `thrift:"stop,2,required" db:"stop" json:"stop"`
}

func NewIndexRange() *IndexRange {
  return &IndexRange{
Stop: -1,
}
}


func (p *IndexRange) GetStart() int32 {
  return p.Start
}

func (p *IndexRange) GetStop() int32 {
  return p.Stop
}
func (p *IndexRange) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStart bool = false;
  var issetStop bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetStart = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetStop = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStart{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Start is not set"));
  }
  if !issetStop{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Stop is not set"));
  }
  return nil
}

func (p *IndexRange)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *IndexRange)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Stop = v
}
  return nil
}

func (p *IndexRange) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexRange) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err) }
  return err
}

func (p *IndexRange) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stop: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Stop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stop: ", p), err) }
  return err
}

func (p *IndexRange) Equals(other *IndexRange) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Start != other.Start { return false }
  if p.Stop != other.Stop { return false }
  return true
}

func (p *IndexRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexRange(%+v)", *p)
}

// Attributes:
//  - Min
//  - Max
type ScoreRange struct {
  Min int64 `thrift:"min,1,required" db:"min" json:"min"`
  Max int64 `thrift:"max,2,required" db:"max" json:"max"`
}

func NewScoreRange() *ScoreRange {
  return &ScoreRange{
Max: 9223372036854775807,
}
}


func (p *ScoreRange) GetMin() int64 {
  return p.Min
}

func (p *ScoreRange) GetMax() int64 {
  return p.Max
}
func (p *ScoreRange) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMin bool = false;
  var issetMax bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMin = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetMax = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMin{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Min is not set"));
  }
  if !issetMax{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Max is not set"));
  }
  return nil
}

func (p *ScoreRange)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Min = v
}
  return nil
}

func (p *ScoreRange)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Max = v
}
  return nil
}

func (p *ScoreRange) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ScoreRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScoreRange) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "min", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:min: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Min)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.min (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:min: ", p), err) }
  return err
}

func (p *ScoreRange) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Max)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max: ", p), err) }
  return err
}

func (p *ScoreRange) Equals(other *ScoreRange) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Min != other.Min { return false }
  if p.Max != other.Max { return false }
  return true
}

func (p *ScoreRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScoreRange(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - IndexRange
//  - ScoreRange
//  - WithScores
//  - NeedRouting
//  - MaxNums
type ZSetGetRangeRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  // unused field # 2
  Key string `thrift:"key,3,required" db:"key" json:"key"`
  IndexRange *IndexRange `thrift:"index_range,4" db:"index_range" json:"index_range,omitempty"`
  ScoreRange *ScoreRange `thrift:"score_range,5" db:"score_range" json:"score_range,omitempty"`
  WithScores bool `thrift:"with_scores,6" db:"with_scores" json:"with_scores"`
  NeedRouting bool `thrift:"need_routing,7" db:"need_routing" json:"need_routing"`
  MaxNums int32 `thrift:"max_nums,8" db:"max_nums" json:"max_nums"`
}

func NewZSetGetRangeRequest() *ZSetGetRangeRequest {
  return &ZSetGetRangeRequest{
Segment: "default",

WithScores: true,

NeedRouting: true,

MaxNums: 5000,
}
}

var ZSetGetRangeRequest_Segment_DEFAULT string = "default"

func (p *ZSetGetRangeRequest) GetSegment() string {
  return p.Segment
}

func (p *ZSetGetRangeRequest) GetKey() string {
  return p.Key
}
var ZSetGetRangeRequest_IndexRange_DEFAULT *IndexRange
func (p *ZSetGetRangeRequest) GetIndexRange() *IndexRange {
  if !p.IsSetIndexRange() {
    return ZSetGetRangeRequest_IndexRange_DEFAULT
  }
return p.IndexRange
}
var ZSetGetRangeRequest_ScoreRange_DEFAULT *ScoreRange
func (p *ZSetGetRangeRequest) GetScoreRange() *ScoreRange {
  if !p.IsSetScoreRange() {
    return ZSetGetRangeRequest_ScoreRange_DEFAULT
  }
return p.ScoreRange
}
var ZSetGetRangeRequest_WithScores_DEFAULT bool = true

func (p *ZSetGetRangeRequest) GetWithScores() bool {
  return p.WithScores
}
var ZSetGetRangeRequest_NeedRouting_DEFAULT bool = true

func (p *ZSetGetRangeRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
var ZSetGetRangeRequest_MaxNums_DEFAULT int32 = 5000

func (p *ZSetGetRangeRequest) GetMaxNums() int32 {
  return p.MaxNums
}
func (p *ZSetGetRangeRequest) IsSetSegment() bool {
  return p.Segment != ZSetGetRangeRequest_Segment_DEFAULT
}

func (p *ZSetGetRangeRequest) IsSetIndexRange() bool {
  return p.IndexRange != nil
}

func (p *ZSetGetRangeRequest) IsSetScoreRange() bool {
  return p.ScoreRange != nil
}

func (p *ZSetGetRangeRequest) IsSetWithScores() bool {
  return p.WithScores != ZSetGetRangeRequest_WithScores_DEFAULT
}

func (p *ZSetGetRangeRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != ZSetGetRangeRequest_NeedRouting_DEFAULT
}

func (p *ZSetGetRangeRequest) IsSetMaxNums() bool {
  return p.MaxNums != ZSetGetRangeRequest_MaxNums_DEFAULT
}

func (p *ZSetGetRangeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *ZSetGetRangeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ZSetGetRangeRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ZSetGetRangeRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.IndexRange = &IndexRange{
  Stop: -1,
}
  if err := p.IndexRange.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexRange), err)
  }
  return nil
}

func (p *ZSetGetRangeRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.ScoreRange = &ScoreRange{
  Max: 9223372036854775807,
}
  if err := p.ScoreRange.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ScoreRange), err)
  }
  return nil
}

func (p *ZSetGetRangeRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.WithScores = v
}
  return nil
}

func (p *ZSetGetRangeRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *ZSetGetRangeRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *ZSetGetRangeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetGetRangeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetGetRangeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *ZSetGetRangeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err) }
  return err
}

func (p *ZSetGetRangeRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndexRange() {
    if err := oprot.WriteFieldBegin(ctx, "index_range", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:index_range: ", p), err) }
    if err := p.IndexRange.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexRange), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:index_range: ", p), err) }
  }
  return err
}

func (p *ZSetGetRangeRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetScoreRange() {
    if err := oprot.WriteFieldBegin(ctx, "score_range", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:score_range: ", p), err) }
    if err := p.ScoreRange.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ScoreRange), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:score_range: ", p), err) }
  }
  return err
}

func (p *ZSetGetRangeRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetWithScores() {
    if err := oprot.WriteFieldBegin(ctx, "with_scores", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:with_scores: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.WithScores)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.with_scores (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:with_scores: ", p), err) }
  }
  return err
}

func (p *ZSetGetRangeRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:need_routing: ", p), err) }
  }
  return err
}

func (p *ZSetGetRangeRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:max_nums: ", p), err) }
  }
  return err
}

func (p *ZSetGetRangeRequest) Equals(other *ZSetGetRangeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if !p.IndexRange.Equals(other.IndexRange) { return false }
  if !p.ScoreRange.Equals(other.ScoreRange) { return false }
  if p.WithScores != other.WithScores { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  if p.MaxNums != other.MaxNums { return false }
  return true
}

func (p *ZSetGetRangeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetGetRangeRequest(%+v)", *p)
}

// Attributes:
//  - Members
//  - Scores
//  - Error
type ZSetGetRangeResponse struct {
  Members []string `thrift:"members,1,required" db:"members" json:"members"`
  Scores []int64 `thrift:"scores,2" db:"scores" json:"scores,omitempty"`
  Error *SharestoreException `thrift:"error,3" db:"error" json:"error,omitempty"`
}

func NewZSetGetRangeResponse() *ZSetGetRangeResponse {
  return &ZSetGetRangeResponse{}
}


func (p *ZSetGetRangeResponse) GetMembers() []string {
  return p.Members
}
var ZSetGetRangeResponse_Scores_DEFAULT []int64

func (p *ZSetGetRangeResponse) GetScores() []int64 {
  return p.Scores
}
var ZSetGetRangeResponse_Error_DEFAULT *SharestoreException
func (p *ZSetGetRangeResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return ZSetGetRangeResponse_Error_DEFAULT
  }
return p.Error
}
func (p *ZSetGetRangeResponse) IsSetScores() bool {
  return p.Scores != nil
}

func (p *ZSetGetRangeResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *ZSetGetRangeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMembers bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  return nil
}

func (p *ZSetGetRangeResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem150 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem150 = v
}
    p.Members = append(p.Members, _elem150)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetGetRangeResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Scores =  tSlice
  for i := 0; i < size; i ++ {
var _elem151 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem151 = v
}
    p.Scores = append(p.Scores, _elem151)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetGetRangeResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ZSetGetRangeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetGetRangeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetGetRangeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:members: ", p), err) }
  return err
}

func (p *ZSetGetRangeResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetScores() {
    if err := oprot.WriteFieldBegin(ctx, "scores", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scores: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Scores)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Scores {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scores: ", p), err) }
  }
  return err
}

func (p *ZSetGetRangeResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error: ", p), err) }
  }
  return err
}

func (p *ZSetGetRangeResponse) Equals(other *ZSetGetRangeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src152 := other.Members[i]
    if _tgt != _src152 { return false }
  }
  if len(p.Scores) != len(other.Scores) { return false }
  for i, _tgt := range p.Scores {
    _src153 := other.Scores[i]
    if _tgt != _src153 { return false }
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *ZSetGetRangeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetGetRangeResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - IndexRange
//  - ScoreRange
//  - NeedRouting
type ZSetRemRangeRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  IndexRange *IndexRange `thrift:"index_range,3" db:"index_range" json:"index_range,omitempty"`
  ScoreRange *ScoreRange `thrift:"score_range,4" db:"score_range" json:"score_range,omitempty"`
  NeedRouting bool `thrift:"need_routing,5" db:"need_routing" json:"need_routing"`
}

func NewZSetRemRangeRequest() *ZSetRemRangeRequest {
  return &ZSetRemRangeRequest{
Segment: "default",

NeedRouting: true,
}
}

var ZSetRemRangeRequest_Segment_DEFAULT string = "default"

func (p *ZSetRemRangeRequest) GetSegment() string {
  return p.Segment
}

func (p *ZSetRemRangeRequest) GetKey() string {
  return p.Key
}
var ZSetRemRangeRequest_IndexRange_DEFAULT *IndexRange
func (p *ZSetRemRangeRequest) GetIndexRange() *IndexRange {
  if !p.IsSetIndexRange() {
    return ZSetRemRangeRequest_IndexRange_DEFAULT
  }
return p.IndexRange
}
var ZSetRemRangeRequest_ScoreRange_DEFAULT *ScoreRange
func (p *ZSetRemRangeRequest) GetScoreRange() *ScoreRange {
  if !p.IsSetScoreRange() {
    return ZSetRemRangeRequest_ScoreRange_DEFAULT
  }
return p.ScoreRange
}
var ZSetRemRangeRequest_NeedRouting_DEFAULT bool = true

func (p *ZSetRemRangeRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
func (p *ZSetRemRangeRequest) IsSetSegment() bool {
  return p.Segment != ZSetRemRangeRequest_Segment_DEFAULT
}

func (p *ZSetRemRangeRequest) IsSetIndexRange() bool {
  return p.IndexRange != nil
}

func (p *ZSetRemRangeRequest) IsSetScoreRange() bool {
  return p.ScoreRange != nil
}

func (p *ZSetRemRangeRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != ZSetRemRangeRequest_NeedRouting_DEFAULT
}

func (p *ZSetRemRangeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *ZSetRemRangeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ZSetRemRangeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ZSetRemRangeRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.IndexRange = &IndexRange{
  Stop: -1,
}
  if err := p.IndexRange.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexRange), err)
  }
  return nil
}

func (p *ZSetRemRangeRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.ScoreRange = &ScoreRange{
  Max: 9223372036854775807,
}
  if err := p.ScoreRange.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ScoreRange), err)
  }
  return nil
}

func (p *ZSetRemRangeRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *ZSetRemRangeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetRemRangeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetRemRangeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *ZSetRemRangeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ZSetRemRangeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndexRange() {
    if err := oprot.WriteFieldBegin(ctx, "index_range", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_range: ", p), err) }
    if err := p.IndexRange.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexRange), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_range: ", p), err) }
  }
  return err
}

func (p *ZSetRemRangeRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetScoreRange() {
    if err := oprot.WriteFieldBegin(ctx, "score_range", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:score_range: ", p), err) }
    if err := p.ScoreRange.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ScoreRange), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:score_range: ", p), err) }
  }
  return err
}

func (p *ZSetRemRangeRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:need_routing: ", p), err) }
  }
  return err
}

func (p *ZSetRemRangeRequest) Equals(other *ZSetRemRangeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if !p.IndexRange.Equals(other.IndexRange) { return false }
  if !p.ScoreRange.Equals(other.ScoreRange) { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  return true
}

func (p *ZSetRemRangeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetRemRangeRequest(%+v)", *p)
}

// Attributes:
//  - Error
type ZSetRemRangeResponse struct {
  Error *SharestoreException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewZSetRemRangeResponse() *ZSetRemRangeResponse {
  return &ZSetRemRangeResponse{}
}

var ZSetRemRangeResponse_Error_DEFAULT *SharestoreException
func (p *ZSetRemRangeResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return ZSetRemRangeResponse_Error_DEFAULT
  }
return p.Error
}
func (p *ZSetRemRangeResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *ZSetRemRangeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ZSetRemRangeResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ZSetRemRangeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetRemRangeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetRemRangeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *ZSetRemRangeResponse) Equals(other *ZSetRemRangeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *ZSetRemRangeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetRemRangeResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - NeedRouting
//  - MaxNums
type ZSetCountRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  NeedRouting bool `thrift:"need_routing,3" db:"need_routing" json:"need_routing"`
  MaxNums int32 `thrift:"max_nums,4" db:"max_nums" json:"max_nums"`
}

func NewZSetCountRequest() *ZSetCountRequest {
  return &ZSetCountRequest{
Segment: "default",

NeedRouting: true,

MaxNums: 5000,
}
}

var ZSetCountRequest_Segment_DEFAULT string = "default"

func (p *ZSetCountRequest) GetSegment() string {
  return p.Segment
}

func (p *ZSetCountRequest) GetKey() string {
  return p.Key
}
var ZSetCountRequest_NeedRouting_DEFAULT bool = true

func (p *ZSetCountRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
var ZSetCountRequest_MaxNums_DEFAULT int32 = 5000

func (p *ZSetCountRequest) GetMaxNums() int32 {
  return p.MaxNums
}
func (p *ZSetCountRequest) IsSetSegment() bool {
  return p.Segment != ZSetCountRequest_Segment_DEFAULT
}

func (p *ZSetCountRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != ZSetCountRequest_NeedRouting_DEFAULT
}

func (p *ZSetCountRequest) IsSetMaxNums() bool {
  return p.MaxNums != ZSetCountRequest_MaxNums_DEFAULT
}

func (p *ZSetCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *ZSetCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ZSetCountRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ZSetCountRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *ZSetCountRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *ZSetCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetCountRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *ZSetCountRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ZSetCountRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:need_routing: ", p), err) }
  }
  return err
}

func (p *ZSetCountRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_nums: ", p), err) }
  }
  return err
}

func (p *ZSetCountRequest) Equals(other *ZSetCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  if p.MaxNums != other.MaxNums { return false }
  return true
}

func (p *ZSetCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetCountRequest(%+v)", *p)
}

// Attributes:
//  - Count
//  - Error
type ZSetCountResponse struct {
  Count int32 `thrift:"count,1,required" db:"count" json:"count"`
  Error *SharestoreException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewZSetCountResponse() *ZSetCountResponse {
  return &ZSetCountResponse{}
}


func (p *ZSetCountResponse) GetCount() int32 {
  return p.Count
}
var ZSetCountResponse_Error_DEFAULT *SharestoreException
func (p *ZSetCountResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return ZSetCountResponse_Error_DEFAULT
  }
return p.Error
}
func (p *ZSetCountResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *ZSetCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCount = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Count is not set"));
  }
  return nil
}

func (p *ZSetCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *ZSetCountResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ZSetCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetCountResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err) }
  return err
}

func (p *ZSetCountResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *ZSetCountResponse) Equals(other *ZSetCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Count != other.Count { return false }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *ZSetCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetCountResponse(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
//  - Cursor
//  - WithScores
//  - IsReverse
//  - NeedRouting
//  - MaxNums
type ZSetScanRequest struct {
  Segment string `thrift:"segment,1" db:"segment" json:"segment"`
  Key string `thrift:"key,2,required" db:"key" json:"key"`
  Cursor IOBufPtr `thrift:"cursor,3" db:"cursor" json:"cursor,omitempty"`
  WithScores bool `thrift:"with_scores,4" db:"with_scores" json:"with_scores"`
  IsReverse bool `thrift:"is_reverse,5" db:"is_reverse" json:"is_reverse"`
  NeedRouting bool `thrift:"need_routing,6" db:"need_routing" json:"need_routing"`
  MaxNums int32 `thrift:"max_nums,7" db:"max_nums" json:"max_nums"`
}

func NewZSetScanRequest() *ZSetScanRequest {
  return &ZSetScanRequest{
Segment: "default",

WithScores: true,

NeedRouting: true,

MaxNums: 5000,
}
}

var ZSetScanRequest_Segment_DEFAULT string = "default"

func (p *ZSetScanRequest) GetSegment() string {
  return p.Segment
}

func (p *ZSetScanRequest) GetKey() string {
  return p.Key
}
var ZSetScanRequest_Cursor_DEFAULT IOBufPtr

func (p *ZSetScanRequest) GetCursor() IOBufPtr {
  return p.Cursor
}
var ZSetScanRequest_WithScores_DEFAULT bool = true

func (p *ZSetScanRequest) GetWithScores() bool {
  return p.WithScores
}
var ZSetScanRequest_IsReverse_DEFAULT bool = false

func (p *ZSetScanRequest) GetIsReverse() bool {
  return p.IsReverse
}
var ZSetScanRequest_NeedRouting_DEFAULT bool = true

func (p *ZSetScanRequest) GetNeedRouting() bool {
  return p.NeedRouting
}
var ZSetScanRequest_MaxNums_DEFAULT int32 = 5000

func (p *ZSetScanRequest) GetMaxNums() int32 {
  return p.MaxNums
}
func (p *ZSetScanRequest) IsSetSegment() bool {
  return p.Segment != ZSetScanRequest_Segment_DEFAULT
}

func (p *ZSetScanRequest) IsSetCursor() bool {
  return p.Cursor != nil
}

func (p *ZSetScanRequest) IsSetWithScores() bool {
  return p.WithScores != ZSetScanRequest_WithScores_DEFAULT
}

func (p *ZSetScanRequest) IsSetIsReverse() bool {
  return p.IsReverse != ZSetScanRequest_IsReverse_DEFAULT
}

func (p *ZSetScanRequest) IsSetNeedRouting() bool {
  return p.NeedRouting != ZSetScanRequest_NeedRouting_DEFAULT
}

func (p *ZSetScanRequest) IsSetMaxNums() bool {
  return p.MaxNums != ZSetScanRequest_MaxNums_DEFAULT
}

func (p *ZSetScanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  return nil
}

func (p *ZSetScanRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ZSetScanRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ZSetScanRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := IOBufPtr(v)
  p.Cursor = temp
}
  return nil
}

func (p *ZSetScanRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.WithScores = v
}
  return nil
}

func (p *ZSetScanRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsReverse = v
}
  return nil
}

func (p *ZSetScanRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NeedRouting = v
}
  return nil
}

func (p *ZSetScanRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MaxNums = v
}
  return nil
}

func (p *ZSetScanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetScanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetScanRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSegment() {
    if err := oprot.WriteFieldBegin(ctx, "segment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.Segment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  }
  return err
}

func (p *ZSetScanRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ZSetScanRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCursor() {
    if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cursor: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Cursor); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cursor (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cursor: ", p), err) }
  }
  return err
}

func (p *ZSetScanRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetWithScores() {
    if err := oprot.WriteFieldBegin(ctx, "with_scores", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:with_scores: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.WithScores)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.with_scores (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:with_scores: ", p), err) }
  }
  return err
}

func (p *ZSetScanRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsReverse() {
    if err := oprot.WriteFieldBegin(ctx, "is_reverse", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_reverse: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.IsReverse)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.is_reverse (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_reverse: ", p), err) }
  }
  return err
}

func (p *ZSetScanRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedRouting() {
    if err := oprot.WriteFieldBegin(ctx, "need_routing", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:need_routing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedRouting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.need_routing (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:need_routing: ", p), err) }
  }
  return err
}

func (p *ZSetScanRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNums() {
    if err := oprot.WriteFieldBegin(ctx, "max_nums", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:max_nums: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.MaxNums)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_nums (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:max_nums: ", p), err) }
  }
  return err
}

func (p *ZSetScanRequest) Equals(other *ZSetScanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Segment != other.Segment { return false }
  if p.Key != other.Key { return false }
  if bytes.Compare(p.Cursor, other.Cursor) != 0 { return false }
  if p.WithScores != other.WithScores { return false }
  if p.IsReverse != other.IsReverse { return false }
  if p.NeedRouting != other.NeedRouting { return false }
  if p.MaxNums != other.MaxNums { return false }
  return true
}

func (p *ZSetScanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetScanRequest(%+v)", *p)
}

// Attributes:
//  - Members
//  - Scores
//  - Cursor
//  - Error
type ZSetScanResponse struct {
  Members []string `thrift:"members,1,required" db:"members" json:"members"`
  Scores []int64 `thrift:"scores,2" db:"scores" json:"scores,omitempty"`
  Cursor IOBufPtr `thrift:"cursor,3" db:"cursor" json:"cursor,omitempty"`
  Error *SharestoreException `thrift:"error,4" db:"error" json:"error,omitempty"`
}

func NewZSetScanResponse() *ZSetScanResponse {
  return &ZSetScanResponse{}
}


func (p *ZSetScanResponse) GetMembers() []string {
  return p.Members
}
var ZSetScanResponse_Scores_DEFAULT []int64

func (p *ZSetScanResponse) GetScores() []int64 {
  return p.Scores
}
var ZSetScanResponse_Cursor_DEFAULT IOBufPtr

func (p *ZSetScanResponse) GetCursor() IOBufPtr {
  return p.Cursor
}
var ZSetScanResponse_Error_DEFAULT *SharestoreException
func (p *ZSetScanResponse) GetError() *SharestoreException {
  if !p.IsSetError() {
    return ZSetScanResponse_Error_DEFAULT
  }
return p.Error
}
func (p *ZSetScanResponse) IsSetScores() bool {
  return p.Scores != nil
}

func (p *ZSetScanResponse) IsSetCursor() bool {
  return p.Cursor != nil
}

func (p *ZSetScanResponse) IsSetError() bool {
  return p.Error != nil
}

func (p *ZSetScanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMembers bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMembers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMembers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Members is not set"));
  }
  return nil
}

func (p *ZSetScanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem154 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem154 = v
}
    p.Members = append(p.Members, _elem154)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetScanResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Scores =  tSlice
  for i := 0; i < size; i ++ {
var _elem155 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem155 = v
}
    p.Scores = append(p.Scores, _elem155)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ZSetScanResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := IOBufPtr(v)
  p.Cursor = temp
}
  return nil
}

func (p *ZSetScanResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &SharestoreException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ZSetScanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ZSetScanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ZSetScanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:members: ", p), err) }
  return err
}

func (p *ZSetScanResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetScores() {
    if err := oprot.WriteFieldBegin(ctx, "scores", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scores: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Scores)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Scores {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scores: ", p), err) }
  }
  return err
}

func (p *ZSetScanResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCursor() {
    if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cursor: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Cursor); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cursor (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cursor: ", p), err) }
  }
  return err
}

func (p *ZSetScanResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:error: ", p), err) }
  }
  return err
}

func (p *ZSetScanResponse) Equals(other *ZSetScanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src156 := other.Members[i]
    if _tgt != _src156 { return false }
  }
  if len(p.Scores) != len(other.Scores) { return false }
  for i, _tgt := range p.Scores {
    _src157 := other.Scores[i]
    if _tgt != _src157 { return false }
  }
  if bytes.Compare(p.Cursor, other.Cursor) != 0 { return false }
  if !p.Error.Equals(other.Error) { return false }
  return true
}

func (p *ZSetScanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ZSetScanResponse(%+v)", *p)
}

type Sharestore interface {
  // Parameters:
  //  - Request
  GetValue(ctx context.Context, request *GetRequest) (r *GetResponse, err error)
  // Parameters:
  //  - Request
  TTL(ctx context.Context, request *TtlRequest) (r *TtlResponse, err error)
  // Parameters:
  //  - Request
  SetValue(ctx context.Context, request *SetRequest) (r *SetResponse, err error)
  // Parameters:
  //  - Request
  DelValue(ctx context.Context, request *DelRequest) (r *DelResponse, err error)
  // Parameters:
  //  - Mrequest
  MultiGetValue(ctx context.Context, mrequest *MultiGetRequest) (r *MultiGetResponse, err error)
  // Parameters:
  //  - Msequest
  MultiSetValue(ctx context.Context, msequest *MultiSetRequest) (r *MultiSetResponse, err error)
  // Parameters:
  //  - Request
  IncrCounter(ctx context.Context, request *IncrCounterRequest) (r *IncrCounterResponse, err error)
  // Parameters:
  //  - Request
  IncrCounterTtl(ctx context.Context, request *IncrCounterTtlRequest) (r *IncrCounterResponse, err error)
  // Parameters:
  //  - Request
  MultiIncrCounter(ctx context.Context, request *MultiIncrCounterRequest) (r *MultiIncrCounterResponse, err error)
  // Parameters:
  //  - Request
  MultiIncrCounterTtl(ctx context.Context, request *MultiIncrCounterTtlRequest) (r *MultiIncrCounterResponse, err error)
  // Parameters:
  //  - Request
  SetCounter(ctx context.Context, request *SetCounterRequest) (r *SetCounterResponse, err error)
  // Parameters:
  //  - Request
  SetCounterTtl(ctx context.Context, request *SetCounterTtlRequest) (r *SetCounterResponse, err error)
  // Parameters:
  //  - Request
  MultiSetCounter(ctx context.Context, request *MultiSetCounterRequest) (r *MultiSetCounterResponse, err error)
  // Parameters:
  //  - Request
  MultiSetCounterTtl(ctx context.Context, request *MultiSetCounterTtlRequest) (r *MultiSetCounterResponse, err error)
  // Parameters:
  //  - Request
  GetCounter(ctx context.Context, request *GetCounterRequest) (r *GetCounterResponse, err error)
  // Parameters:
  //  - Mrequest
  MultiGetCounter(ctx context.Context, mrequest *MultiGetCounterRequest) (r *MultiGetCounterResponse, err error)
  // Parameters:
  //  - Request
  DsSetValue(ctx context.Context, request *DSSetRequest) (r *DSSetResponse, err error)
  // Parameters:
  //  - Request
  DsRemValue(ctx context.Context, request *DSRemRequest) (r *DSRemResponse, err error)
  // Parameters:
  //  - Request
  DsGetValue(ctx context.Context, request *DSGetRequest) (r *DSGetResponse, err error)
  // Parameters:
  //  - Request
  DsCountValue(ctx context.Context, request *DSCountRequest) (r *DSCountResponse, err error)
  // Parameters:
  //  - Request
  DsDelValue(ctx context.Context, request *DSDelRequest) (r *DSDelResponse, err error)
  // Parameters:
  //  - Request
  DsIsMember(ctx context.Context, request *DSIsMemberRequest) (r *DSIsMemberResponse, err error)
  // Parameters:
  //  - Request
  HashSetValue(ctx context.Context, request *HashSetRequest) (r *HashSetResponse, err error)
  // Parameters:
  //  - Request
  MultiHashSetValue(ctx context.Context, request *MultiHashSetRequest) (r *MultiHashSetResponse, err error)
  // Parameters:
  //  - Request
  HashRemValue(ctx context.Context, request *HashRemRequest) (r *HashRemResponse, err error)
  // Parameters:
  //  - Request
  MultiHashRemValue(ctx context.Context, request *MultiHashRemRequest) (r *MultiHashRemResponse, err error)
  // Parameters:
  //  - Request
  HashGetValue(ctx context.Context, request *HashGetRequest) (r *HashGetResponse, err error)
  // Parameters:
  //  - Request
  MultiHashGetValue(ctx context.Context, request *MultiHashGetRequest) (r *MultiHashGetResponse, err error)
  // Parameters:
  //  - Request
  HashCountValue(ctx context.Context, request *HashCountRequest) (r *HashCountResponse, err error)
  // Parameters:
  //  - Request
  ZsetAddValue(ctx context.Context, request *ZSetAddRequest) (r *ZSetAddResponse, err error)
  // Parameters:
  //  - Request
  ZsetRemValue(ctx context.Context, request *ZSetRemRequest) (r *ZSetRemResponse, err error)
  // Parameters:
  //  - Request
  ZsetGetValue(ctx context.Context, request *ZSetGetRequest) (r *ZSetGetResponse, err error)
  // Parameters:
  //  - Request
  ZsetGetRangeValue(ctx context.Context, request *ZSetGetRangeRequest) (r *ZSetGetRangeResponse, err error)
  // Parameters:
  //  - Request
  ZsetRemRangeValue(ctx context.Context, request *ZSetRemRangeRequest) (r *ZSetRemRangeResponse, err error)
  // Parameters:
  //  - Request
  ZsetCountValue(ctx context.Context, request *ZSetCountRequest) (r *ZSetCountResponse, err error)
  // Parameters:
  //  - Request
  ZsetScanValue(ctx context.Context, request *ZSetScanRequest) (r *ZSetScanResponse, err error)
}

type SharestoreClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewSharestoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SharestoreClient {
  return &SharestoreClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSharestoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SharestoreClient {
  return &SharestoreClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSharestoreClient(c thrift.TClient) *SharestoreClient {
  return &SharestoreClient{
    c: c,
  }
}

func (p *SharestoreClient) Client_() thrift.TClient {
  return p.c
}

func (p *SharestoreClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *SharestoreClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Request
func (p *SharestoreClient) GetValue(ctx context.Context, request *GetRequest) (r *GetResponse, err error) {
  var _args158 SharestoreGetValueArgs
  _args158.Request = request
  var _result159 SharestoreGetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "getValue", &_args158, &_result159)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result159.E!= nil:
    return r, _result159.E
  }

  return _result159.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) TTL(ctx context.Context, request *TtlRequest) (r *TtlResponse, err error) {
  var _args160 SharestoreTTLArgs
  _args160.Request = request
  var _result161 SharestoreTTLResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "ttl", &_args160, &_result161)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result161.E!= nil:
    return r, _result161.E
  }

  return _result161.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) SetValue(ctx context.Context, request *SetRequest) (r *SetResponse, err error) {
  var _args162 SharestoreSetValueArgs
  _args162.Request = request
  var _result163 SharestoreSetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "setValue", &_args162, &_result163)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result163.E!= nil:
    return r, _result163.E
  }

  return _result163.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) DelValue(ctx context.Context, request *DelRequest) (r *DelResponse, err error) {
  var _args164 SharestoreDelValueArgs
  _args164.Request = request
  var _result165 SharestoreDelValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "delValue", &_args164, &_result165)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result165.E!= nil:
    return r, _result165.E
  }

  return _result165.GetSuccess(), nil
}

// Parameters:
//  - Mrequest
func (p *SharestoreClient) MultiGetValue(ctx context.Context, mrequest *MultiGetRequest) (r *MultiGetResponse, err error) {
  var _args166 SharestoreMultiGetValueArgs
  _args166.Mrequest = mrequest
  var _result167 SharestoreMultiGetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiGetValue", &_args166, &_result167)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result167.E!= nil:
    return r, _result167.E
  }

  return _result167.GetSuccess(), nil
}

// Parameters:
//  - Msequest
func (p *SharestoreClient) MultiSetValue(ctx context.Context, msequest *MultiSetRequest) (r *MultiSetResponse, err error) {
  var _args168 SharestoreMultiSetValueArgs
  _args168.Msequest = msequest
  var _result169 SharestoreMultiSetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiSetValue", &_args168, &_result169)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result169.E!= nil:
    return r, _result169.E
  }

  return _result169.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) IncrCounter(ctx context.Context, request *IncrCounterRequest) (r *IncrCounterResponse, err error) {
  var _args170 SharestoreIncrCounterArgs
  _args170.Request = request
  var _result171 SharestoreIncrCounterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "incrCounter", &_args170, &_result171)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result171.E!= nil:
    return r, _result171.E
  }

  return _result171.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) IncrCounterTtl(ctx context.Context, request *IncrCounterTtlRequest) (r *IncrCounterResponse, err error) {
  var _args172 SharestoreIncrCounterTtlArgs
  _args172.Request = request
  var _result173 SharestoreIncrCounterTtlResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "incrCounterTtl", &_args172, &_result173)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result173.E!= nil:
    return r, _result173.E
  }

  return _result173.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) MultiIncrCounter(ctx context.Context, request *MultiIncrCounterRequest) (r *MultiIncrCounterResponse, err error) {
  var _args174 SharestoreMultiIncrCounterArgs
  _args174.Request = request
  var _result175 SharestoreMultiIncrCounterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiIncrCounter", &_args174, &_result175)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result175.E!= nil:
    return r, _result175.E
  }

  return _result175.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) MultiIncrCounterTtl(ctx context.Context, request *MultiIncrCounterTtlRequest) (r *MultiIncrCounterResponse, err error) {
  var _args176 SharestoreMultiIncrCounterTtlArgs
  _args176.Request = request
  var _result177 SharestoreMultiIncrCounterTtlResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiIncrCounterTtl", &_args176, &_result177)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result177.E!= nil:
    return r, _result177.E
  }

  return _result177.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) SetCounter(ctx context.Context, request *SetCounterRequest) (r *SetCounterResponse, err error) {
  var _args178 SharestoreSetCounterArgs
  _args178.Request = request
  var _result179 SharestoreSetCounterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "setCounter", &_args178, &_result179)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result179.E!= nil:
    return r, _result179.E
  }

  return _result179.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) SetCounterTtl(ctx context.Context, request *SetCounterTtlRequest) (r *SetCounterResponse, err error) {
  var _args180 SharestoreSetCounterTtlArgs
  _args180.Request = request
  var _result181 SharestoreSetCounterTtlResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "setCounterTtl", &_args180, &_result181)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result181.E!= nil:
    return r, _result181.E
  }

  return _result181.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) MultiSetCounter(ctx context.Context, request *MultiSetCounterRequest) (r *MultiSetCounterResponse, err error) {
  var _args182 SharestoreMultiSetCounterArgs
  _args182.Request = request
  var _result183 SharestoreMultiSetCounterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiSetCounter", &_args182, &_result183)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result183.E!= nil:
    return r, _result183.E
  }

  return _result183.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) MultiSetCounterTtl(ctx context.Context, request *MultiSetCounterTtlRequest) (r *MultiSetCounterResponse, err error) {
  var _args184 SharestoreMultiSetCounterTtlArgs
  _args184.Request = request
  var _result185 SharestoreMultiSetCounterTtlResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiSetCounterTtl", &_args184, &_result185)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result185.E!= nil:
    return r, _result185.E
  }

  return _result185.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) GetCounter(ctx context.Context, request *GetCounterRequest) (r *GetCounterResponse, err error) {
  var _args186 SharestoreGetCounterArgs
  _args186.Request = request
  var _result187 SharestoreGetCounterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "getCounter", &_args186, &_result187)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result187.E!= nil:
    return r, _result187.E
  }

  return _result187.GetSuccess(), nil
}

// Parameters:
//  - Mrequest
func (p *SharestoreClient) MultiGetCounter(ctx context.Context, mrequest *MultiGetCounterRequest) (r *MultiGetCounterResponse, err error) {
  var _args188 SharestoreMultiGetCounterArgs
  _args188.Mrequest = mrequest
  var _result189 SharestoreMultiGetCounterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiGetCounter", &_args188, &_result189)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result189.E!= nil:
    return r, _result189.E
  }

  return _result189.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) DsSetValue(ctx context.Context, request *DSSetRequest) (r *DSSetResponse, err error) {
  var _args190 SharestoreDsSetValueArgs
  _args190.Request = request
  var _result191 SharestoreDsSetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "dsSetValue", &_args190, &_result191)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result191.E!= nil:
    return r, _result191.E
  }

  return _result191.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) DsRemValue(ctx context.Context, request *DSRemRequest) (r *DSRemResponse, err error) {
  var _args192 SharestoreDsRemValueArgs
  _args192.Request = request
  var _result193 SharestoreDsRemValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "dsRemValue", &_args192, &_result193)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result193.E!= nil:
    return r, _result193.E
  }

  return _result193.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) DsGetValue(ctx context.Context, request *DSGetRequest) (r *DSGetResponse, err error) {
  var _args194 SharestoreDsGetValueArgs
  _args194.Request = request
  var _result195 SharestoreDsGetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "dsGetValue", &_args194, &_result195)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result195.E!= nil:
    return r, _result195.E
  }

  return _result195.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) DsCountValue(ctx context.Context, request *DSCountRequest) (r *DSCountResponse, err error) {
  var _args196 SharestoreDsCountValueArgs
  _args196.Request = request
  var _result197 SharestoreDsCountValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "dsCountValue", &_args196, &_result197)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result197.E!= nil:
    return r, _result197.E
  }

  return _result197.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) DsDelValue(ctx context.Context, request *DSDelRequest) (r *DSDelResponse, err error) {
  var _args198 SharestoreDsDelValueArgs
  _args198.Request = request
  var _result199 SharestoreDsDelValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "dsDelValue", &_args198, &_result199)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result199.E!= nil:
    return r, _result199.E
  }

  return _result199.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) DsIsMember(ctx context.Context, request *DSIsMemberRequest) (r *DSIsMemberResponse, err error) {
  var _args200 SharestoreDsIsMemberArgs
  _args200.Request = request
  var _result201 SharestoreDsIsMemberResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "dsIsMember", &_args200, &_result201)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result201.E!= nil:
    return r, _result201.E
  }

  return _result201.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) HashSetValue(ctx context.Context, request *HashSetRequest) (r *HashSetResponse, err error) {
  var _args202 SharestoreHashSetValueArgs
  _args202.Request = request
  var _result203 SharestoreHashSetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "hashSetValue", &_args202, &_result203)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result203.E!= nil:
    return r, _result203.E
  }

  return _result203.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) MultiHashSetValue(ctx context.Context, request *MultiHashSetRequest) (r *MultiHashSetResponse, err error) {
  var _args204 SharestoreMultiHashSetValueArgs
  _args204.Request = request
  var _result205 SharestoreMultiHashSetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiHashSetValue", &_args204, &_result205)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result205.E!= nil:
    return r, _result205.E
  }

  return _result205.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) HashRemValue(ctx context.Context, request *HashRemRequest) (r *HashRemResponse, err error) {
  var _args206 SharestoreHashRemValueArgs
  _args206.Request = request
  var _result207 SharestoreHashRemValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "hashRemValue", &_args206, &_result207)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result207.E!= nil:
    return r, _result207.E
  }

  return _result207.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) MultiHashRemValue(ctx context.Context, request *MultiHashRemRequest) (r *MultiHashRemResponse, err error) {
  var _args208 SharestoreMultiHashRemValueArgs
  _args208.Request = request
  var _result209 SharestoreMultiHashRemValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiHashRemValue", &_args208, &_result209)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result209.E!= nil:
    return r, _result209.E
  }

  return _result209.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) HashGetValue(ctx context.Context, request *HashGetRequest) (r *HashGetResponse, err error) {
  var _args210 SharestoreHashGetValueArgs
  _args210.Request = request
  var _result211 SharestoreHashGetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "hashGetValue", &_args210, &_result211)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result211.E!= nil:
    return r, _result211.E
  }

  return _result211.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) MultiHashGetValue(ctx context.Context, request *MultiHashGetRequest) (r *MultiHashGetResponse, err error) {
  var _args212 SharestoreMultiHashGetValueArgs
  _args212.Request = request
  var _result213 SharestoreMultiHashGetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "multiHashGetValue", &_args212, &_result213)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result213.E!= nil:
    return r, _result213.E
  }

  return _result213.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) HashCountValue(ctx context.Context, request *HashCountRequest) (r *HashCountResponse, err error) {
  var _args214 SharestoreHashCountValueArgs
  _args214.Request = request
  var _result215 SharestoreHashCountValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "hashCountValue", &_args214, &_result215)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result215.E!= nil:
    return r, _result215.E
  }

  return _result215.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) ZsetAddValue(ctx context.Context, request *ZSetAddRequest) (r *ZSetAddResponse, err error) {
  var _args216 SharestoreZsetAddValueArgs
  _args216.Request = request
  var _result217 SharestoreZsetAddValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "zsetAddValue", &_args216, &_result217)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result217.E!= nil:
    return r, _result217.E
  }

  return _result217.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) ZsetRemValue(ctx context.Context, request *ZSetRemRequest) (r *ZSetRemResponse, err error) {
  var _args218 SharestoreZsetRemValueArgs
  _args218.Request = request
  var _result219 SharestoreZsetRemValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "zsetRemValue", &_args218, &_result219)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result219.E!= nil:
    return r, _result219.E
  }

  return _result219.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) ZsetGetValue(ctx context.Context, request *ZSetGetRequest) (r *ZSetGetResponse, err error) {
  var _args220 SharestoreZsetGetValueArgs
  _args220.Request = request
  var _result221 SharestoreZsetGetValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "zsetGetValue", &_args220, &_result221)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result221.E!= nil:
    return r, _result221.E
  }

  return _result221.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) ZsetGetRangeValue(ctx context.Context, request *ZSetGetRangeRequest) (r *ZSetGetRangeResponse, err error) {
  var _args222 SharestoreZsetGetRangeValueArgs
  _args222.Request = request
  var _result223 SharestoreZsetGetRangeValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "zsetGetRangeValue", &_args222, &_result223)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result223.E!= nil:
    return r, _result223.E
  }

  return _result223.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) ZsetRemRangeValue(ctx context.Context, request *ZSetRemRangeRequest) (r *ZSetRemRangeResponse, err error) {
  var _args224 SharestoreZsetRemRangeValueArgs
  _args224.Request = request
  var _result225 SharestoreZsetRemRangeValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "zsetRemRangeValue", &_args224, &_result225)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result225.E!= nil:
    return r, _result225.E
  }

  return _result225.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) ZsetCountValue(ctx context.Context, request *ZSetCountRequest) (r *ZSetCountResponse, err error) {
  var _args226 SharestoreZsetCountValueArgs
  _args226.Request = request
  var _result227 SharestoreZsetCountValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "zsetCountValue", &_args226, &_result227)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result227.E!= nil:
    return r, _result227.E
  }

  return _result227.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SharestoreClient) ZsetScanValue(ctx context.Context, request *ZSetScanRequest) (r *ZSetScanResponse, err error) {
  var _args228 SharestoreZsetScanValueArgs
  _args228.Request = request
  var _result229 SharestoreZsetScanValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "zsetScanValue", &_args228, &_result229)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result229.E!= nil:
    return r, _result229.E
  }

  return _result229.GetSuccess(), nil
}

type SharestoreProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Sharestore
}

func (p *SharestoreProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SharestoreProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SharestoreProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSharestoreProcessor(handler Sharestore) *SharestoreProcessor {

  self230 := &SharestoreProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self230.processorMap["getValue"] = &sharestoreProcessorGetValue{handler:handler}
  self230.processorMap["ttl"] = &sharestoreProcessorTTL{handler:handler}
  self230.processorMap["setValue"] = &sharestoreProcessorSetValue{handler:handler}
  self230.processorMap["delValue"] = &sharestoreProcessorDelValue{handler:handler}
  self230.processorMap["multiGetValue"] = &sharestoreProcessorMultiGetValue{handler:handler}
  self230.processorMap["multiSetValue"] = &sharestoreProcessorMultiSetValue{handler:handler}
  self230.processorMap["incrCounter"] = &sharestoreProcessorIncrCounter{handler:handler}
  self230.processorMap["incrCounterTtl"] = &sharestoreProcessorIncrCounterTtl{handler:handler}
  self230.processorMap["multiIncrCounter"] = &sharestoreProcessorMultiIncrCounter{handler:handler}
  self230.processorMap["multiIncrCounterTtl"] = &sharestoreProcessorMultiIncrCounterTtl{handler:handler}
  self230.processorMap["setCounter"] = &sharestoreProcessorSetCounter{handler:handler}
  self230.processorMap["setCounterTtl"] = &sharestoreProcessorSetCounterTtl{handler:handler}
  self230.processorMap["multiSetCounter"] = &sharestoreProcessorMultiSetCounter{handler:handler}
  self230.processorMap["multiSetCounterTtl"] = &sharestoreProcessorMultiSetCounterTtl{handler:handler}
  self230.processorMap["getCounter"] = &sharestoreProcessorGetCounter{handler:handler}
  self230.processorMap["multiGetCounter"] = &sharestoreProcessorMultiGetCounter{handler:handler}
  self230.processorMap["dsSetValue"] = &sharestoreProcessorDsSetValue{handler:handler}
  self230.processorMap["dsRemValue"] = &sharestoreProcessorDsRemValue{handler:handler}
  self230.processorMap["dsGetValue"] = &sharestoreProcessorDsGetValue{handler:handler}
  self230.processorMap["dsCountValue"] = &sharestoreProcessorDsCountValue{handler:handler}
  self230.processorMap["dsDelValue"] = &sharestoreProcessorDsDelValue{handler:handler}
  self230.processorMap["dsIsMember"] = &sharestoreProcessorDsIsMember{handler:handler}
  self230.processorMap["hashSetValue"] = &sharestoreProcessorHashSetValue{handler:handler}
  self230.processorMap["multiHashSetValue"] = &sharestoreProcessorMultiHashSetValue{handler:handler}
  self230.processorMap["hashRemValue"] = &sharestoreProcessorHashRemValue{handler:handler}
  self230.processorMap["multiHashRemValue"] = &sharestoreProcessorMultiHashRemValue{handler:handler}
  self230.processorMap["hashGetValue"] = &sharestoreProcessorHashGetValue{handler:handler}
  self230.processorMap["multiHashGetValue"] = &sharestoreProcessorMultiHashGetValue{handler:handler}
  self230.processorMap["hashCountValue"] = &sharestoreProcessorHashCountValue{handler:handler}
  self230.processorMap["zsetAddValue"] = &sharestoreProcessorZsetAddValue{handler:handler}
  self230.processorMap["zsetRemValue"] = &sharestoreProcessorZsetRemValue{handler:handler}
  self230.processorMap["zsetGetValue"] = &sharestoreProcessorZsetGetValue{handler:handler}
  self230.processorMap["zsetGetRangeValue"] = &sharestoreProcessorZsetGetRangeValue{handler:handler}
  self230.processorMap["zsetRemRangeValue"] = &sharestoreProcessorZsetRemRangeValue{handler:handler}
  self230.processorMap["zsetCountValue"] = &sharestoreProcessorZsetCountValue{handler:handler}
  self230.processorMap["zsetScanValue"] = &sharestoreProcessorZsetScanValue{handler:handler}
return self230
}

func (p *SharestoreProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x231 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x231.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x231

}

type sharestoreProcessorGetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreGetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreGetValueResult{}
  var retval *GetResponse
  if retval, err2 = p.handler.GetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorTTL struct {
  handler Sharestore
}

func (p *sharestoreProcessorTTL) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreTTLArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ttl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreTTLResult{}
  var retval *TtlResponse
  if retval, err2 = p.handler.TTL(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ttl: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ttl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ttl", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorSetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorSetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreSetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreSetValueResult{}
  var retval *SetResponse
  if retval, err2 = p.handler.SetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorDelValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorDelValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreDelValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "delValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreDelValueResult{}
  var retval *DelResponse
  if retval, err2 = p.handler.DelValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "delValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "delValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiGetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiGetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiGetValueResult{}
  var retval *MultiGetResponse
  if retval, err2 = p.handler.MultiGetValue(ctx, args.Mrequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiGetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiGetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiSetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiSetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiSetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiSetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiSetValueResult{}
  var retval *MultiSetResponse
  if retval, err2 = p.handler.MultiSetValue(ctx, args.Msequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiSetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiSetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiSetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorIncrCounter struct {
  handler Sharestore
}

func (p *sharestoreProcessorIncrCounter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreIncrCounterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "incrCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreIncrCounterResult{}
  var retval *IncrCounterResponse
  if retval, err2 = p.handler.IncrCounter(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incrCounter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "incrCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "incrCounter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorIncrCounterTtl struct {
  handler Sharestore
}

func (p *sharestoreProcessorIncrCounterTtl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreIncrCounterTtlArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "incrCounterTtl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreIncrCounterTtlResult{}
  var retval *IncrCounterResponse
  if retval, err2 = p.handler.IncrCounterTtl(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incrCounterTtl: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "incrCounterTtl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "incrCounterTtl", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiIncrCounter struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiIncrCounter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiIncrCounterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiIncrCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiIncrCounterResult{}
  var retval *MultiIncrCounterResponse
  if retval, err2 = p.handler.MultiIncrCounter(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiIncrCounter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiIncrCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiIncrCounter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiIncrCounterTtl struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiIncrCounterTtl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiIncrCounterTtlArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiIncrCounterTtl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiIncrCounterTtlResult{}
  var retval *MultiIncrCounterResponse
  if retval, err2 = p.handler.MultiIncrCounterTtl(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiIncrCounterTtl: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiIncrCounterTtl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiIncrCounterTtl", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorSetCounter struct {
  handler Sharestore
}

func (p *sharestoreProcessorSetCounter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreSetCounterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreSetCounterResult{}
  var retval *SetCounterResponse
  if retval, err2 = p.handler.SetCounter(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setCounter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setCounter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorSetCounterTtl struct {
  handler Sharestore
}

func (p *sharestoreProcessorSetCounterTtl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreSetCounterTtlArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setCounterTtl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreSetCounterTtlResult{}
  var retval *SetCounterResponse
  if retval, err2 = p.handler.SetCounterTtl(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setCounterTtl: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setCounterTtl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setCounterTtl", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiSetCounter struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiSetCounter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiSetCounterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiSetCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiSetCounterResult{}
  var retval *MultiSetCounterResponse
  if retval, err2 = p.handler.MultiSetCounter(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiSetCounter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiSetCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiSetCounter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiSetCounterTtl struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiSetCounterTtl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiSetCounterTtlArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiSetCounterTtl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiSetCounterTtlResult{}
  var retval *MultiSetCounterResponse
  if retval, err2 = p.handler.MultiSetCounterTtl(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiSetCounterTtl: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiSetCounterTtl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiSetCounterTtl", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorGetCounter struct {
  handler Sharestore
}

func (p *sharestoreProcessorGetCounter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreGetCounterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreGetCounterResult{}
  var retval *GetCounterResponse
  if retval, err2 = p.handler.GetCounter(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getCounter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiGetCounter struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiGetCounter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiGetCounterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiGetCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiGetCounterResult{}
  var retval *MultiGetCounterResponse
  if retval, err2 = p.handler.MultiGetCounter(ctx, args.Mrequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiGetCounter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiGetCounter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiGetCounter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorDsSetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorDsSetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreDsSetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dsSetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreDsSetValueResult{}
  var retval *DSSetResponse
  if retval, err2 = p.handler.DsSetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dsSetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "dsSetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "dsSetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorDsRemValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorDsRemValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreDsRemValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dsRemValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreDsRemValueResult{}
  var retval *DSRemResponse
  if retval, err2 = p.handler.DsRemValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dsRemValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "dsRemValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "dsRemValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorDsGetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorDsGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreDsGetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dsGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreDsGetValueResult{}
  var retval *DSGetResponse
  if retval, err2 = p.handler.DsGetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dsGetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "dsGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "dsGetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorDsCountValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorDsCountValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreDsCountValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dsCountValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreDsCountValueResult{}
  var retval *DSCountResponse
  if retval, err2 = p.handler.DsCountValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dsCountValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "dsCountValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "dsCountValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorDsDelValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorDsDelValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreDsDelValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dsDelValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreDsDelValueResult{}
  var retval *DSDelResponse
  if retval, err2 = p.handler.DsDelValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dsDelValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "dsDelValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "dsDelValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorDsIsMember struct {
  handler Sharestore
}

func (p *sharestoreProcessorDsIsMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreDsIsMemberArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dsIsMember", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreDsIsMemberResult{}
  var retval *DSIsMemberResponse
  if retval, err2 = p.handler.DsIsMember(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dsIsMember: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "dsIsMember", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "dsIsMember", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorHashSetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorHashSetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreHashSetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "hashSetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreHashSetValueResult{}
  var retval *HashSetResponse
  if retval, err2 = p.handler.HashSetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hashSetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "hashSetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "hashSetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiHashSetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiHashSetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiHashSetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiHashSetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiHashSetValueResult{}
  var retval *MultiHashSetResponse
  if retval, err2 = p.handler.MultiHashSetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiHashSetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiHashSetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiHashSetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorHashRemValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorHashRemValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreHashRemValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "hashRemValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreHashRemValueResult{}
  var retval *HashRemResponse
  if retval, err2 = p.handler.HashRemValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hashRemValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "hashRemValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "hashRemValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiHashRemValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiHashRemValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiHashRemValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiHashRemValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiHashRemValueResult{}
  var retval *MultiHashRemResponse
  if retval, err2 = p.handler.MultiHashRemValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiHashRemValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiHashRemValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiHashRemValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorHashGetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorHashGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreHashGetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "hashGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreHashGetValueResult{}
  var retval *HashGetResponse
  if retval, err2 = p.handler.HashGetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hashGetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "hashGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "hashGetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorMultiHashGetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorMultiHashGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreMultiHashGetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiHashGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreMultiHashGetValueResult{}
  var retval *MultiHashGetResponse
  if retval, err2 = p.handler.MultiHashGetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiHashGetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiHashGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiHashGetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorHashCountValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorHashCountValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreHashCountValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "hashCountValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreHashCountValueResult{}
  var retval *HashCountResponse
  if retval, err2 = p.handler.HashCountValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hashCountValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "hashCountValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "hashCountValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorZsetAddValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorZsetAddValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreZsetAddValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetAddValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreZsetAddValueResult{}
  var retval *ZSetAddResponse
  if retval, err2 = p.handler.ZsetAddValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zsetAddValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetAddValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "zsetAddValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorZsetRemValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorZsetRemValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreZsetRemValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetRemValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreZsetRemValueResult{}
  var retval *ZSetRemResponse
  if retval, err2 = p.handler.ZsetRemValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zsetRemValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetRemValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "zsetRemValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorZsetGetValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorZsetGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreZsetGetValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreZsetGetValueResult{}
  var retval *ZSetGetResponse
  if retval, err2 = p.handler.ZsetGetValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zsetGetValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetGetValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "zsetGetValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorZsetGetRangeValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorZsetGetRangeValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreZsetGetRangeValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetGetRangeValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreZsetGetRangeValueResult{}
  var retval *ZSetGetRangeResponse
  if retval, err2 = p.handler.ZsetGetRangeValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zsetGetRangeValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetGetRangeValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "zsetGetRangeValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorZsetRemRangeValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorZsetRemRangeValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreZsetRemRangeValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetRemRangeValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreZsetRemRangeValueResult{}
  var retval *ZSetRemRangeResponse
  if retval, err2 = p.handler.ZsetRemRangeValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zsetRemRangeValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetRemRangeValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "zsetRemRangeValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorZsetCountValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorZsetCountValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreZsetCountValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetCountValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreZsetCountValueResult{}
  var retval *ZSetCountResponse
  if retval, err2 = p.handler.ZsetCountValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zsetCountValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetCountValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "zsetCountValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sharestoreProcessorZsetScanValue struct {
  handler Sharestore
}

func (p *sharestoreProcessorZsetScanValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SharestoreZsetScanValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetScanValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SharestoreZsetScanValueResult{}
  var retval *ZSetScanResponse
  if retval, err2 = p.handler.ZsetScanValue(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *SharestoreException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zsetScanValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "zsetScanValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "zsetScanValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SharestoreGetValueArgs struct {
  Request *GetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreGetValueArgs() *SharestoreGetValueArgs {
  return &SharestoreGetValueArgs{}
}

var SharestoreGetValueArgs_Request_DEFAULT *GetRequest
func (p *SharestoreGetValueArgs) GetRequest() *GetRequest {
  if !p.IsSetRequest() {
    return SharestoreGetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreGetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreGetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreGetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreGetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreGetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreGetValueResult struct {
  Success *GetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreGetValueResult() *SharestoreGetValueResult {
  return &SharestoreGetValueResult{}
}

var SharestoreGetValueResult_Success_DEFAULT *GetResponse
func (p *SharestoreGetValueResult) GetSuccess() *GetResponse {
  if !p.IsSetSuccess() {
    return SharestoreGetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreGetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreGetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreGetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreGetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreGetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreGetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreGetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreGetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreGetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreGetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreGetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreTTLArgs struct {
  Request *TtlRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreTTLArgs() *SharestoreTTLArgs {
  return &SharestoreTTLArgs{}
}

var SharestoreTTLArgs_Request_DEFAULT *TtlRequest
func (p *SharestoreTTLArgs) GetRequest() *TtlRequest {
  if !p.IsSetRequest() {
    return SharestoreTTLArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreTTLArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreTTLArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreTTLArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &TtlRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreTTLArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ttl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreTTLArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreTTLArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreTTLArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreTTLResult struct {
  Success *TtlResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreTTLResult() *SharestoreTTLResult {
  return &SharestoreTTLResult{}
}

var SharestoreTTLResult_Success_DEFAULT *TtlResponse
func (p *SharestoreTTLResult) GetSuccess() *TtlResponse {
  if !p.IsSetSuccess() {
    return SharestoreTTLResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreTTLResult_E_DEFAULT *SharestoreException
func (p *SharestoreTTLResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreTTLResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreTTLResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreTTLResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreTTLResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreTTLResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TtlResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreTTLResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreTTLResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ttl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreTTLResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreTTLResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreTTLResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreTTLResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreSetValueArgs struct {
  Request *SetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreSetValueArgs() *SharestoreSetValueArgs {
  return &SharestoreSetValueArgs{}
}

var SharestoreSetValueArgs_Request_DEFAULT *SetRequest
func (p *SharestoreSetValueArgs) GetRequest() *SetRequest {
  if !p.IsSetRequest() {
    return SharestoreSetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreSetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreSetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreSetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &SetRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreSetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreSetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreSetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreSetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreSetValueResult struct {
  Success *SetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreSetValueResult() *SharestoreSetValueResult {
  return &SharestoreSetValueResult{}
}

var SharestoreSetValueResult_Success_DEFAULT *SetResponse
func (p *SharestoreSetValueResult) GetSuccess() *SetResponse {
  if !p.IsSetSuccess() {
    return SharestoreSetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreSetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreSetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreSetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreSetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreSetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreSetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreSetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreSetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreSetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreSetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreSetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreSetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreSetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreDelValueArgs struct {
  Request *DelRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreDelValueArgs() *SharestoreDelValueArgs {
  return &SharestoreDelValueArgs{}
}

var SharestoreDelValueArgs_Request_DEFAULT *DelRequest
func (p *SharestoreDelValueArgs) GetRequest() *DelRequest {
  if !p.IsSetRequest() {
    return SharestoreDelValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreDelValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreDelValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDelValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DelRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreDelValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "delValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDelValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreDelValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDelValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreDelValueResult struct {
  Success *DelResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreDelValueResult() *SharestoreDelValueResult {
  return &SharestoreDelValueResult{}
}

var SharestoreDelValueResult_Success_DEFAULT *DelResponse
func (p *SharestoreDelValueResult) GetSuccess() *DelResponse {
  if !p.IsSetSuccess() {
    return SharestoreDelValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreDelValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreDelValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreDelValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreDelValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreDelValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreDelValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDelValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DelResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreDelValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreDelValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "delValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDelValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreDelValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreDelValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDelValueResult(%+v)", *p)
}

// Attributes:
//  - Mrequest
type SharestoreMultiGetValueArgs struct {
  Mrequest *MultiGetRequest `thrift:"mrequest,1" db:"mrequest" json:"mrequest"`
}

func NewSharestoreMultiGetValueArgs() *SharestoreMultiGetValueArgs {
  return &SharestoreMultiGetValueArgs{}
}

var SharestoreMultiGetValueArgs_Mrequest_DEFAULT *MultiGetRequest
func (p *SharestoreMultiGetValueArgs) GetMrequest() *MultiGetRequest {
  if !p.IsSetMrequest() {
    return SharestoreMultiGetValueArgs_Mrequest_DEFAULT
  }
return p.Mrequest
}
func (p *SharestoreMultiGetValueArgs) IsSetMrequest() bool {
  return p.Mrequest != nil
}

func (p *SharestoreMultiGetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiGetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Mrequest = &MultiGetRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Mrequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mrequest), err)
  }
  return nil
}

func (p *SharestoreMultiGetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiGetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiGetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mrequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mrequest: ", p), err) }
  if err := p.Mrequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mrequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mrequest: ", p), err) }
  return err
}

func (p *SharestoreMultiGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiGetValueResult struct {
  Success *MultiGetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiGetValueResult() *SharestoreMultiGetValueResult {
  return &SharestoreMultiGetValueResult{}
}

var SharestoreMultiGetValueResult_Success_DEFAULT *MultiGetResponse
func (p *SharestoreMultiGetValueResult) GetSuccess() *MultiGetResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiGetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiGetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiGetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiGetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiGetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiGetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiGetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiGetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiGetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiGetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiGetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiGetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiGetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiGetValueResult(%+v)", *p)
}

// Attributes:
//  - Msequest
type SharestoreMultiSetValueArgs struct {
  Msequest *MultiSetRequest `thrift:"msequest,1" db:"msequest" json:"msequest"`
}

func NewSharestoreMultiSetValueArgs() *SharestoreMultiSetValueArgs {
  return &SharestoreMultiSetValueArgs{}
}

var SharestoreMultiSetValueArgs_Msequest_DEFAULT *MultiSetRequest
func (p *SharestoreMultiSetValueArgs) GetMsequest() *MultiSetRequest {
  if !p.IsSetMsequest() {
    return SharestoreMultiSetValueArgs_Msequest_DEFAULT
  }
return p.Msequest
}
func (p *SharestoreMultiSetValueArgs) IsSetMsequest() bool {
  return p.Msequest != nil
}

func (p *SharestoreMultiSetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiSetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Msequest = &MultiSetRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Msequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Msequest), err)
  }
  return nil
}

func (p *SharestoreMultiSetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiSetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiSetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "msequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msequest: ", p), err) }
  if err := p.Msequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Msequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msequest: ", p), err) }
  return err
}

func (p *SharestoreMultiSetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiSetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiSetValueResult struct {
  Success *MultiSetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiSetValueResult() *SharestoreMultiSetValueResult {
  return &SharestoreMultiSetValueResult{}
}

var SharestoreMultiSetValueResult_Success_DEFAULT *MultiSetResponse
func (p *SharestoreMultiSetValueResult) GetSuccess() *MultiSetResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiSetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiSetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiSetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiSetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiSetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiSetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiSetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiSetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiSetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiSetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiSetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiSetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiSetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiSetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiSetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiSetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreIncrCounterArgs struct {
  Request *IncrCounterRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreIncrCounterArgs() *SharestoreIncrCounterArgs {
  return &SharestoreIncrCounterArgs{}
}

var SharestoreIncrCounterArgs_Request_DEFAULT *IncrCounterRequest
func (p *SharestoreIncrCounterArgs) GetRequest() *IncrCounterRequest {
  if !p.IsSetRequest() {
    return SharestoreIncrCounterArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreIncrCounterArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreIncrCounterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreIncrCounterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IncrCounterRequest{
  Segment: "default",

  Value: 1,

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreIncrCounterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "incrCounter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreIncrCounterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreIncrCounterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreIncrCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreIncrCounterResult struct {
  Success *IncrCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreIncrCounterResult() *SharestoreIncrCounterResult {
  return &SharestoreIncrCounterResult{}
}

var SharestoreIncrCounterResult_Success_DEFAULT *IncrCounterResponse
func (p *SharestoreIncrCounterResult) GetSuccess() *IncrCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreIncrCounterResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreIncrCounterResult_E_DEFAULT *SharestoreException
func (p *SharestoreIncrCounterResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreIncrCounterResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreIncrCounterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreIncrCounterResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreIncrCounterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreIncrCounterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IncrCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreIncrCounterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreIncrCounterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "incrCounter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreIncrCounterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreIncrCounterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreIncrCounterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreIncrCounterResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreIncrCounterTtlArgs struct {
  Request *IncrCounterTtlRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreIncrCounterTtlArgs() *SharestoreIncrCounterTtlArgs {
  return &SharestoreIncrCounterTtlArgs{}
}

var SharestoreIncrCounterTtlArgs_Request_DEFAULT *IncrCounterTtlRequest
func (p *SharestoreIncrCounterTtlArgs) GetRequest() *IncrCounterTtlRequest {
  if !p.IsSetRequest() {
    return SharestoreIncrCounterTtlArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreIncrCounterTtlArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreIncrCounterTtlArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreIncrCounterTtlArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IncrCounterTtlRequest{
  Segment: "default",

  Value: 1,

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreIncrCounterTtlArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "incrCounterTtl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreIncrCounterTtlArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreIncrCounterTtlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreIncrCounterTtlArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreIncrCounterTtlResult struct {
  Success *IncrCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreIncrCounterTtlResult() *SharestoreIncrCounterTtlResult {
  return &SharestoreIncrCounterTtlResult{}
}

var SharestoreIncrCounterTtlResult_Success_DEFAULT *IncrCounterResponse
func (p *SharestoreIncrCounterTtlResult) GetSuccess() *IncrCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreIncrCounterTtlResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreIncrCounterTtlResult_E_DEFAULT *SharestoreException
func (p *SharestoreIncrCounterTtlResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreIncrCounterTtlResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreIncrCounterTtlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreIncrCounterTtlResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreIncrCounterTtlResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreIncrCounterTtlResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IncrCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreIncrCounterTtlResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreIncrCounterTtlResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "incrCounterTtl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreIncrCounterTtlResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreIncrCounterTtlResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreIncrCounterTtlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreIncrCounterTtlResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreMultiIncrCounterArgs struct {
  Request *MultiIncrCounterRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreMultiIncrCounterArgs() *SharestoreMultiIncrCounterArgs {
  return &SharestoreMultiIncrCounterArgs{}
}

var SharestoreMultiIncrCounterArgs_Request_DEFAULT *MultiIncrCounterRequest
func (p *SharestoreMultiIncrCounterArgs) GetRequest() *MultiIncrCounterRequest {
  if !p.IsSetRequest() {
    return SharestoreMultiIncrCounterArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreMultiIncrCounterArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreMultiIncrCounterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiIncrCounterRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiIncrCounter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiIncrCounterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreMultiIncrCounterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiIncrCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiIncrCounterResult struct {
  Success *MultiIncrCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiIncrCounterResult() *SharestoreMultiIncrCounterResult {
  return &SharestoreMultiIncrCounterResult{}
}

var SharestoreMultiIncrCounterResult_Success_DEFAULT *MultiIncrCounterResponse
func (p *SharestoreMultiIncrCounterResult) GetSuccess() *MultiIncrCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiIncrCounterResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiIncrCounterResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiIncrCounterResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiIncrCounterResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiIncrCounterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiIncrCounterResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiIncrCounterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiIncrCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiIncrCounter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiIncrCounterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiIncrCounterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiIncrCounterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiIncrCounterResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreMultiIncrCounterTtlArgs struct {
  Request *MultiIncrCounterTtlRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreMultiIncrCounterTtlArgs() *SharestoreMultiIncrCounterTtlArgs {
  return &SharestoreMultiIncrCounterTtlArgs{}
}

var SharestoreMultiIncrCounterTtlArgs_Request_DEFAULT *MultiIncrCounterTtlRequest
func (p *SharestoreMultiIncrCounterTtlArgs) GetRequest() *MultiIncrCounterTtlRequest {
  if !p.IsSetRequest() {
    return SharestoreMultiIncrCounterTtlArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreMultiIncrCounterTtlArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreMultiIncrCounterTtlArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterTtlArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiIncrCounterTtlRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterTtlArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiIncrCounterTtl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiIncrCounterTtlArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreMultiIncrCounterTtlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiIncrCounterTtlArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiIncrCounterTtlResult struct {
  Success *MultiIncrCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiIncrCounterTtlResult() *SharestoreMultiIncrCounterTtlResult {
  return &SharestoreMultiIncrCounterTtlResult{}
}

var SharestoreMultiIncrCounterTtlResult_Success_DEFAULT *MultiIncrCounterResponse
func (p *SharestoreMultiIncrCounterTtlResult) GetSuccess() *MultiIncrCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiIncrCounterTtlResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiIncrCounterTtlResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiIncrCounterTtlResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiIncrCounterTtlResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiIncrCounterTtlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiIncrCounterTtlResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiIncrCounterTtlResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterTtlResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiIncrCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterTtlResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiIncrCounterTtlResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiIncrCounterTtl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiIncrCounterTtlResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiIncrCounterTtlResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiIncrCounterTtlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiIncrCounterTtlResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreSetCounterArgs struct {
  Request *SetCounterRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreSetCounterArgs() *SharestoreSetCounterArgs {
  return &SharestoreSetCounterArgs{}
}

var SharestoreSetCounterArgs_Request_DEFAULT *SetCounterRequest
func (p *SharestoreSetCounterArgs) GetRequest() *SetCounterRequest {
  if !p.IsSetRequest() {
    return SharestoreSetCounterArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreSetCounterArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreSetCounterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreSetCounterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &SetCounterRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreSetCounterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setCounter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreSetCounterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreSetCounterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreSetCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreSetCounterResult struct {
  Success *SetCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreSetCounterResult() *SharestoreSetCounterResult {
  return &SharestoreSetCounterResult{}
}

var SharestoreSetCounterResult_Success_DEFAULT *SetCounterResponse
func (p *SharestoreSetCounterResult) GetSuccess() *SetCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreSetCounterResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreSetCounterResult_E_DEFAULT *SharestoreException
func (p *SharestoreSetCounterResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreSetCounterResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreSetCounterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreSetCounterResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreSetCounterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreSetCounterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SetCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreSetCounterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreSetCounterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setCounter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreSetCounterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreSetCounterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreSetCounterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreSetCounterResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreSetCounterTtlArgs struct {
  Request *SetCounterTtlRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreSetCounterTtlArgs() *SharestoreSetCounterTtlArgs {
  return &SharestoreSetCounterTtlArgs{}
}

var SharestoreSetCounterTtlArgs_Request_DEFAULT *SetCounterTtlRequest
func (p *SharestoreSetCounterTtlArgs) GetRequest() *SetCounterTtlRequest {
  if !p.IsSetRequest() {
    return SharestoreSetCounterTtlArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreSetCounterTtlArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreSetCounterTtlArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreSetCounterTtlArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &SetCounterTtlRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreSetCounterTtlArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setCounterTtl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreSetCounterTtlArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreSetCounterTtlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreSetCounterTtlArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreSetCounterTtlResult struct {
  Success *SetCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreSetCounterTtlResult() *SharestoreSetCounterTtlResult {
  return &SharestoreSetCounterTtlResult{}
}

var SharestoreSetCounterTtlResult_Success_DEFAULT *SetCounterResponse
func (p *SharestoreSetCounterTtlResult) GetSuccess() *SetCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreSetCounterTtlResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreSetCounterTtlResult_E_DEFAULT *SharestoreException
func (p *SharestoreSetCounterTtlResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreSetCounterTtlResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreSetCounterTtlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreSetCounterTtlResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreSetCounterTtlResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreSetCounterTtlResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SetCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreSetCounterTtlResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreSetCounterTtlResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setCounterTtl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreSetCounterTtlResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreSetCounterTtlResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreSetCounterTtlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreSetCounterTtlResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreMultiSetCounterArgs struct {
  Request *MultiSetCounterRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreMultiSetCounterArgs() *SharestoreMultiSetCounterArgs {
  return &SharestoreMultiSetCounterArgs{}
}

var SharestoreMultiSetCounterArgs_Request_DEFAULT *MultiSetCounterRequest
func (p *SharestoreMultiSetCounterArgs) GetRequest() *MultiSetCounterRequest {
  if !p.IsSetRequest() {
    return SharestoreMultiSetCounterArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreMultiSetCounterArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreMultiSetCounterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiSetCounterRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiSetCounter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiSetCounterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreMultiSetCounterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiSetCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiSetCounterResult struct {
  Success *MultiSetCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiSetCounterResult() *SharestoreMultiSetCounterResult {
  return &SharestoreMultiSetCounterResult{}
}

var SharestoreMultiSetCounterResult_Success_DEFAULT *MultiSetCounterResponse
func (p *SharestoreMultiSetCounterResult) GetSuccess() *MultiSetCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiSetCounterResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiSetCounterResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiSetCounterResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiSetCounterResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiSetCounterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiSetCounterResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiSetCounterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiSetCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiSetCounter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiSetCounterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiSetCounterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiSetCounterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiSetCounterResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreMultiSetCounterTtlArgs struct {
  Request *MultiSetCounterTtlRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreMultiSetCounterTtlArgs() *SharestoreMultiSetCounterTtlArgs {
  return &SharestoreMultiSetCounterTtlArgs{}
}

var SharestoreMultiSetCounterTtlArgs_Request_DEFAULT *MultiSetCounterTtlRequest
func (p *SharestoreMultiSetCounterTtlArgs) GetRequest() *MultiSetCounterTtlRequest {
  if !p.IsSetRequest() {
    return SharestoreMultiSetCounterTtlArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreMultiSetCounterTtlArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreMultiSetCounterTtlArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterTtlArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiSetCounterTtlRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterTtlArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiSetCounterTtl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiSetCounterTtlArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreMultiSetCounterTtlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiSetCounterTtlArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiSetCounterTtlResult struct {
  Success *MultiSetCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiSetCounterTtlResult() *SharestoreMultiSetCounterTtlResult {
  return &SharestoreMultiSetCounterTtlResult{}
}

var SharestoreMultiSetCounterTtlResult_Success_DEFAULT *MultiSetCounterResponse
func (p *SharestoreMultiSetCounterTtlResult) GetSuccess() *MultiSetCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiSetCounterTtlResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiSetCounterTtlResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiSetCounterTtlResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiSetCounterTtlResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiSetCounterTtlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiSetCounterTtlResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiSetCounterTtlResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterTtlResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiSetCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterTtlResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiSetCounterTtlResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiSetCounterTtl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiSetCounterTtlResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiSetCounterTtlResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiSetCounterTtlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiSetCounterTtlResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreGetCounterArgs struct {
  Request *GetCounterRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreGetCounterArgs() *SharestoreGetCounterArgs {
  return &SharestoreGetCounterArgs{}
}

var SharestoreGetCounterArgs_Request_DEFAULT *GetCounterRequest
func (p *SharestoreGetCounterArgs) GetRequest() *GetCounterRequest {
  if !p.IsSetRequest() {
    return SharestoreGetCounterArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreGetCounterArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreGetCounterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreGetCounterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetCounterRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreGetCounterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCounter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreGetCounterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreGetCounterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreGetCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreGetCounterResult struct {
  Success *GetCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreGetCounterResult() *SharestoreGetCounterResult {
  return &SharestoreGetCounterResult{}
}

var SharestoreGetCounterResult_Success_DEFAULT *GetCounterResponse
func (p *SharestoreGetCounterResult) GetSuccess() *GetCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreGetCounterResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreGetCounterResult_E_DEFAULT *SharestoreException
func (p *SharestoreGetCounterResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreGetCounterResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreGetCounterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreGetCounterResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreGetCounterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreGetCounterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreGetCounterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreGetCounterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCounter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreGetCounterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreGetCounterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreGetCounterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreGetCounterResult(%+v)", *p)
}

// Attributes:
//  - Mrequest
type SharestoreMultiGetCounterArgs struct {
  Mrequest *MultiGetCounterRequest `thrift:"mrequest,1" db:"mrequest" json:"mrequest"`
}

func NewSharestoreMultiGetCounterArgs() *SharestoreMultiGetCounterArgs {
  return &SharestoreMultiGetCounterArgs{}
}

var SharestoreMultiGetCounterArgs_Mrequest_DEFAULT *MultiGetCounterRequest
func (p *SharestoreMultiGetCounterArgs) GetMrequest() *MultiGetCounterRequest {
  if !p.IsSetMrequest() {
    return SharestoreMultiGetCounterArgs_Mrequest_DEFAULT
  }
return p.Mrequest
}
func (p *SharestoreMultiGetCounterArgs) IsSetMrequest() bool {
  return p.Mrequest != nil
}

func (p *SharestoreMultiGetCounterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiGetCounterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Mrequest = &MultiGetCounterRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Mrequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mrequest), err)
  }
  return nil
}

func (p *SharestoreMultiGetCounterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiGetCounter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiGetCounterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mrequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mrequest: ", p), err) }
  if err := p.Mrequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mrequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mrequest: ", p), err) }
  return err
}

func (p *SharestoreMultiGetCounterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiGetCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiGetCounterResult struct {
  Success *MultiGetCounterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiGetCounterResult() *SharestoreMultiGetCounterResult {
  return &SharestoreMultiGetCounterResult{}
}

var SharestoreMultiGetCounterResult_Success_DEFAULT *MultiGetCounterResponse
func (p *SharestoreMultiGetCounterResult) GetSuccess() *MultiGetCounterResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiGetCounterResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiGetCounterResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiGetCounterResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiGetCounterResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiGetCounterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiGetCounterResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiGetCounterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiGetCounterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiGetCounterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiGetCounterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiGetCounterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiGetCounter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiGetCounterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiGetCounterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiGetCounterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiGetCounterResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreDsSetValueArgs struct {
  Request *DSSetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreDsSetValueArgs() *SharestoreDsSetValueArgs {
  return &SharestoreDsSetValueArgs{}
}

var SharestoreDsSetValueArgs_Request_DEFAULT *DSSetRequest
func (p *SharestoreDsSetValueArgs) GetRequest() *DSSetRequest {
  if !p.IsSetRequest() {
    return SharestoreDsSetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreDsSetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreDsSetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsSetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DSSetRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreDsSetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsSetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsSetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreDsSetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsSetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreDsSetValueResult struct {
  Success *DSSetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreDsSetValueResult() *SharestoreDsSetValueResult {
  return &SharestoreDsSetValueResult{}
}

var SharestoreDsSetValueResult_Success_DEFAULT *DSSetResponse
func (p *SharestoreDsSetValueResult) GetSuccess() *DSSetResponse {
  if !p.IsSetSuccess() {
    return SharestoreDsSetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreDsSetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreDsSetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreDsSetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreDsSetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreDsSetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreDsSetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsSetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DSSetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreDsSetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreDsSetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsSetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsSetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreDsSetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreDsSetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsSetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreDsRemValueArgs struct {
  Request *DSRemRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreDsRemValueArgs() *SharestoreDsRemValueArgs {
  return &SharestoreDsRemValueArgs{}
}

var SharestoreDsRemValueArgs_Request_DEFAULT *DSRemRequest
func (p *SharestoreDsRemValueArgs) GetRequest() *DSRemRequest {
  if !p.IsSetRequest() {
    return SharestoreDsRemValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreDsRemValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreDsRemValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsRemValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DSRemRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreDsRemValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsRemValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsRemValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreDsRemValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsRemValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreDsRemValueResult struct {
  Success *DSRemResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreDsRemValueResult() *SharestoreDsRemValueResult {
  return &SharestoreDsRemValueResult{}
}

var SharestoreDsRemValueResult_Success_DEFAULT *DSRemResponse
func (p *SharestoreDsRemValueResult) GetSuccess() *DSRemResponse {
  if !p.IsSetSuccess() {
    return SharestoreDsRemValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreDsRemValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreDsRemValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreDsRemValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreDsRemValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreDsRemValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreDsRemValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsRemValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DSRemResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreDsRemValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreDsRemValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsRemValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsRemValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreDsRemValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreDsRemValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsRemValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreDsGetValueArgs struct {
  Request *DSGetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreDsGetValueArgs() *SharestoreDsGetValueArgs {
  return &SharestoreDsGetValueArgs{}
}

var SharestoreDsGetValueArgs_Request_DEFAULT *DSGetRequest
func (p *SharestoreDsGetValueArgs) GetRequest() *DSGetRequest {
  if !p.IsSetRequest() {
    return SharestoreDsGetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreDsGetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreDsGetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsGetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DSGetRequest{
  Segment: "default",

  NeedRouting: true,

  MaxNums: 5000,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreDsGetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsGetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsGetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreDsGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreDsGetValueResult struct {
  Success *DSGetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreDsGetValueResult() *SharestoreDsGetValueResult {
  return &SharestoreDsGetValueResult{}
}

var SharestoreDsGetValueResult_Success_DEFAULT *DSGetResponse
func (p *SharestoreDsGetValueResult) GetSuccess() *DSGetResponse {
  if !p.IsSetSuccess() {
    return SharestoreDsGetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreDsGetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreDsGetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreDsGetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreDsGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreDsGetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreDsGetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsGetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DSGetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreDsGetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreDsGetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsGetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsGetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreDsGetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreDsGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsGetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreDsCountValueArgs struct {
  Request *DSCountRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreDsCountValueArgs() *SharestoreDsCountValueArgs {
  return &SharestoreDsCountValueArgs{}
}

var SharestoreDsCountValueArgs_Request_DEFAULT *DSCountRequest
func (p *SharestoreDsCountValueArgs) GetRequest() *DSCountRequest {
  if !p.IsSetRequest() {
    return SharestoreDsCountValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreDsCountValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreDsCountValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsCountValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DSCountRequest{
  Segment: "default",

  NeedRouting: true,

  MaxNums: 5000,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreDsCountValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsCountValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsCountValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreDsCountValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsCountValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreDsCountValueResult struct {
  Success *DSCountResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreDsCountValueResult() *SharestoreDsCountValueResult {
  return &SharestoreDsCountValueResult{}
}

var SharestoreDsCountValueResult_Success_DEFAULT *DSCountResponse
func (p *SharestoreDsCountValueResult) GetSuccess() *DSCountResponse {
  if !p.IsSetSuccess() {
    return SharestoreDsCountValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreDsCountValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreDsCountValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreDsCountValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreDsCountValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreDsCountValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreDsCountValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsCountValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DSCountResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreDsCountValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreDsCountValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsCountValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsCountValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreDsCountValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreDsCountValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsCountValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreDsDelValueArgs struct {
  Request *DSDelRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreDsDelValueArgs() *SharestoreDsDelValueArgs {
  return &SharestoreDsDelValueArgs{}
}

var SharestoreDsDelValueArgs_Request_DEFAULT *DSDelRequest
func (p *SharestoreDsDelValueArgs) GetRequest() *DSDelRequest {
  if !p.IsSetRequest() {
    return SharestoreDsDelValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreDsDelValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreDsDelValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsDelValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DSDelRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreDsDelValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsDelValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsDelValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreDsDelValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsDelValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreDsDelValueResult struct {
  Success *DSDelResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreDsDelValueResult() *SharestoreDsDelValueResult {
  return &SharestoreDsDelValueResult{}
}

var SharestoreDsDelValueResult_Success_DEFAULT *DSDelResponse
func (p *SharestoreDsDelValueResult) GetSuccess() *DSDelResponse {
  if !p.IsSetSuccess() {
    return SharestoreDsDelValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreDsDelValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreDsDelValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreDsDelValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreDsDelValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreDsDelValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreDsDelValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsDelValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DSDelResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreDsDelValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreDsDelValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsDelValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsDelValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreDsDelValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreDsDelValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsDelValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreDsIsMemberArgs struct {
  Request *DSIsMemberRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreDsIsMemberArgs() *SharestoreDsIsMemberArgs {
  return &SharestoreDsIsMemberArgs{}
}

var SharestoreDsIsMemberArgs_Request_DEFAULT *DSIsMemberRequest
func (p *SharestoreDsIsMemberArgs) GetRequest() *DSIsMemberRequest {
  if !p.IsSetRequest() {
    return SharestoreDsIsMemberArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreDsIsMemberArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreDsIsMemberArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsIsMemberArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DSIsMemberRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreDsIsMemberArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsIsMember_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsIsMemberArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreDsIsMemberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsIsMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreDsIsMemberResult struct {
  Success *DSIsMemberResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreDsIsMemberResult() *SharestoreDsIsMemberResult {
  return &SharestoreDsIsMemberResult{}
}

var SharestoreDsIsMemberResult_Success_DEFAULT *DSIsMemberResponse
func (p *SharestoreDsIsMemberResult) GetSuccess() *DSIsMemberResponse {
  if !p.IsSetSuccess() {
    return SharestoreDsIsMemberResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreDsIsMemberResult_E_DEFAULT *SharestoreException
func (p *SharestoreDsIsMemberResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreDsIsMemberResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreDsIsMemberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreDsIsMemberResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreDsIsMemberResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreDsIsMemberResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DSIsMemberResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreDsIsMemberResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreDsIsMemberResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dsIsMember_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreDsIsMemberResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreDsIsMemberResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreDsIsMemberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreDsIsMemberResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreHashSetValueArgs struct {
  Request *HashSetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreHashSetValueArgs() *SharestoreHashSetValueArgs {
  return &SharestoreHashSetValueArgs{}
}

var SharestoreHashSetValueArgs_Request_DEFAULT *HashSetRequest
func (p *SharestoreHashSetValueArgs) GetRequest() *HashSetRequest {
  if !p.IsSetRequest() {
    return SharestoreHashSetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreHashSetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreHashSetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreHashSetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &HashSetRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreHashSetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "hashSetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreHashSetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreHashSetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreHashSetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreHashSetValueResult struct {
  Success *HashSetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreHashSetValueResult() *SharestoreHashSetValueResult {
  return &SharestoreHashSetValueResult{}
}

var SharestoreHashSetValueResult_Success_DEFAULT *HashSetResponse
func (p *SharestoreHashSetValueResult) GetSuccess() *HashSetResponse {
  if !p.IsSetSuccess() {
    return SharestoreHashSetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreHashSetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreHashSetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreHashSetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreHashSetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreHashSetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreHashSetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreHashSetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &HashSetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreHashSetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreHashSetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "hashSetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreHashSetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreHashSetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreHashSetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreHashSetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreMultiHashSetValueArgs struct {
  Request *MultiHashSetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreMultiHashSetValueArgs() *SharestoreMultiHashSetValueArgs {
  return &SharestoreMultiHashSetValueArgs{}
}

var SharestoreMultiHashSetValueArgs_Request_DEFAULT *MultiHashSetRequest
func (p *SharestoreMultiHashSetValueArgs) GetRequest() *MultiHashSetRequest {
  if !p.IsSetRequest() {
    return SharestoreMultiHashSetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreMultiHashSetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreMultiHashSetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiHashSetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiHashSetRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreMultiHashSetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiHashSetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiHashSetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreMultiHashSetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiHashSetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiHashSetValueResult struct {
  Success *MultiHashSetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiHashSetValueResult() *SharestoreMultiHashSetValueResult {
  return &SharestoreMultiHashSetValueResult{}
}

var SharestoreMultiHashSetValueResult_Success_DEFAULT *MultiHashSetResponse
func (p *SharestoreMultiHashSetValueResult) GetSuccess() *MultiHashSetResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiHashSetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiHashSetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiHashSetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiHashSetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiHashSetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiHashSetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiHashSetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiHashSetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiHashSetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiHashSetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiHashSetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiHashSetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiHashSetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiHashSetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiHashSetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiHashSetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreHashRemValueArgs struct {
  Request *HashRemRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreHashRemValueArgs() *SharestoreHashRemValueArgs {
  return &SharestoreHashRemValueArgs{}
}

var SharestoreHashRemValueArgs_Request_DEFAULT *HashRemRequest
func (p *SharestoreHashRemValueArgs) GetRequest() *HashRemRequest {
  if !p.IsSetRequest() {
    return SharestoreHashRemValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreHashRemValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreHashRemValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreHashRemValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &HashRemRequest{
  Segment: "default",

  Type:   0,

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreHashRemValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "hashRemValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreHashRemValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreHashRemValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreHashRemValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreHashRemValueResult struct {
  Success *HashRemResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreHashRemValueResult() *SharestoreHashRemValueResult {
  return &SharestoreHashRemValueResult{}
}

var SharestoreHashRemValueResult_Success_DEFAULT *HashRemResponse
func (p *SharestoreHashRemValueResult) GetSuccess() *HashRemResponse {
  if !p.IsSetSuccess() {
    return SharestoreHashRemValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreHashRemValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreHashRemValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreHashRemValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreHashRemValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreHashRemValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreHashRemValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreHashRemValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &HashRemResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreHashRemValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreHashRemValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "hashRemValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreHashRemValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreHashRemValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreHashRemValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreHashRemValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreMultiHashRemValueArgs struct {
  Request *MultiHashRemRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreMultiHashRemValueArgs() *SharestoreMultiHashRemValueArgs {
  return &SharestoreMultiHashRemValueArgs{}
}

var SharestoreMultiHashRemValueArgs_Request_DEFAULT *MultiHashRemRequest
func (p *SharestoreMultiHashRemValueArgs) GetRequest() *MultiHashRemRequest {
  if !p.IsSetRequest() {
    return SharestoreMultiHashRemValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreMultiHashRemValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreMultiHashRemValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiHashRemValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiHashRemRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreMultiHashRemValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiHashRemValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiHashRemValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreMultiHashRemValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiHashRemValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiHashRemValueResult struct {
  Success *MultiHashRemResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiHashRemValueResult() *SharestoreMultiHashRemValueResult {
  return &SharestoreMultiHashRemValueResult{}
}

var SharestoreMultiHashRemValueResult_Success_DEFAULT *MultiHashRemResponse
func (p *SharestoreMultiHashRemValueResult) GetSuccess() *MultiHashRemResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiHashRemValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiHashRemValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiHashRemValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiHashRemValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiHashRemValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiHashRemValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiHashRemValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiHashRemValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiHashRemResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiHashRemValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiHashRemValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiHashRemValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiHashRemValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiHashRemValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiHashRemValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiHashRemValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreHashGetValueArgs struct {
  Request *HashGetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreHashGetValueArgs() *SharestoreHashGetValueArgs {
  return &SharestoreHashGetValueArgs{}
}

var SharestoreHashGetValueArgs_Request_DEFAULT *HashGetRequest
func (p *SharestoreHashGetValueArgs) GetRequest() *HashGetRequest {
  if !p.IsSetRequest() {
    return SharestoreHashGetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreHashGetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreHashGetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreHashGetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &HashGetRequest{
  Segment: "default",

  Type:   0,

  NeedRouting: true,

  MaxNums: 5000,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreHashGetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "hashGetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreHashGetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreHashGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreHashGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreHashGetValueResult struct {
  Success *HashGetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreHashGetValueResult() *SharestoreHashGetValueResult {
  return &SharestoreHashGetValueResult{}
}

var SharestoreHashGetValueResult_Success_DEFAULT *HashGetResponse
func (p *SharestoreHashGetValueResult) GetSuccess() *HashGetResponse {
  if !p.IsSetSuccess() {
    return SharestoreHashGetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreHashGetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreHashGetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreHashGetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreHashGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreHashGetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreHashGetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreHashGetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &HashGetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreHashGetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreHashGetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "hashGetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreHashGetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreHashGetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreHashGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreHashGetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreMultiHashGetValueArgs struct {
  Request *MultiHashGetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreMultiHashGetValueArgs() *SharestoreMultiHashGetValueArgs {
  return &SharestoreMultiHashGetValueArgs{}
}

var SharestoreMultiHashGetValueArgs_Request_DEFAULT *MultiHashGetRequest
func (p *SharestoreMultiHashGetValueArgs) GetRequest() *MultiHashGetRequest {
  if !p.IsSetRequest() {
    return SharestoreMultiHashGetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreMultiHashGetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreMultiHashGetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiHashGetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiHashGetRequest{
  Segment: "default",

  Types: []HashType{
  },

  MaxNums: 5000,

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreMultiHashGetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiHashGetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiHashGetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreMultiHashGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiHashGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreMultiHashGetValueResult struct {
  Success *MultiHashGetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreMultiHashGetValueResult() *SharestoreMultiHashGetValueResult {
  return &SharestoreMultiHashGetValueResult{}
}

var SharestoreMultiHashGetValueResult_Success_DEFAULT *MultiHashGetResponse
func (p *SharestoreMultiHashGetValueResult) GetSuccess() *MultiHashGetResponse {
  if !p.IsSetSuccess() {
    return SharestoreMultiHashGetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreMultiHashGetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreMultiHashGetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreMultiHashGetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreMultiHashGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreMultiHashGetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreMultiHashGetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreMultiHashGetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiHashGetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreMultiHashGetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreMultiHashGetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiHashGetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreMultiHashGetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiHashGetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreMultiHashGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreMultiHashGetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreHashCountValueArgs struct {
  Request *HashCountRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreHashCountValueArgs() *SharestoreHashCountValueArgs {
  return &SharestoreHashCountValueArgs{}
}

var SharestoreHashCountValueArgs_Request_DEFAULT *HashCountRequest
func (p *SharestoreHashCountValueArgs) GetRequest() *HashCountRequest {
  if !p.IsSetRequest() {
    return SharestoreHashCountValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreHashCountValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreHashCountValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreHashCountValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &HashCountRequest{
  Segment: "default",

  Type:   0,

  NeedRouting: true,

  MaxNums: 5000,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreHashCountValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "hashCountValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreHashCountValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreHashCountValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreHashCountValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreHashCountValueResult struct {
  Success *HashCountResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreHashCountValueResult() *SharestoreHashCountValueResult {
  return &SharestoreHashCountValueResult{}
}

var SharestoreHashCountValueResult_Success_DEFAULT *HashCountResponse
func (p *SharestoreHashCountValueResult) GetSuccess() *HashCountResponse {
  if !p.IsSetSuccess() {
    return SharestoreHashCountValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreHashCountValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreHashCountValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreHashCountValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreHashCountValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreHashCountValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreHashCountValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreHashCountValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &HashCountResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreHashCountValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreHashCountValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "hashCountValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreHashCountValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreHashCountValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreHashCountValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreHashCountValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreZsetAddValueArgs struct {
  Request *ZSetAddRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreZsetAddValueArgs() *SharestoreZsetAddValueArgs {
  return &SharestoreZsetAddValueArgs{}
}

var SharestoreZsetAddValueArgs_Request_DEFAULT *ZSetAddRequest
func (p *SharestoreZsetAddValueArgs) GetRequest() *ZSetAddRequest {
  if !p.IsSetRequest() {
    return SharestoreZsetAddValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreZsetAddValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreZsetAddValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetAddValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ZSetAddRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreZsetAddValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetAddValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetAddValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreZsetAddValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetAddValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreZsetAddValueResult struct {
  Success *ZSetAddResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreZsetAddValueResult() *SharestoreZsetAddValueResult {
  return &SharestoreZsetAddValueResult{}
}

var SharestoreZsetAddValueResult_Success_DEFAULT *ZSetAddResponse
func (p *SharestoreZsetAddValueResult) GetSuccess() *ZSetAddResponse {
  if !p.IsSetSuccess() {
    return SharestoreZsetAddValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreZsetAddValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreZsetAddValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreZsetAddValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreZsetAddValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreZsetAddValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreZsetAddValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetAddValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ZSetAddResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreZsetAddValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreZsetAddValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetAddValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetAddValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetAddValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetAddValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetAddValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreZsetRemValueArgs struct {
  Request *ZSetRemRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreZsetRemValueArgs() *SharestoreZsetRemValueArgs {
  return &SharestoreZsetRemValueArgs{}
}

var SharestoreZsetRemValueArgs_Request_DEFAULT *ZSetRemRequest
func (p *SharestoreZsetRemValueArgs) GetRequest() *ZSetRemRequest {
  if !p.IsSetRequest() {
    return SharestoreZsetRemValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreZsetRemValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreZsetRemValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetRemValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ZSetRemRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreZsetRemValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetRemValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetRemValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreZsetRemValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetRemValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreZsetRemValueResult struct {
  Success *ZSetRemResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreZsetRemValueResult() *SharestoreZsetRemValueResult {
  return &SharestoreZsetRemValueResult{}
}

var SharestoreZsetRemValueResult_Success_DEFAULT *ZSetRemResponse
func (p *SharestoreZsetRemValueResult) GetSuccess() *ZSetRemResponse {
  if !p.IsSetSuccess() {
    return SharestoreZsetRemValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreZsetRemValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreZsetRemValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreZsetRemValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreZsetRemValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreZsetRemValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreZsetRemValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetRemValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ZSetRemResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreZsetRemValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreZsetRemValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetRemValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetRemValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetRemValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetRemValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetRemValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreZsetGetValueArgs struct {
  Request *ZSetGetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreZsetGetValueArgs() *SharestoreZsetGetValueArgs {
  return &SharestoreZsetGetValueArgs{}
}

var SharestoreZsetGetValueArgs_Request_DEFAULT *ZSetGetRequest
func (p *SharestoreZsetGetValueArgs) GetRequest() *ZSetGetRequest {
  if !p.IsSetRequest() {
    return SharestoreZsetGetValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreZsetGetValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreZsetGetValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetGetValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ZSetGetRequest{
  Segment: "default",

  WithScores: true,

  NeedRouting: true,

  MaxNums: 5000,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreZsetGetValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetGetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetGetValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreZsetGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreZsetGetValueResult struct {
  Success *ZSetGetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreZsetGetValueResult() *SharestoreZsetGetValueResult {
  return &SharestoreZsetGetValueResult{}
}

var SharestoreZsetGetValueResult_Success_DEFAULT *ZSetGetResponse
func (p *SharestoreZsetGetValueResult) GetSuccess() *ZSetGetResponse {
  if !p.IsSetSuccess() {
    return SharestoreZsetGetValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreZsetGetValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreZsetGetValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreZsetGetValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreZsetGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreZsetGetValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreZsetGetValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetGetValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ZSetGetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreZsetGetValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreZsetGetValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetGetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetGetValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetGetValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetGetValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreZsetGetRangeValueArgs struct {
  Request *ZSetGetRangeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreZsetGetRangeValueArgs() *SharestoreZsetGetRangeValueArgs {
  return &SharestoreZsetGetRangeValueArgs{}
}

var SharestoreZsetGetRangeValueArgs_Request_DEFAULT *ZSetGetRangeRequest
func (p *SharestoreZsetGetRangeValueArgs) GetRequest() *ZSetGetRangeRequest {
  if !p.IsSetRequest() {
    return SharestoreZsetGetRangeValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreZsetGetRangeValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreZsetGetRangeValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetGetRangeValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ZSetGetRangeRequest{
  Segment: "default",

  WithScores: true,

  NeedRouting: true,

  MaxNums: 5000,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreZsetGetRangeValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetGetRangeValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetGetRangeValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreZsetGetRangeValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetGetRangeValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreZsetGetRangeValueResult struct {
  Success *ZSetGetRangeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreZsetGetRangeValueResult() *SharestoreZsetGetRangeValueResult {
  return &SharestoreZsetGetRangeValueResult{}
}

var SharestoreZsetGetRangeValueResult_Success_DEFAULT *ZSetGetRangeResponse
func (p *SharestoreZsetGetRangeValueResult) GetSuccess() *ZSetGetRangeResponse {
  if !p.IsSetSuccess() {
    return SharestoreZsetGetRangeValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreZsetGetRangeValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreZsetGetRangeValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreZsetGetRangeValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreZsetGetRangeValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreZsetGetRangeValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreZsetGetRangeValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetGetRangeValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ZSetGetRangeResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreZsetGetRangeValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreZsetGetRangeValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetGetRangeValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetGetRangeValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetGetRangeValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetGetRangeValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetGetRangeValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreZsetRemRangeValueArgs struct {
  Request *ZSetRemRangeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreZsetRemRangeValueArgs() *SharestoreZsetRemRangeValueArgs {
  return &SharestoreZsetRemRangeValueArgs{}
}

var SharestoreZsetRemRangeValueArgs_Request_DEFAULT *ZSetRemRangeRequest
func (p *SharestoreZsetRemRangeValueArgs) GetRequest() *ZSetRemRangeRequest {
  if !p.IsSetRequest() {
    return SharestoreZsetRemRangeValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreZsetRemRangeValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreZsetRemRangeValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetRemRangeValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ZSetRemRangeRequest{
  Segment: "default",

  NeedRouting: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreZsetRemRangeValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetRemRangeValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetRemRangeValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreZsetRemRangeValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetRemRangeValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreZsetRemRangeValueResult struct {
  Success *ZSetRemRangeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreZsetRemRangeValueResult() *SharestoreZsetRemRangeValueResult {
  return &SharestoreZsetRemRangeValueResult{}
}

var SharestoreZsetRemRangeValueResult_Success_DEFAULT *ZSetRemRangeResponse
func (p *SharestoreZsetRemRangeValueResult) GetSuccess() *ZSetRemRangeResponse {
  if !p.IsSetSuccess() {
    return SharestoreZsetRemRangeValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreZsetRemRangeValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreZsetRemRangeValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreZsetRemRangeValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreZsetRemRangeValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreZsetRemRangeValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreZsetRemRangeValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetRemRangeValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ZSetRemRangeResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreZsetRemRangeValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreZsetRemRangeValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetRemRangeValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetRemRangeValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetRemRangeValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetRemRangeValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetRemRangeValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreZsetCountValueArgs struct {
  Request *ZSetCountRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreZsetCountValueArgs() *SharestoreZsetCountValueArgs {
  return &SharestoreZsetCountValueArgs{}
}

var SharestoreZsetCountValueArgs_Request_DEFAULT *ZSetCountRequest
func (p *SharestoreZsetCountValueArgs) GetRequest() *ZSetCountRequest {
  if !p.IsSetRequest() {
    return SharestoreZsetCountValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreZsetCountValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreZsetCountValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetCountValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ZSetCountRequest{
  Segment: "default",

  NeedRouting: true,

  MaxNums: 5000,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreZsetCountValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetCountValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetCountValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreZsetCountValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetCountValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreZsetCountValueResult struct {
  Success *ZSetCountResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreZsetCountValueResult() *SharestoreZsetCountValueResult {
  return &SharestoreZsetCountValueResult{}
}

var SharestoreZsetCountValueResult_Success_DEFAULT *ZSetCountResponse
func (p *SharestoreZsetCountValueResult) GetSuccess() *ZSetCountResponse {
  if !p.IsSetSuccess() {
    return SharestoreZsetCountValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreZsetCountValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreZsetCountValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreZsetCountValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreZsetCountValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreZsetCountValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreZsetCountValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetCountValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ZSetCountResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreZsetCountValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreZsetCountValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetCountValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetCountValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetCountValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetCountValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetCountValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SharestoreZsetScanValueArgs struct {
  Request *ZSetScanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSharestoreZsetScanValueArgs() *SharestoreZsetScanValueArgs {
  return &SharestoreZsetScanValueArgs{}
}

var SharestoreZsetScanValueArgs_Request_DEFAULT *ZSetScanRequest
func (p *SharestoreZsetScanValueArgs) GetRequest() *ZSetScanRequest {
  if !p.IsSetRequest() {
    return SharestoreZsetScanValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SharestoreZsetScanValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SharestoreZsetScanValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetScanValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ZSetScanRequest{
  Segment: "default",

  WithScores: true,

  NeedRouting: true,

  MaxNums: 5000,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SharestoreZsetScanValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetScanValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetScanValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SharestoreZsetScanValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetScanValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SharestoreZsetScanValueResult struct {
  Success *ZSetScanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SharestoreException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSharestoreZsetScanValueResult() *SharestoreZsetScanValueResult {
  return &SharestoreZsetScanValueResult{}
}

var SharestoreZsetScanValueResult_Success_DEFAULT *ZSetScanResponse
func (p *SharestoreZsetScanValueResult) GetSuccess() *ZSetScanResponse {
  if !p.IsSetSuccess() {
    return SharestoreZsetScanValueResult_Success_DEFAULT
  }
return p.Success
}
var SharestoreZsetScanValueResult_E_DEFAULT *SharestoreException
func (p *SharestoreZsetScanValueResult) GetE() *SharestoreException {
  if !p.IsSetE() {
    return SharestoreZsetScanValueResult_E_DEFAULT
  }
return p.E
}
func (p *SharestoreZsetScanValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SharestoreZsetScanValueResult) IsSetE() bool {
  return p.E != nil
}

func (p *SharestoreZsetScanValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharestoreZsetScanValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ZSetScanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SharestoreZsetScanValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &SharestoreException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SharestoreZsetScanValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "zsetScanValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharestoreZsetScanValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetScanValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SharestoreZsetScanValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharestoreZsetScanValueResult(%+v)", *p)
}


