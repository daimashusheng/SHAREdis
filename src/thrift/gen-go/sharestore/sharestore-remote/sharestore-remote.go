// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"sharestore"
)

var _ = sharestore.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  GetResponse getValue(GetRequest request)")
  fmt.Fprintln(os.Stderr, "  TtlResponse ttl(TtlRequest request)")
  fmt.Fprintln(os.Stderr, "  SetResponse setValue(SetRequest request)")
  fmt.Fprintln(os.Stderr, "  DelResponse delValue(DelRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiGetResponse multiGetValue(MultiGetRequest mrequest)")
  fmt.Fprintln(os.Stderr, "  MultiSetResponse multiSetValue(MultiSetRequest msequest)")
  fmt.Fprintln(os.Stderr, "  IncrCounterResponse incrCounter(IncrCounterRequest request)")
  fmt.Fprintln(os.Stderr, "  IncrCounterResponse incrCounterTtl(IncrCounterTtlRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiIncrCounterResponse multiIncrCounter(MultiIncrCounterRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiIncrCounterResponse multiIncrCounterTtl(MultiIncrCounterTtlRequest request)")
  fmt.Fprintln(os.Stderr, "  SetCounterResponse setCounter(SetCounterRequest request)")
  fmt.Fprintln(os.Stderr, "  SetCounterResponse setCounterTtl(SetCounterTtlRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiSetCounterResponse multiSetCounter(MultiSetCounterRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiSetCounterResponse multiSetCounterTtl(MultiSetCounterTtlRequest request)")
  fmt.Fprintln(os.Stderr, "  GetCounterResponse getCounter(GetCounterRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiGetCounterResponse multiGetCounter(MultiGetCounterRequest mrequest)")
  fmt.Fprintln(os.Stderr, "  DSSetResponse dsSetValue(DSSetRequest request)")
  fmt.Fprintln(os.Stderr, "  DSRemResponse dsRemValue(DSRemRequest request)")
  fmt.Fprintln(os.Stderr, "  DSGetResponse dsGetValue(DSGetRequest request)")
  fmt.Fprintln(os.Stderr, "  DSCountResponse dsCountValue(DSCountRequest request)")
  fmt.Fprintln(os.Stderr, "  DSDelResponse dsDelValue(DSDelRequest request)")
  fmt.Fprintln(os.Stderr, "  DSIsMemberResponse dsIsMember(DSIsMemberRequest request)")
  fmt.Fprintln(os.Stderr, "  HashSetResponse hashSetValue(HashSetRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiHashSetResponse multiHashSetValue(MultiHashSetRequest request)")
  fmt.Fprintln(os.Stderr, "  HashRemResponse hashRemValue(HashRemRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiHashRemResponse multiHashRemValue(MultiHashRemRequest request)")
  fmt.Fprintln(os.Stderr, "  HashGetResponse hashGetValue(HashGetRequest request)")
  fmt.Fprintln(os.Stderr, "  MultiHashGetResponse multiHashGetValue(MultiHashGetRequest request)")
  fmt.Fprintln(os.Stderr, "  HashCountResponse hashCountValue(HashCountRequest request)")
  fmt.Fprintln(os.Stderr, "  ZSetAddResponse zsetAddValue(ZSetAddRequest request)")
  fmt.Fprintln(os.Stderr, "  ZSetRemResponse zsetRemValue(ZSetRemRequest request)")
  fmt.Fprintln(os.Stderr, "  ZSetGetResponse zsetGetValue(ZSetGetRequest request)")
  fmt.Fprintln(os.Stderr, "  ZSetGetRangeResponse zsetGetRangeValue(ZSetGetRangeRequest request)")
  fmt.Fprintln(os.Stderr, "  ZSetRemRangeResponse zsetRemRangeValue(ZSetRemRangeRequest request)")
  fmt.Fprintln(os.Stderr, "  ZSetCountResponse zsetCountValue(ZSetCountRequest request)")
  fmt.Fprintln(os.Stderr, "  ZSetScanResponse zsetScanValue(ZSetScanRequest request)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := sharestore.NewSharestoreClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetValue requires 1 args")
      flag.Usage()
    }
    arg232 := flag.Arg(1)
    mbTrans233 := thrift.NewTMemoryBufferLen(len(arg232))
    defer mbTrans233.Close()
    _, err234 := mbTrans233.WriteString(arg232)
    if err234 != nil {
      Usage()
      return
    }
    factory235 := thrift.NewTJSONProtocolFactory()
    jsProt236 := factory235.GetProtocol(mbTrans233)
    argvalue0 := sharestore.NewGetRequest()
    err237 := argvalue0.Read(context.Background(), jsProt236)
    if err237 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ttl":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TTL requires 1 args")
      flag.Usage()
    }
    arg238 := flag.Arg(1)
    mbTrans239 := thrift.NewTMemoryBufferLen(len(arg238))
    defer mbTrans239.Close()
    _, err240 := mbTrans239.WriteString(arg238)
    if err240 != nil {
      Usage()
      return
    }
    factory241 := thrift.NewTJSONProtocolFactory()
    jsProt242 := factory241.GetProtocol(mbTrans239)
    argvalue0 := sharestore.NewTtlRequest()
    err243 := argvalue0.Read(context.Background(), jsProt242)
    if err243 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TTL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetValue requires 1 args")
      flag.Usage()
    }
    arg244 := flag.Arg(1)
    mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
    defer mbTrans245.Close()
    _, err246 := mbTrans245.WriteString(arg244)
    if err246 != nil {
      Usage()
      return
    }
    factory247 := thrift.NewTJSONProtocolFactory()
    jsProt248 := factory247.GetProtocol(mbTrans245)
    argvalue0 := sharestore.NewSetRequest()
    err249 := argvalue0.Read(context.Background(), jsProt248)
    if err249 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "delValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DelValue requires 1 args")
      flag.Usage()
    }
    arg250 := flag.Arg(1)
    mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
    defer mbTrans251.Close()
    _, err252 := mbTrans251.WriteString(arg250)
    if err252 != nil {
      Usage()
      return
    }
    factory253 := thrift.NewTJSONProtocolFactory()
    jsProt254 := factory253.GetProtocol(mbTrans251)
    argvalue0 := sharestore.NewDelRequest()
    err255 := argvalue0.Read(context.Background(), jsProt254)
    if err255 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DelValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiGetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiGetValue requires 1 args")
      flag.Usage()
    }
    arg256 := flag.Arg(1)
    mbTrans257 := thrift.NewTMemoryBufferLen(len(arg256))
    defer mbTrans257.Close()
    _, err258 := mbTrans257.WriteString(arg256)
    if err258 != nil {
      Usage()
      return
    }
    factory259 := thrift.NewTJSONProtocolFactory()
    jsProt260 := factory259.GetProtocol(mbTrans257)
    argvalue0 := sharestore.NewMultiGetRequest()
    err261 := argvalue0.Read(context.Background(), jsProt260)
    if err261 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiGetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiSetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiSetValue requires 1 args")
      flag.Usage()
    }
    arg262 := flag.Arg(1)
    mbTrans263 := thrift.NewTMemoryBufferLen(len(arg262))
    defer mbTrans263.Close()
    _, err264 := mbTrans263.WriteString(arg262)
    if err264 != nil {
      Usage()
      return
    }
    factory265 := thrift.NewTJSONProtocolFactory()
    jsProt266 := factory265.GetProtocol(mbTrans263)
    argvalue0 := sharestore.NewMultiSetRequest()
    err267 := argvalue0.Read(context.Background(), jsProt266)
    if err267 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiSetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "incrCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IncrCounter requires 1 args")
      flag.Usage()
    }
    arg268 := flag.Arg(1)
    mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
    defer mbTrans269.Close()
    _, err270 := mbTrans269.WriteString(arg268)
    if err270 != nil {
      Usage()
      return
    }
    factory271 := thrift.NewTJSONProtocolFactory()
    jsProt272 := factory271.GetProtocol(mbTrans269)
    argvalue0 := sharestore.NewIncrCounterRequest()
    err273 := argvalue0.Read(context.Background(), jsProt272)
    if err273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IncrCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "incrCounterTtl":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IncrCounterTtl requires 1 args")
      flag.Usage()
    }
    arg274 := flag.Arg(1)
    mbTrans275 := thrift.NewTMemoryBufferLen(len(arg274))
    defer mbTrans275.Close()
    _, err276 := mbTrans275.WriteString(arg274)
    if err276 != nil {
      Usage()
      return
    }
    factory277 := thrift.NewTJSONProtocolFactory()
    jsProt278 := factory277.GetProtocol(mbTrans275)
    argvalue0 := sharestore.NewIncrCounterTtlRequest()
    err279 := argvalue0.Read(context.Background(), jsProt278)
    if err279 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IncrCounterTtl(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiIncrCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiIncrCounter requires 1 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := sharestore.NewMultiIncrCounterRequest()
    err285 := argvalue0.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiIncrCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiIncrCounterTtl":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiIncrCounterTtl requires 1 args")
      flag.Usage()
    }
    arg286 := flag.Arg(1)
    mbTrans287 := thrift.NewTMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil {
      Usage()
      return
    }
    factory289 := thrift.NewTJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    argvalue0 := sharestore.NewMultiIncrCounterTtlRequest()
    err291 := argvalue0.Read(context.Background(), jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiIncrCounterTtl(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetCounter requires 1 args")
      flag.Usage()
    }
    arg292 := flag.Arg(1)
    mbTrans293 := thrift.NewTMemoryBufferLen(len(arg292))
    defer mbTrans293.Close()
    _, err294 := mbTrans293.WriteString(arg292)
    if err294 != nil {
      Usage()
      return
    }
    factory295 := thrift.NewTJSONProtocolFactory()
    jsProt296 := factory295.GetProtocol(mbTrans293)
    argvalue0 := sharestore.NewSetCounterRequest()
    err297 := argvalue0.Read(context.Background(), jsProt296)
    if err297 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setCounterTtl":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetCounterTtl requires 1 args")
      flag.Usage()
    }
    arg298 := flag.Arg(1)
    mbTrans299 := thrift.NewTMemoryBufferLen(len(arg298))
    defer mbTrans299.Close()
    _, err300 := mbTrans299.WriteString(arg298)
    if err300 != nil {
      Usage()
      return
    }
    factory301 := thrift.NewTJSONProtocolFactory()
    jsProt302 := factory301.GetProtocol(mbTrans299)
    argvalue0 := sharestore.NewSetCounterTtlRequest()
    err303 := argvalue0.Read(context.Background(), jsProt302)
    if err303 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetCounterTtl(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiSetCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiSetCounter requires 1 args")
      flag.Usage()
    }
    arg304 := flag.Arg(1)
    mbTrans305 := thrift.NewTMemoryBufferLen(len(arg304))
    defer mbTrans305.Close()
    _, err306 := mbTrans305.WriteString(arg304)
    if err306 != nil {
      Usage()
      return
    }
    factory307 := thrift.NewTJSONProtocolFactory()
    jsProt308 := factory307.GetProtocol(mbTrans305)
    argvalue0 := sharestore.NewMultiSetCounterRequest()
    err309 := argvalue0.Read(context.Background(), jsProt308)
    if err309 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiSetCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiSetCounterTtl":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiSetCounterTtl requires 1 args")
      flag.Usage()
    }
    arg310 := flag.Arg(1)
    mbTrans311 := thrift.NewTMemoryBufferLen(len(arg310))
    defer mbTrans311.Close()
    _, err312 := mbTrans311.WriteString(arg310)
    if err312 != nil {
      Usage()
      return
    }
    factory313 := thrift.NewTJSONProtocolFactory()
    jsProt314 := factory313.GetProtocol(mbTrans311)
    argvalue0 := sharestore.NewMultiSetCounterTtlRequest()
    err315 := argvalue0.Read(context.Background(), jsProt314)
    if err315 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiSetCounterTtl(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
      flag.Usage()
    }
    arg316 := flag.Arg(1)
    mbTrans317 := thrift.NewTMemoryBufferLen(len(arg316))
    defer mbTrans317.Close()
    _, err318 := mbTrans317.WriteString(arg316)
    if err318 != nil {
      Usage()
      return
    }
    factory319 := thrift.NewTJSONProtocolFactory()
    jsProt320 := factory319.GetProtocol(mbTrans317)
    argvalue0 := sharestore.NewGetCounterRequest()
    err321 := argvalue0.Read(context.Background(), jsProt320)
    if err321 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiGetCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiGetCounter requires 1 args")
      flag.Usage()
    }
    arg322 := flag.Arg(1)
    mbTrans323 := thrift.NewTMemoryBufferLen(len(arg322))
    defer mbTrans323.Close()
    _, err324 := mbTrans323.WriteString(arg322)
    if err324 != nil {
      Usage()
      return
    }
    factory325 := thrift.NewTJSONProtocolFactory()
    jsProt326 := factory325.GetProtocol(mbTrans323)
    argvalue0 := sharestore.NewMultiGetCounterRequest()
    err327 := argvalue0.Read(context.Background(), jsProt326)
    if err327 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiGetCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dsSetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DsSetValue requires 1 args")
      flag.Usage()
    }
    arg328 := flag.Arg(1)
    mbTrans329 := thrift.NewTMemoryBufferLen(len(arg328))
    defer mbTrans329.Close()
    _, err330 := mbTrans329.WriteString(arg328)
    if err330 != nil {
      Usage()
      return
    }
    factory331 := thrift.NewTJSONProtocolFactory()
    jsProt332 := factory331.GetProtocol(mbTrans329)
    argvalue0 := sharestore.NewDSSetRequest()
    err333 := argvalue0.Read(context.Background(), jsProt332)
    if err333 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DsSetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dsRemValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DsRemValue requires 1 args")
      flag.Usage()
    }
    arg334 := flag.Arg(1)
    mbTrans335 := thrift.NewTMemoryBufferLen(len(arg334))
    defer mbTrans335.Close()
    _, err336 := mbTrans335.WriteString(arg334)
    if err336 != nil {
      Usage()
      return
    }
    factory337 := thrift.NewTJSONProtocolFactory()
    jsProt338 := factory337.GetProtocol(mbTrans335)
    argvalue0 := sharestore.NewDSRemRequest()
    err339 := argvalue0.Read(context.Background(), jsProt338)
    if err339 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DsRemValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dsGetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DsGetValue requires 1 args")
      flag.Usage()
    }
    arg340 := flag.Arg(1)
    mbTrans341 := thrift.NewTMemoryBufferLen(len(arg340))
    defer mbTrans341.Close()
    _, err342 := mbTrans341.WriteString(arg340)
    if err342 != nil {
      Usage()
      return
    }
    factory343 := thrift.NewTJSONProtocolFactory()
    jsProt344 := factory343.GetProtocol(mbTrans341)
    argvalue0 := sharestore.NewDSGetRequest()
    err345 := argvalue0.Read(context.Background(), jsProt344)
    if err345 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DsGetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dsCountValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DsCountValue requires 1 args")
      flag.Usage()
    }
    arg346 := flag.Arg(1)
    mbTrans347 := thrift.NewTMemoryBufferLen(len(arg346))
    defer mbTrans347.Close()
    _, err348 := mbTrans347.WriteString(arg346)
    if err348 != nil {
      Usage()
      return
    }
    factory349 := thrift.NewTJSONProtocolFactory()
    jsProt350 := factory349.GetProtocol(mbTrans347)
    argvalue0 := sharestore.NewDSCountRequest()
    err351 := argvalue0.Read(context.Background(), jsProt350)
    if err351 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DsCountValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dsDelValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DsDelValue requires 1 args")
      flag.Usage()
    }
    arg352 := flag.Arg(1)
    mbTrans353 := thrift.NewTMemoryBufferLen(len(arg352))
    defer mbTrans353.Close()
    _, err354 := mbTrans353.WriteString(arg352)
    if err354 != nil {
      Usage()
      return
    }
    factory355 := thrift.NewTJSONProtocolFactory()
    jsProt356 := factory355.GetProtocol(mbTrans353)
    argvalue0 := sharestore.NewDSDelRequest()
    err357 := argvalue0.Read(context.Background(), jsProt356)
    if err357 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DsDelValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dsIsMember":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DsIsMember requires 1 args")
      flag.Usage()
    }
    arg358 := flag.Arg(1)
    mbTrans359 := thrift.NewTMemoryBufferLen(len(arg358))
    defer mbTrans359.Close()
    _, err360 := mbTrans359.WriteString(arg358)
    if err360 != nil {
      Usage()
      return
    }
    factory361 := thrift.NewTJSONProtocolFactory()
    jsProt362 := factory361.GetProtocol(mbTrans359)
    argvalue0 := sharestore.NewDSIsMemberRequest()
    err363 := argvalue0.Read(context.Background(), jsProt362)
    if err363 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DsIsMember(context.Background(), value0))
    fmt.Print("\n")
    break
  case "hashSetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HashSetValue requires 1 args")
      flag.Usage()
    }
    arg364 := flag.Arg(1)
    mbTrans365 := thrift.NewTMemoryBufferLen(len(arg364))
    defer mbTrans365.Close()
    _, err366 := mbTrans365.WriteString(arg364)
    if err366 != nil {
      Usage()
      return
    }
    factory367 := thrift.NewTJSONProtocolFactory()
    jsProt368 := factory367.GetProtocol(mbTrans365)
    argvalue0 := sharestore.NewHashSetRequest()
    err369 := argvalue0.Read(context.Background(), jsProt368)
    if err369 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HashSetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiHashSetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiHashSetValue requires 1 args")
      flag.Usage()
    }
    arg370 := flag.Arg(1)
    mbTrans371 := thrift.NewTMemoryBufferLen(len(arg370))
    defer mbTrans371.Close()
    _, err372 := mbTrans371.WriteString(arg370)
    if err372 != nil {
      Usage()
      return
    }
    factory373 := thrift.NewTJSONProtocolFactory()
    jsProt374 := factory373.GetProtocol(mbTrans371)
    argvalue0 := sharestore.NewMultiHashSetRequest()
    err375 := argvalue0.Read(context.Background(), jsProt374)
    if err375 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiHashSetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "hashRemValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HashRemValue requires 1 args")
      flag.Usage()
    }
    arg376 := flag.Arg(1)
    mbTrans377 := thrift.NewTMemoryBufferLen(len(arg376))
    defer mbTrans377.Close()
    _, err378 := mbTrans377.WriteString(arg376)
    if err378 != nil {
      Usage()
      return
    }
    factory379 := thrift.NewTJSONProtocolFactory()
    jsProt380 := factory379.GetProtocol(mbTrans377)
    argvalue0 := sharestore.NewHashRemRequest()
    err381 := argvalue0.Read(context.Background(), jsProt380)
    if err381 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HashRemValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiHashRemValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiHashRemValue requires 1 args")
      flag.Usage()
    }
    arg382 := flag.Arg(1)
    mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
    defer mbTrans383.Close()
    _, err384 := mbTrans383.WriteString(arg382)
    if err384 != nil {
      Usage()
      return
    }
    factory385 := thrift.NewTJSONProtocolFactory()
    jsProt386 := factory385.GetProtocol(mbTrans383)
    argvalue0 := sharestore.NewMultiHashRemRequest()
    err387 := argvalue0.Read(context.Background(), jsProt386)
    if err387 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiHashRemValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "hashGetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HashGetValue requires 1 args")
      flag.Usage()
    }
    arg388 := flag.Arg(1)
    mbTrans389 := thrift.NewTMemoryBufferLen(len(arg388))
    defer mbTrans389.Close()
    _, err390 := mbTrans389.WriteString(arg388)
    if err390 != nil {
      Usage()
      return
    }
    factory391 := thrift.NewTJSONProtocolFactory()
    jsProt392 := factory391.GetProtocol(mbTrans389)
    argvalue0 := sharestore.NewHashGetRequest()
    err393 := argvalue0.Read(context.Background(), jsProt392)
    if err393 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HashGetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multiHashGetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiHashGetValue requires 1 args")
      flag.Usage()
    }
    arg394 := flag.Arg(1)
    mbTrans395 := thrift.NewTMemoryBufferLen(len(arg394))
    defer mbTrans395.Close()
    _, err396 := mbTrans395.WriteString(arg394)
    if err396 != nil {
      Usage()
      return
    }
    factory397 := thrift.NewTJSONProtocolFactory()
    jsProt398 := factory397.GetProtocol(mbTrans395)
    argvalue0 := sharestore.NewMultiHashGetRequest()
    err399 := argvalue0.Read(context.Background(), jsProt398)
    if err399 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiHashGetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "hashCountValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HashCountValue requires 1 args")
      flag.Usage()
    }
    arg400 := flag.Arg(1)
    mbTrans401 := thrift.NewTMemoryBufferLen(len(arg400))
    defer mbTrans401.Close()
    _, err402 := mbTrans401.WriteString(arg400)
    if err402 != nil {
      Usage()
      return
    }
    factory403 := thrift.NewTJSONProtocolFactory()
    jsProt404 := factory403.GetProtocol(mbTrans401)
    argvalue0 := sharestore.NewHashCountRequest()
    err405 := argvalue0.Read(context.Background(), jsProt404)
    if err405 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HashCountValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "zsetAddValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ZsetAddValue requires 1 args")
      flag.Usage()
    }
    arg406 := flag.Arg(1)
    mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
    defer mbTrans407.Close()
    _, err408 := mbTrans407.WriteString(arg406)
    if err408 != nil {
      Usage()
      return
    }
    factory409 := thrift.NewTJSONProtocolFactory()
    jsProt410 := factory409.GetProtocol(mbTrans407)
    argvalue0 := sharestore.NewZSetAddRequest()
    err411 := argvalue0.Read(context.Background(), jsProt410)
    if err411 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ZsetAddValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "zsetRemValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ZsetRemValue requires 1 args")
      flag.Usage()
    }
    arg412 := flag.Arg(1)
    mbTrans413 := thrift.NewTMemoryBufferLen(len(arg412))
    defer mbTrans413.Close()
    _, err414 := mbTrans413.WriteString(arg412)
    if err414 != nil {
      Usage()
      return
    }
    factory415 := thrift.NewTJSONProtocolFactory()
    jsProt416 := factory415.GetProtocol(mbTrans413)
    argvalue0 := sharestore.NewZSetRemRequest()
    err417 := argvalue0.Read(context.Background(), jsProt416)
    if err417 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ZsetRemValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "zsetGetValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ZsetGetValue requires 1 args")
      flag.Usage()
    }
    arg418 := flag.Arg(1)
    mbTrans419 := thrift.NewTMemoryBufferLen(len(arg418))
    defer mbTrans419.Close()
    _, err420 := mbTrans419.WriteString(arg418)
    if err420 != nil {
      Usage()
      return
    }
    factory421 := thrift.NewTJSONProtocolFactory()
    jsProt422 := factory421.GetProtocol(mbTrans419)
    argvalue0 := sharestore.NewZSetGetRequest()
    err423 := argvalue0.Read(context.Background(), jsProt422)
    if err423 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ZsetGetValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "zsetGetRangeValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ZsetGetRangeValue requires 1 args")
      flag.Usage()
    }
    arg424 := flag.Arg(1)
    mbTrans425 := thrift.NewTMemoryBufferLen(len(arg424))
    defer mbTrans425.Close()
    _, err426 := mbTrans425.WriteString(arg424)
    if err426 != nil {
      Usage()
      return
    }
    factory427 := thrift.NewTJSONProtocolFactory()
    jsProt428 := factory427.GetProtocol(mbTrans425)
    argvalue0 := sharestore.NewZSetGetRangeRequest()
    err429 := argvalue0.Read(context.Background(), jsProt428)
    if err429 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ZsetGetRangeValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "zsetRemRangeValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ZsetRemRangeValue requires 1 args")
      flag.Usage()
    }
    arg430 := flag.Arg(1)
    mbTrans431 := thrift.NewTMemoryBufferLen(len(arg430))
    defer mbTrans431.Close()
    _, err432 := mbTrans431.WriteString(arg430)
    if err432 != nil {
      Usage()
      return
    }
    factory433 := thrift.NewTJSONProtocolFactory()
    jsProt434 := factory433.GetProtocol(mbTrans431)
    argvalue0 := sharestore.NewZSetRemRangeRequest()
    err435 := argvalue0.Read(context.Background(), jsProt434)
    if err435 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ZsetRemRangeValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "zsetCountValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ZsetCountValue requires 1 args")
      flag.Usage()
    }
    arg436 := flag.Arg(1)
    mbTrans437 := thrift.NewTMemoryBufferLen(len(arg436))
    defer mbTrans437.Close()
    _, err438 := mbTrans437.WriteString(arg436)
    if err438 != nil {
      Usage()
      return
    }
    factory439 := thrift.NewTJSONProtocolFactory()
    jsProt440 := factory439.GetProtocol(mbTrans437)
    argvalue0 := sharestore.NewZSetCountRequest()
    err441 := argvalue0.Read(context.Background(), jsProt440)
    if err441 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ZsetCountValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "zsetScanValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ZsetScanValue requires 1 args")
      flag.Usage()
    }
    arg442 := flag.Arg(1)
    mbTrans443 := thrift.NewTMemoryBufferLen(len(arg442))
    defer mbTrans443.Close()
    _, err444 := mbTrans443.WriteString(arg442)
    if err444 != nil {
      Usage()
      return
    }
    factory445 := thrift.NewTJSONProtocolFactory()
    jsProt446 := factory445.GetProtocol(mbTrans443)
    argvalue0 := sharestore.NewZSetScanRequest()
    err447 := argvalue0.Read(context.Background(), jsProt446)
    if err447 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ZsetScanValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
